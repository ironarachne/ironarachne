{"version":3,"file":"_page.svelte.js","sources":["../../../../../../src/lib/languages/phoneme.ts","../../../../../../src/lib/languages/phonemes.ts","../../../../../../src/lib/languages/phonemeset.ts","../../../../../../src/lib/languages/phonemesets.ts","../../../../../../src/lib/languages/generatorconfig.ts","../../../../../../src/lib/languages/word.ts","../../../../../../src/lib/languages/lexicon.ts","../../../../../../src/lib/languages/language.ts","../../../../../../src/lib/languages/morpheme.ts","../../../../../../src/lib/languages/generator.ts","../../../../../../src/routes/language/+page.svelte"],"sourcesContent":["\"use strict\";\n\nexport default class Phoneme {\n  sound: string;\n  transcriptions: string[];\n  classifiers: string[];\n  commonality: number;\n\n  constructor(sound: string, transcriptions: string[], classifiers: string[], commonality: number) {\n    this.sound = sound;\n    this.transcriptions = transcriptions;\n    this.classifiers = classifiers;\n    this.commonality = commonality;\n  }\n}\n","\"use strict\";\n\nimport Phoneme from \"./phoneme.js\";\n\nexport function all(): Phoneme[] {\n  return [\n    new Phoneme(\"b\", [\"b\"], [\"consonant\", \"bilabial\", \"plosive\", \"voiced\"], 1),\n    new Phoneme(\"c\", [\"c\", \"k\"], [\"consonant\", \"palatal\", \"plosive\", \"voiceless\"], 1),\n    new Phoneme(\n      \"ch\",\n      [\"ch\"],\n      [\"affricate\", \"consonant\", \"palato-alveolar\", \"sibilant\", \"voiceless\"],\n      1,\n    ),\n    new Phoneme(\"d\", [\"d\"], [\"alveolar\", \"consonant\", \"dental\", \"plosive\", \"voiced\"], 1),\n    new Phoneme(\"dʒ\", [\"j\"], [\"affricate\", \"consonant\", \"postalveolar\", \"voiced\"], 1),\n    new Phoneme(\"tʃ\", [\"ch\"], [\"affricate\", \"consonant\", \"postalveolar\", \"voiceless\"], 1), // e.g. beach\n    new Phoneme(\"f\", [\"f\"], [\"consonant\", \"voiceless\", \"fricative\", \"labiodental\"], 1),\n    new Phoneme(\"g\", [\"g\"], [\"consonant\", \"plosive\", \"velar\", \"voiced\"], 1),\n    new Phoneme(\"h\", [\"h\"], [\"consonant\", \"voiceless\", \"fricative\", \"glottal\", \"transition\"], 1),\n    new Phoneme(\"j\", [\"j\"], [\"affricate\", \"consonant\", \"sibilant\"], 1),\n    new Phoneme(\"k\", [\"k\"], [\"consonant\", \"plosive\", \"velar\", \"voiceless\"], 1),\n    new Phoneme(\n      \"l\",\n      [\"l\", \"ll\"],\n      [\"alveolar\", \"consonant\", \"dental\", \"lateral\", \"liquid\", \"voiced\"],\n      1,\n    ),\n    new Phoneme(\"m\", [\"m\"], [\"bilabial\", \"consonant\", \"nasal\", \"occlusive\", \"voiced\"], 1),\n    new Phoneme(\"n\", [\"n\"], [\"alveolar\", \"consonant\", \"dental\", \"nasal\", \"occlusive\", \"voiced\"], 1),\n    new Phoneme(\"ŋ\", [\"ng\"], [\"consonant\", \"nasal\", \"velar\", \"voiced\"], 1),\n    new Phoneme(\"p\", [\"p\"], [\"bilabial\", \"consonant\", \"plosive\", \"voiced\"], 1),\n    new Phoneme(\"q\", [\"q\"], [\"consonant\", \"plosive\", \"uvular\", \"voiceless\"], 1),\n    new Phoneme(\"ɹ\", [\"r\"], [\"consonant\", \"liquid\", \"rhotic\"], 1),\n    new Phoneme(\"r\", [\"rr\"], [\"alveolar\", \"consonant\", \"trill\", \"voiced\"], 1),\n    new Phoneme(\"s\", [\"s\", \"c\"], [\"consonant\", \"coronal\", \"fricative\", \"voiceless\"], 1),\n    new Phoneme(\"ʃ\", [\"sh\"], [\"consonant\", \"fricative\", \"sibilant\"], 1),\n    new Phoneme(\"ʒ\", [\"si\", \"zh\"], [\"consonant\", \"fricative\", \"palato-alveolar\", \"sibilant\"], 1),\n    new Phoneme(\"ɾ\", [\"tt\"], [\"alveolar\", \"consonant\", \"voiced\", \"tap\"], 1),\n    new Phoneme(\"ɽ\", [\"dd\"], [\"alveolar\", \"consonant\", \"voiced\", \"tap\"], 1),\n    new Phoneme(\"t\", [\"t\"], [\"consonant\", \"dental\", \"plosive\", \"voiceless\"], 1),\n    new Phoneme(\n      \"ts\",\n      [\"ts\", \"tsu\"],\n      [\"affricate\", \"alveolar\", \"consonant\", \"fricative\", \"voiceless\"],\n      1,\n    ),\n    new Phoneme(\"θ\", [\"th\"], [\"consonant\", \"fricative\", \"voiceless\"], 1),\n    new Phoneme(\"ð\", [\"th\"], [\"consonant\", \"fricative\", \"voiced\"], 1),\n    new Phoneme(\"v\", [\"v\"], [\"consonant\", \"fricative\", \"labiodental\", \"voiced\"], 1),\n    new Phoneme(\"w\", [\"w\"], [\"approximant\", \"consonant\", \"velar\", \"voiced\"], 1),\n    new Phoneme(\"x\", [\"ch\", \"k\"], [\"consonant\", \"fricative\", \"velar\", \"voiceless\"], 1),\n    new Phoneme(\"y\", [\"y\"], [\"approximant\", \"consonant\", \"palatal\", \"voiced\"], 1),\n    new Phoneme(\"z\", [\"z\", \"x\"], [\"aveolar\", \"consonant\", \"fricative\", \"voiced\"], 1),\n    new Phoneme(\"ə\", [\"a\"], [\"central\", \"unrounded\", \"vowel\"], 1), // e.g., the a in Tina\n    new Phoneme(\"e\", [\"ay\", \"e\"], [\"close-mid\", \"front\", \"unrounded\", \"vowel\"], 1), // e.g. may\n    new Phoneme(\"aɪ\", [\"ai\", \"y\", \"ie\", \"igh\"], [\"vowel\"], 1),\n    new Phoneme(\"aʊ\", [\"ou\"], [\"vowel\"], 1),\n    new Phoneme(\"æ\", [\"a\"], [\"front\", \"unrounded\", \"vowel\"], 1),\n    new Phoneme(\"ɔ\", [\"o\"], [\"back\", \"unrounded\", \"vowel\"], 1),\n    new Phoneme(\"a\", [\"a\"], [\"open\", \"front\", \"unrounded\", \"vowel\"], 1), // e.g. hat in Texan/Californian dialect\n    new Phoneme(\"ɒ\", [\"ough\", \"a\", \"o\"], [\"back\", \"open\", \"rounded\", \"vowel\"], 1),\n    new Phoneme(\"ɛ\", [\"e\"], [\"front\", \"unrounded\", \"vowel\"], 1),\n    new Phoneme(\"o\", [\"aw\"], [\"close-mid\", \"back\", \"unrounded\", \"vowel\"], 1), // e.g. yawn in Australian dialect\n    new Phoneme(\"ɪ\", [\"i\"], [\"front\", \"unrounded\", \"vowel\"], 1),\n    new Phoneme(\"ʌ\", [\"u\", \"oo\"], [\"back\", \"open-mid\", \"unrounded\", \"vowel\"], 1), // e.g. foot\n    new Phoneme(\"ʊ\", [\"u\"], [\"near-back\", \"rounded\", \"vowel\"], 1),\n    new Phoneme(\"i\", [\"i\", \"ee\"], [\"close\", \"front\", \"unrounded\", \"vowel\"], 1), // e.g. free\n    new Phoneme(\"ʊ\", [\"oo\"], [\"near-close\", \"near-back\", \"rounded\", \"vowel\"], 1), // e.g. hook\n    new Phoneme(\"ɔɪ\", [\"oi\", \"oy\"], [\"vowel\"], 1),\n    new Phoneme(\"u\", [\"u\", \"oo\"], [\"close\", \"back\", \"rounded\", \"vowel\"], 1), // e.g. food\n  ];\n}\n\nexport function byClassification(classification: string, phonemes: Phoneme[]): Phoneme[] {\n  return phonemes.filter((phoneme) => phoneme.classifiers.includes(classification));\n}\n\nexport function bySound(sound: string, phonemes: Phoneme[]): Phoneme {\n  return phonemes.filter((phoneme) => phoneme.sound === sound)[0];\n}\n\nexport function getConsonants(phonemes: Phoneme[]): Phoneme[] {\n  let result = byClassification(\"consonant\", phonemes);\n  return result;\n}\n\nexport function getVowels(phonemes: Phoneme[]): Phoneme[] {\n  let result = byClassification(\"vowel\", phonemes);\n  return result;\n}\n","\"use strict\";\n\nimport Phoneme from \"./phoneme.js\";\nimport * as Phonemes from \"./phonemes.js\";\n\nexport default class PhonemeSet {\n  name: string;\n  phonemes: Record<string, Phoneme>;\n\n  constructor(name: string) {\n    this.name = name;\n    this.phonemes = initializePhonemeSet();\n  }\n\n  getPhonemes(): Phoneme[] {\n    let phonemes = [];\n\n    for (const phoneme in this.phonemes) {\n      phonemes.push(this.phonemes[phoneme]);\n    }\n\n    return phonemes;\n  }\n}\n\nfunction initializePhonemeSet(): Record<string, Phoneme> {\n  let all = Phonemes.all();\n  let phonemes: Record<string, Phoneme> = {};\n  for (const phoneme of all) {\n    phonemes[phoneme.sound] = phoneme;\n  }\n\n  return phonemes;\n}\n","\"use strict\";\n\nimport PhonemeSet from \"./phonemeset.js\";\n\nexport function all(): PhonemeSet[] {\n  return [getEnglishSet()];\n}\n\nfunction getEnglishSet(): PhonemeSet {\n  let set = new PhonemeSet(\"English\");\n  // TODO: remove phonemes that don't belong in English\n  set.phonemes[\"ə\"].commonality = 114;\n  set.phonemes[\"n\"].commonality = 71;\n  set.phonemes[\"ɾ\"].commonality = 69;\n  set.phonemes[\"t\"].commonality = 69;\n  set.phonemes[\"ɪ\"].commonality = 63;\n  set.phonemes[\"s\"].commonality = 47;\n  set.phonemes[\"d\"].commonality = 42;\n  set.phonemes[\"l\"].commonality = 39;\n  set.phonemes[\"i\"].commonality = 36;\n  set.phonemes[\"k\"].commonality = 31;\n  set.phonemes[\"ð\"].commonality = 29;\n  set.phonemes[\"ɛ\"].commonality = 28;\n  set.phonemes[\"m\"].commonality = 27;\n  set.phonemes[\"z\"].commonality = 27;\n  set.phonemes[\"p\"].commonality = 21;\n  set.phonemes[\"æ\"].commonality = 21;\n  set.phonemes[\"v\"].commonality = 20;\n  set.phonemes[\"w\"].commonality = 19;\n  set.phonemes[\"u\"].commonality = 19;\n  set.phonemes[\"b\"].commonality = 18;\n  set.phonemes[\"e\"].commonality = 17;\n  set.phonemes[\"ʌ\"].commonality = 17;\n  set.phonemes[\"f\"].commonality = 17;\n  set.phonemes[\"aɪ\"].commonality = 15;\n  set.phonemes[\"a\"].commonality = 14;\n  set.phonemes[\"h\"].commonality = 15;\n  set.phonemes[\"o\"].commonality = 12;\n  set.phonemes[\"ɒ\"].commonality = 11;\n  set.phonemes[\"ŋ\"].commonality = 9;\n  set.phonemes[\"ʃ\"].commonality = 8;\n  set.phonemes[\"j\"].commonality = 8;\n  set.phonemes[\"g\"].commonality = 8;\n  set.phonemes[\"dʒ\"].commonality = 5;\n  set.phonemes[\"tʃ\"].commonality = 5;\n  set.phonemes[\"aʊ\"].commonality = 5;\n  set.phonemes[\"ʊ\"].commonality = 4;\n  set.phonemes[\"θ\"].commonality = 4;\n  set.phonemes[\"ɔɪ\"].commonality = 1;\n  set.phonemes[\"ʒ\"].commonality = 1;\n\n  return set;\n}\n","\"use strict\";\n\nimport PhonemeSet from \"./phonemeset.js\";\nimport * as PhonemeSets from \"./phonemesets.js\";\n\nexport default class LanguageGeneratorConfig {\n  phonemeSets: PhonemeSet[];\n\n  constructor() {\n    this.phonemeSets = PhonemeSets.all();\n  }\n}\n","\"use strict\";\n\nexport default class Word {\n  root: string;\n  pronunciation: string;\n  speechPart: string;\n  meaning: string;\n\n  constructor(speechPart: string, meaning: string) {\n    this.root = \"\";\n    this.pronunciation = \"\";\n    this.speechPart = speechPart;\n    this.meaning = meaning;\n  }\n}\n","\"use strict\";\n\nimport Word from \"./word.js\";\n\nexport default class Lexicon {\n  words: Word[];\n\n  constructor() {\n    this.words = [];\n\n    const adj: string[] = adjectives();\n\n    for (let i = 0; i < adj.length; i++) {\n      const word = new Word(\"adjective\", adj[i]);\n      this.words.push(word);\n    }\n\n    const adv: string[] = adverbs();\n\n    for (let i = 0; i < adv.length; i++) {\n      const word = new Word(\"adverb\", adv[i]);\n      this.words.push(word);\n    }\n\n    const art: string[] = articles();\n\n    for (let i = 0; i < art.length; i++) {\n      const word = new Word(\"article\", art[i]);\n      this.words.push(word);\n    }\n\n    const inter: string[] = interjections();\n\n    for (let i = 0; i < inter.length; i++) {\n      const word = new Word(\"interjection\", inter[i]);\n      this.words.push(word);\n    }\n\n    const prep: string[] = prepositions();\n\n    for (let i = 0; i < prep.length; i++) {\n      const word = new Word(\"preposition\", prep[i]);\n      this.words.push(word);\n    }\n\n    const que: string[] = questions();\n\n    for (let i = 0; i < que.length; i++) {\n      const word = new Word(\"question\", que[i]);\n      this.words.push(word);\n    }\n\n    const ver: string[] = verbs();\n\n    for (let i = 0; i < ver.length; i++) {\n      const word = new Word(\"verb\", ver[i]);\n      this.words.push(word);\n    }\n\n    const nou: string[] = nouns();\n\n    for (let i = 0; i < nou.length; i++) {\n      const word = new Word(\"noun\", nou[i]);\n      this.words.push(word);\n    }\n\n    const nm: string[] = numbers();\n\n    for (let i = 0; i < nm.length; i++) {\n      const word = new Word(\"number\", nm[i]);\n      this.words.push(word);\n    }\n\n    const pro: string[] = pronouns();\n\n    for (let i = 0; i < pro.length; i++) {\n      const word = new Word(\"pronoun\", pro[i]);\n      this.words.push(word);\n    }\n  }\n\n  getWordsBySpeechPart(speechPart: string): Word[] {\n    return this.words.filter((word) => word.speechPart == speechPart);\n  }\n}\n\nfunction adjectives() {\n  return [\n    \"aromatic\",\n    \"basted\",\n    \"big\",\n    \"bitter\",\n    \"black\",\n    \"blue\",\n    \"brown\",\n    \"chilled\",\n    \"cold\",\n    \"curried\",\n    \"dark\",\n    \"deep\",\n    \"divine\",\n    \"drunk\",\n    \"empty\",\n    \"evil\",\n    \"familiar\",\n    \"fat\",\n    \"flat\",\n    \"frail\",\n    \"fried\",\n    \"full\",\n    \"good\",\n    \"green\",\n    \"grey\",\n    \"honest\",\n    \"hot\",\n    \"light\",\n    \"long\",\n    \"loud\",\n    \"mortal\",\n    \"mysterious\",\n    \"narrow\",\n    \"old\",\n    \"orange\",\n    \"pungent\",\n    \"purple\",\n    \"quiet\",\n    \"raw\",\n    \"rectangular\",\n    \"red\",\n    \"roasted\",\n    \"round\",\n    \"salty\",\n    \"savory\",\n    \"shallow\",\n    \"short\",\n    \"smoked\",\n    \"sober\",\n    \"sour\",\n    \"spicy\",\n    \"spiral\",\n    \"square\",\n    \"steamed\",\n    \"strange\",\n    \"strong\",\n    \"sturdy\",\n    \"sweet\",\n    \"tall\",\n    \"thick\",\n    \"thin\",\n    \"warm\",\n    \"weak\",\n    \"white\",\n    \"wide\",\n    \"yellow\",\n    \"young\",\n  ];\n}\n\nfunction adverbs() {\n  return [\"again\", \"now\", \"soon\", \"often\", \"sometimes\", \"always\", \"never\", \"seldom\"];\n}\n\nfunction articles() {\n  return [\"a\", \"the\"];\n}\n\nfunction interjections() {\n  return [\"hello\", \"goodbye\", \"hey\", \"bye\", \"ouch\", \"wow\", \"uh\", \"er\", \"um\"];\n}\n\nfunction prepositions() {\n  return [\"and\", \"as\", \"from\", \"in\", \"of\", \"or\", \"to\", \"will\", \"with\"];\n}\n\nfunction questions() {\n  return [\"what\", \"who\", \"how\", \"why\", \"when\"];\n}\n\nfunction verbs() {\n  return [\n    \"bake\",\n    \"be\",\n    \"belong\",\n    \"bite\",\n    \"break\",\n    \"burn\",\n    \"come\",\n    \"die\",\n    \"drink\",\n    \"eat\",\n    \"fall\",\n    \"fight\",\n    \"find\",\n    \"fish\",\n    \"fly\",\n    \"frown\",\n    \"go\",\n    \"growl\",\n    \"hate\",\n    \"have\",\n    \"hear\",\n    \"hide\",\n    \"hold\",\n    \"hunt\",\n    \"jump\",\n    \"kill\",\n    \"know\",\n    \"laugh\",\n    \"lie\",\n    \"live\",\n    \"lose\",\n    \"love\",\n    \"need\",\n    \"own\",\n    \"roast\",\n    \"run\",\n    \"see\",\n    \"sit\",\n    \"sleep\",\n    \"smell\",\n    \"smile\",\n    \"stand\",\n    \"strike\",\n    \"swallow\",\n    \"swim\",\n    \"taste\",\n    \"throw\",\n    \"walk\",\n    \"want\",\n  ];\n}\n\nfunction nouns() {\n  return [\n    \"afternoon\",\n    \"ale\",\n    \"all\",\n    \"alligator\",\n    \"arm\",\n    \"ash\",\n    \"aunt\",\n    \"axe\",\n    \"bark\",\n    \"bay\",\n    \"beer\",\n    \"beet\",\n    \"bird\",\n    \"blood\",\n    \"boar\",\n    \"bone\",\n    \"breakfast\",\n    \"breast\",\n    \"brother\",\n    \"castle\",\n    \"cat\",\n    \"cat\",\n    \"chest\",\n    \"chicken\",\n    \"claw\",\n    \"cloud\",\n    \"coconut\",\n    \"crime\",\n    \"day\",\n    \"dinner\",\n    \"dog\",\n    \"drink\",\n    \"dungeon\",\n    \"ear\",\n    \"earth\",\n    \"egg\",\n    \"elder\",\n    \"enemy\",\n    \"evening\",\n    \"eye\",\n    \"family\",\n    \"father\",\n    \"feather\",\n    \"fight\",\n    \"finger\",\n    \"fire\",\n    \"fish\",\n    \"flesh\",\n    \"foot\",\n    \"forest\",\n    \"fox\",\n    \"friend\",\n    \"goose\",\n    \"grease\",\n    \"group\",\n    \"gulf\",\n    \"hair\",\n    \"hand\",\n    \"hat\",\n    \"hate\",\n    \"head\",\n    \"hill\",\n    \"horn\",\n    \"horse\",\n    \"house\",\n    \"inn\",\n    \"island\",\n    \"jaw\",\n    \"lake\",\n    \"leaf\",\n    \"leg\",\n    \"liver\",\n    \"louse\",\n    \"love\",\n    \"lunch\",\n    \"man\",\n    \"many\",\n    \"meal\",\n    \"metal\",\n    \"mine\",\n    \"monster\",\n    \"moon\",\n    \"morning\",\n    \"mother\",\n    \"mountain\",\n    \"mouth\",\n    \"name\",\n    \"neck\",\n    \"night\",\n    \"noodle\",\n    \"nose\",\n    \"ocean\",\n    \"parent\",\n    \"path\",\n    \"peace\",\n    \"pepper\",\n    \"person\",\n    \"pie\",\n    \"pig\",\n    \"rabbit\",\n    \"rain\",\n    \"rat\",\n    \"river\",\n    \"robe\",\n    \"rock\",\n    \"root\",\n    \"salt\",\n    \"sand\",\n    \"seed\",\n    \"sibling\",\n    \"sister\",\n    \"skin\",\n    \"sky\",\n    \"smoke\",\n    \"snake\",\n    \"soup\",\n    \"star\",\n    \"stew\",\n    \"stomach\",\n    \"stone\",\n    \"stream\",\n    \"sun\",\n    \"sword\",\n    \"tail\",\n    \"tavern\",\n    \"thumb\",\n    \"tongue\",\n    \"tooth\",\n    \"tree\",\n    \"truth\",\n    \"uncle\",\n    \"valley\",\n    \"war\",\n    \"water\",\n    \"way\",\n    \"wine\",\n    \"woman\",\n    \"word\",\n  ];\n}\n\nfunction numbers() {\n  return [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"];\n}\n\nfunction pronouns() {\n  return [\"he\", \"she\", \"they\", \"you\", \"we\", \"I\"];\n}\n","\"use strict\";\n\nimport Conjugation from \"./conjugation.js\";\nimport Lexicon from \"./lexicon.js\";\nimport PhonemeSet from \"./phonemeset.js\";\n\nexport default class Language {\n  name: string;\n  lexicon: Lexicon;\n  phonemeSet: PhonemeSet;\n  conjugations: Conjugation[];\n  wordOrder: string;\n\n  constructor(name: string, phonemeSet: PhonemeSet) {\n    this.name = name;\n    this.phonemeSet = phonemeSet;\n    this.conjugations = [];\n    this.lexicon = new Lexicon();\n    this.wordOrder = \"\";\n  }\n}\n","\"use strict\";\n\nimport Phoneme from \"./phoneme.js\";\n\nexport default class Morpheme {\n  phonemes: Phoneme[];\n\n  constructor() {\n    this.phonemes = [];\n  }\n\n  getPronunciation(): string {\n    return this.phonemes.map((p) => p.sound).join(\"\");\n  }\n\n  getTranscription(): string {\n    return this.phonemes.map((p) => p.transcriptions[0]).join(\"\");\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport LanguageGeneratorConfig from \"./generatorconfig.js\";\nimport Language from \"./language.js\";\nimport Morpheme from \"./morpheme.js\";\nimport * as Phonemes from \"./phonemes.js\";\nimport PhonemeSet from \"./phonemeset.js\";\n\nexport default class LanguageGenerator {\n  config: LanguageGeneratorConfig;\n\n  constructor(config: LanguageGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Language {\n    let phonemeSet = RND.item(this.config.phonemeSets);\n\n    let language = new Language(\"\", phonemeSet);\n    language.wordOrder = randomWordOrder();\n    language.name = Words.capitalize(\n      randomMorpheme(random.int(4, 7), phonemeSet).getTranscription(),\n    );\n\n    for (let i = 0; i < language.lexicon.words.length; i++) {\n      let morphemeLength = random.int(2, 7);\n      if ([\"article\", \"pronoun\"].includes(language.lexicon.words[i].speechPart)) {\n        morphemeLength = random.int(2, 3);\n      }\n      let morpheme = randomMorpheme(morphemeLength, phonemeSet);\n      language.lexicon.words[i].root = morpheme.getTranscription();\n      language.lexicon.words[i].pronunciation = morpheme.getPronunciation();\n    }\n\n    // TODO: add generation of conjugations\n\n    return language;\n  }\n}\n\nfunction randomWordOrder(): string {\n  let options = [\n    {\n      value: \"svo\",\n      commonality: 10,\n    },\n    {\n      value: \"sov\",\n      commonality: 1,\n    },\n  ];\n\n  let order = RND.weighted(options);\n\n  return order.value;\n}\n\nfunction randomMorpheme(length: number, phonemeSet: PhonemeSet): Morpheme {\n  let consonants = Phonemes.getConsonants(phonemeSet.getPhonemes());\n  let vowels = Phonemes.getVowels(phonemeSet.getPhonemes());\n  let pattern = \"\";\n\n  for (let i = 0; i < length; i++) {\n    if (i == 0 && length == 1) {\n      pattern = \"v\";\n    } else {\n      let newPart = RND.item([\"v\", \"c\"]);\n      if (i > 0) {\n        let last = pattern[i - 1];\n        if (last == \"v\") {\n          newPart = \"c\";\n        } else {\n          newPart = \"v\";\n        }\n      }\n      pattern += newPart;\n    }\n  }\n\n  let morpheme = new Morpheme();\n\n  for (let i = 0; i < pattern.length; i++) {\n    if (pattern[i] == \"v\") {\n      morpheme.phonemes.push(RND.weighted(vowels)); // TODO: make spellings weighted\n    } else {\n      morpheme.phonemes.push(RND.weighted(consonants)); // TODO: make spellings weighted\n    }\n  }\n\n  return morpheme;\n}\n","<script lang=\"ts\">\n  import * as RND from \"@ironarachne/rng\";\n  import LanguageGeneratorConfig from \"$lib/languages/generatorconfig\";\n  import LanguageGenerator from \"$lib/languages/generator\";\n  import random from \"random\";\n  import seedrandom from \"seedrandom\";\n  import type Language from \"$lib/languages/language\";\n  let language: Language;\n  let gen;\n  let config;\n  let seed = RND.randomString(13);\n\n  function generate() {\n    seed = RND.randomString(13);\n    random.use(seedrandom(seed));\n    config = new LanguageGeneratorConfig();\n    gen = new LanguageGenerator(config);\n    language = gen.generate();\n  }\n\n  generate();\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/fantasy.scss';\n</style>\n\n<svelte:head>\n  <title>Language Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"main default\">\n  <h1>Language Generator</h1>\n  <p>This generates fictional languages. This is mostly useful for debugging.</p>\n  <button on:click={generate}>Generate</button>\n\n  <h2>{language.name}</h2>\n\n  <h3>{language.name} Dictionary</h3>\n\n  <h4>Pronouns</h4>\n  {#each language.lexicon.getWordsBySpeechPart('pronoun') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n\n  <h4>Articles</h4>\n  {#each language.lexicon.getWordsBySpeechPart('article') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n\n  <h4>Prepositions</h4>\n  {#each language.lexicon.getWordsBySpeechPart('preposition') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n\n  <h4>Numbers</h4>\n  {#each language.lexicon.getWordsBySpeechPart('number') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n\n  <h4>Questions</h4>\n  {#each language.lexicon.getWordsBySpeechPart('question') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n\n  <h4>Interjections</h4>\n  {#each language.lexicon.getWordsBySpeechPart('interjection') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n\n  <h4>Adverbs</h4>\n  {#each language.lexicon.getWordsBySpeechPart('adverb') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n\n  <h4>Adjectives</h4>\n  {#each language.lexicon.getWordsBySpeechPart('adjective') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n\n  <h4>Verbs</h4>\n  {#each language.lexicon.getWordsBySpeechPart('verb') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n\n  <h4>Nouns</h4>\n  {#each language.lexicon.getWordsBySpeechPart('noun') as word}\n    <p>{word.root} ({word.speechPart}, /{word.pronunciation}/): \"{word.meaning}\"</p>\n  {/each}\n</section>\n"],"names":["all","Phonemes.all","PhonemeSets.all","Phonemes.getConsonants","Phonemes.getVowels"],"mappings":"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CA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACA;AAEJ;AAEA,SAAA,UAAA;AACE,SAAA,CAAA,QAAA,OAAA,OA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"}