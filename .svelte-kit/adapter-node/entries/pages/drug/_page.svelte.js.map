{"version":3,"file":"_page.svelte.js","sources":["../../../../../../src/lib/drug/drugtype.ts","../../../../../../src/lib/drug/effecttype.ts","../../../../../../src/lib/drug/drug.ts","../../../../../../src/lib/drug/drugtypes.ts","../../../../../../src/lib/drug/effecttypes.ts","../../../../../../src/lib/drug/generatorconfig.ts","../../../../../../src/lib/drug/generator.ts","../../../../../../src/routes/drug/+page.svelte"],"sourcesContent":["export default class DrugType {\n  name: string;\n  methods: string[];\n\n  constructor(name: string, methods: string[]) {\n    this.name = name;\n    this.methods = methods;\n  }\n}\n","export default class EffectType {\n  name: string;\n  effects: string[];\n\n  constructor(name: string, effects: string[]) {\n    this.name = name;\n    this.effects = effects;\n  }\n}\n","import * as Words from \"@ironarachne/words\";\nimport DrugType from \"./drugtype.js\";\nimport EffectType from \"./effecttype.js\";\n\nexport default class Drug {\n  name: string;\n  drugType: DrugType;\n  method: string;\n  effectType: EffectType;\n  effectDescription: string;\n  strength: string;\n  color: string;\n  duration: string;\n  sideEffect: string;\n  commonality: string;\n\n  constructor(drugType: DrugType, effectType: EffectType) {\n    this.drugType = drugType;\n    this.name = \"\";\n    this.method = \"\";\n    this.effectType = effectType;\n    this.effectDescription = \"\";\n    this.strength = \"\";\n    this.color = \"\";\n    this.duration = \"\";\n    this.sideEffect = \"\";\n    this.commonality = \"\";\n  }\n\n  describe() {\n    let description = this.name + \" is a \" + this.strength + \" \" + this.effectType.name + \". \";\n    description += \"It's \"\n      + Words.article(this.color)\n      + \" \"\n      + this.color\n      + \" \"\n      + this.drugType.name\n      + \" that is \"\n      + this.method\n      + \". \";\n    description += this.effectDescription;\n    description += \" \" + this.duration;\n    description += \" Side effects can include \" + this.sideEffect + \". \";\n    description += this.commonality;\n\n    return description;\n  }\n}\n","import * as Words from \"@ironarachne/words\";\nimport DrugType from \"./drugtype.js\";\n\nexport function all() {\n  return [gas(), liquid(), ointment(), powder(), paste(), pill()];\n}\n\nfunction gas(): DrugType {\n  let verbs = [\"inhaled\", \"breathed in\", \"sniffed\"];\n\n  let options = [\"breather\", \"aerosol\", \"small spray can\", \"long tube\", \"palm-sized tank\"];\n\n  let descriptions = [];\n\n  for (let x = 0; x < verbs.length; x++) {\n    for (let y = 0; y < options.length; y++) {\n      descriptions.push(`${verbs[x]} from ${Words.article(options[y])} ${options[y]}`);\n    }\n  }\n\n  return new DrugType(\"gas\", descriptions);\n}\n\nfunction liquid(): DrugType {\n  let options = [\"arm\", \"leg\", \"heart\", \"neck\"];\n\n  let descriptions = [\n    \"drank straight\",\n    \"put into cocktails and drank\",\n    \"diluted with water and drank\",\n    \"dropped into the eyes\",\n    \"squirted into the eyes\",\n    \"sprayed into the eyes\",\n  ];\n\n  for (let y = 0; y < options.length; y++) {\n    descriptions.push(`injected in the ${options[y]}`);\n  }\n\n  return new DrugType(\"liquid\", descriptions);\n}\n\nfunction ointment(): DrugType {\n  let verbs = [\"spread\", \"dabbed\", \"brushed\", \"rubbed\"];\n\n  let options = [\"face\", \"hands\", \"skin\", \"forehead\", \"lips\"];\n\n  let descriptions = [];\n\n  for (let x = 0; x < verbs.length; x++) {\n    for (let y = 0; y < options.length; y++) {\n      descriptions.push(`${verbs[x]} on the ${options[y]}`);\n    }\n  }\n\n  return new DrugType(\"ointment\", descriptions);\n}\n\nfunction paste(): DrugType {\n  let verbs = [\"spread\", \"smeared\", \"rubbed\"];\n\n  let options = [\"face\", \"hands\", \"skin\", \"forehead\", \"lips\", \"throat\"];\n\n  let descriptions = [];\n\n  for (let x = 0; x < verbs.length; x++) {\n    for (let y = 0; y < options.length; y++) {\n      descriptions.push(`${verbs[x]} on the ${options[y]}`);\n    }\n  }\n\n  return new DrugType(\"paste\", descriptions);\n}\n\nfunction pill(): DrugType {\n  let descriptions = [\n    \"crushed into food and eaten\",\n    \"swallowed whole\",\n    \"swallowed with a beverage\",\n    \"mixed into food and eaten\",\n    \"chewed\",\n  ];\n\n  return new DrugType(\"pill\", descriptions);\n}\n\nfunction powder(): DrugType {\n  let descriptions = [\n    \"inhaled\",\n    \"breathed in\",\n    \"snorted\",\n    \"put in liquids and drank\",\n    \"added to oil and rubbed on the skin\",\n  ];\n\n  return new DrugType(\"powder\", descriptions);\n}\n","import EffectType from \"./effecttype.js\";\n\nexport function all(): EffectType[] {\n  return [\n    new EffectType(\"hallucinogen\", [\n      \"It creates psychedelic visions.\",\n      \"It warps the appearance of things around you.\",\n      \"It shows you your brightest hopes, and sometimes your darkest nightmares.\",\n      \"It makes you delirious.\",\n      \"It shows you things you wish were real.\",\n      \"It seems to separate your mind from your body.\",\n    ]),\n    new EffectType(\"aphrodesiac\", [\n      \"It increases your sex drive.\",\n      \"Among other things, it increases your confidence.\",\n      \"It boosts your performance and your sexual appetite.\",\n    ]),\n    new EffectType(\"depressant\", [\n      \"It makes you mentally numb.\",\n      \"It makes you mentally and physically numb.\",\n      \"It numbs pain.\",\n      \"It numbs physical sensation.\",\n      \"It suppresses anger.\",\n      \"It suppresses pain.\",\n      \"It puts the world around you in a fog.\",\n    ]),\n    new EffectType(\"stimulant\", [\n      \"It gets you jazzed up.\",\n      \"It increases your reflexes.\",\n      \"It boosts your ability to interface with cybertech.\",\n      \"It increases your mental focus.\",\n      \"It makes you more aware of your surroundings.\",\n      \"It boosts your strength.\",\n      \"It increases your awareness.\",\n    ]),\n    new EffectType(\"tranquilizer\", [\n      \"It relaxes you.\",\n      \"It helps you sleep.\",\n      \"It eliminates anxiety.\",\n      \"It reduces anxiety.\",\n      \"It puts you to sleep immediately.\",\n    ]),\n    new EffectType(\"euphoriant\", [\n      \"It makes you feel happy.\",\n      \"It makes you feel really good.\",\n      \"It makes you immune to pain.\",\n      \"It turns pain into pleasure.\",\n      \"It gives you a rush of energy and a feeling of excitement.\",\n      \"It makes you feel invincible.\",\n    ]),\n  ];\n}\n","import DrugType from \"./drugtype.js\";\nimport * as DrugTypes from \"./drugtypes.js\";\nimport EffectType from \"./effecttype.js\";\nimport * as EffectTypes from \"./effecttypes.js\";\n\nexport default class DrugGeneratorConfig {\n  drugTypes: DrugType[];\n  effectTypes: EffectType[];\n\n  constructor() {\n    let drugTypes = DrugTypes.all();\n    let effectTypes = EffectTypes.all();\n\n    this.drugTypes = drugTypes;\n    this.effectTypes = effectTypes;\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport Drug from \"./drug.js\";\nimport DrugGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class DrugGenerator {\n  config: DrugGeneratorConfig;\n\n  constructor() {\n    this.config = new DrugGeneratorConfig();\n  }\n\n  generate(): Drug {\n    let drug = new Drug(RND.item(this.config.drugTypes), RND.item(this.config.effectTypes));\n\n    drug.name = randomName();\n    drug.method = RND.item(drug.drugType.methods);\n    drug.effectDescription = RND.item(drug.effectType.effects);\n    drug.strength = randomStrength();\n    drug.color = randomColor();\n    drug.duration = randomDuration();\n    drug.sideEffect = randomSideEffect();\n    drug.commonality = randomCommonality();\n\n    return drug;\n  }\n}\n\nfunction randomColor(): string {\n  const color = RND.item([\n    \"amber\",\n    \"azure\",\n    \"blue\",\n    \"brown\",\n    \"coppery\",\n    \"crimson\",\n    \"emerald\",\n    \"golden\",\n    \"green\",\n    \"magenta\",\n    \"orange\",\n    \"pink\",\n    \"purple\",\n    \"red\",\n    \"ruby\",\n    \"sapphire\",\n    \"turqoise\",\n    \"violet\",\n    \"yellow\",\n  ]);\n\n  const modifier = RND.item([\n    \"bright\",\n    \"dark\",\n    \"fluorescent\",\n    \"glittering\",\n    \"glowing\",\n    \"light\",\n    \"pearlescent\",\n    \"shining\",\n    \"sparkling\",\n  ]);\n\n  return modifier + \" \" + color;\n}\n\nfunction randomCommonality(): string {\n  return RND.item([\n    \"You can find it just about everywhere.\",\n    \"It's hard to find.\",\n    \"It's easy to find.\",\n    \"It's easy to find, if you know the right people.\",\n    \"It's uncommon.\",\n    \"It's fairly rare, unless you know the right people.\",\n  ]);\n}\n\nfunction randomDuration(): string {\n  return RND.item([\n    \"One dose lasts for a few minutes.\",\n    \"One dose lasts for an hour or two.\",\n    \"One dose lasts for several hours.\",\n    \"One dose lasts for an entire day.\",\n    \"One dose lasts for half an hour or so.\",\n  ]);\n}\n\nfunction randomName(): string {\n  const nameType = RND.item([\n    {\n      name: \"single word\",\n      generate: function() {\n        return RND.item([\n          \"Angel\",\n          \"Arc\",\n          \"Bright\",\n          \"Burn\",\n          \"Burst\",\n          \"Dreg\",\n          \"Dust\",\n          \"Frost\",\n          \"Ice\",\n          \"Jazz\",\n          \"Shade\",\n          \"Shadow\",\n          \"Sky\",\n          \"Slice\",\n          \"Spice\",\n          \"Stardust\",\n          \"Synth\",\n          \"Toxin\",\n          \"Venom\",\n        ]);\n      },\n    },\n    {\n      name: \"numbered word\",\n      generate: function() {\n        let word = RND.item([\n          \"Angel\",\n          \"Arc\",\n          \"Bright\",\n          \"Burn\",\n          \"Burst\",\n          \"Dreg\",\n          \"Dust\",\n          \"Frost\",\n          \"Ice\",\n          \"Jazz\",\n          \"Shade\",\n          \"Shadow\",\n          \"Sky\",\n          \"Slice\",\n          \"Spice\",\n          \"Stardust\",\n          \"Synth\",\n          \"Toxin\",\n          \"Venom\",\n        ]);\n\n        let number = random.int(2, 13);\n\n        return `${word}-${number}`;\n      },\n    },\n    {\n      name: \"phrase\",\n      generate: function() {\n        const prefix = RND.item([\n          \"Angel\",\n          \"Black\",\n          \"Blue\",\n          \"Bright\",\n          \"Demon\",\n          \"Devil\",\n          \"Easy\",\n          \"Fire\",\n          \"Gold\",\n          \"Green\",\n          \"Ice\",\n          \"Night\",\n          \"Slash\",\n          \"Star\",\n          \"Street\",\n          \"White\",\n        ]);\n\n        const suffix = RND.item([\n          \"Dream\",\n          \"Dust\",\n          \"Fantasy\",\n          \"Flower\",\n          \"Glow\",\n          \"Jack\",\n          \"Jolt\",\n          \"Lotus\",\n          \"Sand\",\n          \"Shade\",\n          \"Spice\",\n          \"Stutter\",\n          \"Trip\",\n          \"Wonder\",\n        ]);\n\n        return prefix + \" \" + suffix;\n      },\n    },\n  ]);\n\n  return nameType.generate();\n}\n\nfunction randomSideEffect(): string {\n  let result: string[] = [];\n  let effects = sideEffects();\n\n  effects = RND.shuffle(effects);\n\n  let numberOfEffects = random.int(1, 3);\n\n  for (let i = 0; i < numberOfEffects; i++) {\n    let effect = effects.pop();\n    if (effect === undefined) {\n      throw new Error(\"No more effects available.\");\n    }\n    result.push(effect);\n  }\n\n  return Words.arrayToPhrase(result);\n}\n\nfunction randomStrength(): string {\n  return RND.item([\"powerful\", \"strong\", \"really potent\", \"potent\", \"weak\", \"very weak\"]);\n}\n\nfunction sideEffects(): string[] {\n  return [\n    \"a burning sensation over your entire body\",\n    \"horrific nightmares\",\n    \"dry mouth\",\n    \"trouble sleeping\",\n    \"increased aggression\",\n    \"brain damage\",\n    \"liver damage\",\n    \"difficulty breathing\",\n    \"bloodshot eyes\",\n    \"horrible breath\",\n    \"pallid skin\",\n    \"extreme fatigue\",\n    \"nervousness\",\n    \"paranoia\",\n    \"vomiting\",\n    \"uncontrollable flatulence\",\n    \"diarrhea\",\n    \"uncontrollable shaking\",\n    \"psychosis\",\n    \"schizophrenia\",\n    \"sensitivity to pain\",\n    \"sensitivity to light\",\n    \"weakness\",\n    \"temporary paralysis\",\n    \"reduced ability to think\",\n    \"reduced ability to feel pleasure when not high\",\n  ];\n}\n","<script lang=\"ts\">\n  import DrugGenerator from \"$lib/drug/generator\";\n  import * as RND from \"@ironarachne/rng\";\n  import random from \"random\";\n  import seedrandom from \"seedrandom\";\n\n  let description = \"\";\n  let seed = RND.randomString(13);\n  let generator = new DrugGenerator();\n\n  function generate() {\n    random.use(seedrandom(seed));\n    let drug = generator.generate();\n    description = drug.describe();\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  newSeed();\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/cyberpunk.scss';\n</style>\n\n<svelte:head>\n  <title>Cyberpunk Drug Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"cyberpunk main\">\n  <h1>Drug Generator</h1>\n\n  <p>I suppose you could also use this for any sci-fi setting, really.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\"/>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <p>{ description }</p>\n</section>\n"],"names":["all","DrugTypes.all","EffectTypes.all"],"mappings":"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"}