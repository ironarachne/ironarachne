{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../src/lib/creatures/creatures.ts","../../../../../../../src/lib/encounters/encounters.ts","../../../../../../../src/lib/geometry/geometry.ts","../../../../../../../src/lib/dungeon/lock.ts","../../../../../../../src/lib/dungeon/tiles.ts","../../../../../../../src/lib/dungeon/rooms/themes/theme.ts","../../../../../../../src/lib/dungeon/rooms/room.ts","../../../../../../../src/lib/dungeon/rooms/roomgenerator.ts","../../../../../../../src/lib/dungeon/rooms/roomgeneratorconfig.ts","../../../../../../../src/lib/dungeon/rooms/rooms.ts","../../../../../../../src/lib/dungeon/doors.ts","../../../../../../../src/lib/dungeon/rooms/features/featuregenerator.ts","../../../../../../../src/lib/dungeon/rooms/mutators/mutator.ts","../../../../../../../src/lib/dungeon/rooms/mutators/mutators.ts","../../../../../../../src/lib/dungeon/rooms/themes/dungeon.ts","../../../../../../../src/lib/dungeon/rooms/themes/themes.ts","../../../../../../../src/lib/equipment/mutators/meleeweapon.ts","../../../../../../../src/lib/equipment/mutators/weapons/bladedweapons.ts","../../../../../../../src/lib/equipment/mutators/mutators.ts","../../../../../../../src/lib/equipment/itemgenerator.ts","../../../../../../../src/lib/equipment/itemgeneratorconfig.ts","../../../../../../../src/lib/equipment/generators.ts","../../../../../../../src/lib/archetypes/fantasy/cleric.ts","../../../../../../../src/lib/archetypes/fantasy/cult.ts","../../../../../../../src/lib/archetypes/fantasy/mage.ts","../../../../../../../src/lib/archetypes/fantasy/martial.ts","../../../../../../../src/lib/archetypes/fantasy/undead.ts","../../../../../../../src/lib/archetypes/fantasy/all.ts","../../../../../../../src/lib/mobs/mobs.ts","../../../../../../../src/lib/mobs/filter.ts","../../../../../../../src/lib/encounters/templates/fantasy/bandits.ts","../../../../../../../src/lib/encounters/templates/fantasy/cult.ts","../../../../../../../src/lib/encounters/templates/fantasy/generic_dungeon.ts","../../../../../../../src/lib/encounters/templates/fantasy/magic.ts","../../../../../../../src/lib/encounters/templates/fantasy/martial.ts","../../../../../../../src/lib/encounters/templates/fantasy/undead.ts","../../../../../../../src/lib/encounters/templates/fantasy/wilderness.ts","../../../../../../../src/lib/encounters/templates/fantasy/all.ts","../../../../../../../src/lib/encounters/templates/templates.ts","../../../../../../../src/lib/dungeon/dungeon_theme.ts","../../../../../../../src/lib/dungeon/rooms/roomrequirement.ts","../../../../../../../src/lib/dungeon/themes/cult.ts","../../../../../../../src/lib/dungeon/themes/fortress.ts","../../../../../../../src/lib/dungeon/themes/mage_lair.ts","../../../../../../../src/lib/dungeon/themes/tomb.ts","../../../../../../../src/lib/dungeon/themes/themes.ts","../../../../../../../src/lib/dungeon/treasure/tableentry.ts","../../../../../../../src/lib/dungeon/treasure/table.ts","../../../../../../../src/lib/dungeon/treasure/generatorconfig.ts","../../../../../../../src/lib/dungeon/treasure/generator.ts","../../../../../../../src/lib/dungeon/treasure/key.ts","../../../../../../../src/lib/dungeon/treasure/artobject.ts","../../../../../../../src/lib/dungeon/treasure/artobjectgenerator.ts","../../../../../../../src/lib/dungeon/treasure/bagofcoins.ts","../../../../../../../src/lib/dungeon/treasure/coingenerator.ts","../../../../../../../src/lib/dungeon/treasure/gem.ts","../../../../../../../src/lib/dungeon/treasure/gemgenerator.ts","../../../../../../../src/lib/dungeon/treasure/magicitemgenerator.ts","../../../../../../../src/lib/dungeon/treasure/tables/common.ts","../../../../../../../src/lib/dungeon/treasure/tables/rare.ts","../../../../../../../src/lib/dungeon/treasure/tables/uncommon.ts","../../../../../../../src/lib/dungeon/treasurespawn.ts","../../../../../../../src/lib/dungeon/dungeons.ts","../../../../../../../src/routes/fantasy/dungeon/+page.svelte"],"sourcesContent":["import * as AgeCategories from \"$lib/age/age_categories.js\";\nimport type Gender from \"$lib/gender/gender.js\";\nimport * as SizeMatrix from \"$lib/size/size_matrix.js\";\nimport * as CommonSpecies from \"$lib/species/common.js\";\nimport * as RND from \"@ironarachne/rng\";\nimport random from \"random\";\nimport type Creature from \"./creature.js\";\nimport type CreatureGeneratorConfig from \"./creature_generator_config.js\";\n\nexport function generate(config: CreatureGeneratorConfig): Creature {\n  let creatureSpecies = RND.weighted(config.speciesOptions);\n  let creatureAgeCategory = AgeCategories.randomWeighted(config.ageCategoryNames, creatureSpecies.ageCategories);\n  let age = random.int(creatureAgeCategory.minAge, creatureAgeCategory.maxAge);\n  const genderName = RND.item(config.genderNames);\n  let gender = creatureSpecies.genders.find((g: Gender) => g.name === genderName);\n  const sizeGeneratorConfig = SizeMatrix.getSizeConfig(\n    gender.name,\n    creatureAgeCategory.name,\n    creatureSpecies.sizeGeneratorConfigMatrix,\n  );\n  const height = random.int(sizeGeneratorConfig.minHeight, sizeGeneratorConfig.maxHeight);\n  const weight = random.int(sizeGeneratorConfig.minWeight, sizeGeneratorConfig.maxWeight);\n  const length = random.int(sizeGeneratorConfig.minLength, sizeGeneratorConfig.maxLength);\n  let physicalTraits = CommonSpecies.randomTraits(creatureSpecies);\n  let behaviors = [\"cautious\", \"hunting\", \"lethargic\", \"resting\", \"sleeping\", \"stalking\"];\n  let summary = RND.item(behaviors);\n  let abilities = creatureSpecies.abilities;\n\n  let threatLevel = creatureSpecies.baseThreatLevel;\n  for (let i = 0; i < abilities.length; i++) {\n    threatLevel += abilities[i].threatLevel;\n  }\n\n  let creature: Creature = {\n    name: creatureSpecies.name,\n    description: creatureSpecies.description,\n    summary: summary,\n    statBlock: null,\n    species: creatureSpecies,\n    abilities: abilities,\n    behaviors: behaviors,\n    threatLevel: threatLevel,\n    physicalTraits,\n    gender,\n    height,\n    weight,\n    length,\n    age,\n    ageCategory: creatureAgeCategory,\n    carried: [],\n    tags: creatureSpecies.tags,\n    creatureTypes: creatureSpecies.creatureTypes,\n  };\n\n  return creature;\n}\n\nexport function getTotalThreatLevel(creature: Creature): number {\n  let totalThreatLevel = creature.species.baseThreatLevel;\n  for (let i = 0; i < creature.abilities.length; i++) {\n    totalThreatLevel += creature.abilities[i].threatLevel;\n  }\n\n  return totalThreatLevel;\n}\n\nexport function hasAllTagsIn(tags: string[], creatures: Creature[]): Creature[] {\n  let result = [];\n\n  for (let i = 0; i < creatures.length; i++) {\n    let valid = true;\n    for (let t = 0; t < tags.length; t++) {\n      if (!creatures[i].tags.includes(tags[t])) {\n        valid = false;\n        break;\n      }\n    }\n    if (valid === true) {\n      result.push(creatures[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function hasAnyTagIn(tags: string[], creatures: Creature[]): Creature[] {\n  let result = [];\n\n  for (let i = 0; i < creatures.length; i++) {\n    let valid = false;\n    for (let t = 0; t < tags.length; t++) {\n      if (creatures[i].tags.includes(tags[t])) {\n        valid = true;\n        break;\n      }\n    }\n    if (valid === true) {\n      result.push(creatures[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function hasNoTagIn(tags: string[], creatures: Creature[]): Creature[] {\n  let result = [];\n\n  for (let i = 0; i < creatures.length; i++) {\n    let valid = true;\n    for (let t = 0; t < tags.length; t++) {\n      if (creatures[i].tags.includes(tags[t])) {\n        valid = false;\n        break;\n      }\n    }\n    if (valid === true) {\n      result.push(creatures[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function newCreatureGeneratorConfig(): CreatureGeneratorConfig {\n  return {\n    ageCategoryNames: [\"adult\"],\n    genderNames: [\"female\", \"male\"],\n    speciesOptions: [],\n  };\n}\n","import type Archetype from \"$lib/archetypes/archetype.js\";\nimport * as Characters from \"$lib/characters/characters.js\";\nimport * as PremadeConfigs from \"$lib/characters/premade_configs.js\";\nimport * as Creatures from \"$lib/creatures/creatures.js\";\nimport type MobGroup from \"$lib/mobs/group.js\";\nimport type Mob from \"$lib/mobs/mob.js\";\nimport all from \"$lib/species/all.js\";\nimport * as CommonSpecies from \"$lib/species/common.js\";\nimport * as RND from \"@ironarachne/rng\";\nimport random from \"random\";\nimport type Encounter from \"./encounter.js\";\nimport type EncounterGeneratorConfig from \"./encounter_generator_config\";\n\nexport function generate(config: EncounterGeneratorConfig): Encounter {\n  let mobGroups: MobGroup[] = [];\n\n  if (config.template === null) {\n    throw new Error(\"EncounterGenerator requires a template.\");\n  }\n\n  for (let i = 0; i < config.template.groupTemplates.length; i++) {\n    let mobs: Mob[] = [];\n    let t = config.template.groupTemplates[i];\n    let amount = random.int(t.minNumber, t.maxNumber);\n\n    let options = [];\n    let unfilteredOptions = [];\n\n    if (t.isSentient) {\n      unfilteredOptions = JSON.parse(JSON.stringify(config.sentientOptions));\n    } else {\n      unfilteredOptions = JSON.parse(JSON.stringify(config.creatureOptions));\n    }\n\n    let tags = t.filter.withAllTags.concat(t.filter.withAnyTag);\n    if (tags.includes(\"undead\")) {\n      let skeletonOptions = unfilteredOptions.concat(\n        CommonSpecies.getSkeletonVariants(unfilteredOptions),\n      );\n      let vampireOptions = unfilteredOptions.concat(\n        CommonSpecies.getVampireVariants(unfilteredOptions),\n      );\n      let zombieOptions = unfilteredOptions.concat(\n        CommonSpecies.getZombieVariants(unfilteredOptions),\n      );\n      unfilteredOptions = unfilteredOptions.concat(skeletonOptions);\n      unfilteredOptions = unfilteredOptions.concat(vampireOptions);\n      unfilteredOptions = unfilteredOptions.concat(zombieOptions);\n    } else if (tags.includes(\"skeleton\")) {\n      let skeletonOptions = unfilteredOptions.concat(\n        CommonSpecies.getSkeletonVariants(unfilteredOptions),\n      );\n      unfilteredOptions = unfilteredOptions.concat(skeletonOptions);\n    } else if (tags.includes(\"vampire\")) {\n      let vampireOptions = unfilteredOptions.concat(\n        CommonSpecies.getVampireVariants(unfilteredOptions),\n      );\n      unfilteredOptions = unfilteredOptions.concat(vampireOptions);\n    } else if (tags.includes(\"zombie\")) {\n      let zombieOptions = unfilteredOptions.concat(\n        CommonSpecies.getZombieVariants(unfilteredOptions),\n      );\n      unfilteredOptions = unfilteredOptions.concat(zombieOptions);\n    }\n    options = t.filter.apply(unfilteredOptions);\n\n    if (options.length === 0) {\n      console.error(`No options for filter`, t.filter);\n      console.debug(`Used options`, unfilteredOptions);\n    }\n\n    if (t.isSentient) {\n      mobs = generateSentientMobs(options, t.archetypes, amount);\n    } else {\n      mobs = generateCreatureMobs(options, amount);\n    }\n\n    mobGroups.push({ name: t.name, mobs });\n  }\n\n  let threatLevel = 0;\n\n  for (let i = 0; i < mobGroups.length; i++) {\n    let group = mobGroups[i];\n\n    for (let j = 0; j < group.mobs.length; j++) {\n      threatLevel += group.mobs[j].threatLevel;\n    }\n  }\n\n  return { groups: mobGroups, totalThreatLevel: threatLevel };\n}\n\nfunction generateCreatureMobs(creatureOptions: Mob[], amount: number): Mob[] {\n  let creatureType = RND.item(creatureOptions);\n  let creatures: Mob[] = [];\n  let config = Creatures.newCreatureGeneratorConfig();\n\n  for (let i = 0; i < amount; i++) {\n    config.speciesOptions = [creatureType];\n    let creature = Creatures.generate(config);\n    creatures.push(creature);\n  }\n  return creatures;\n}\n\nfunction generateSentientMobs(\n  speciesOptions: Mob[],\n  archetypes: Archetype[],\n  amount: number,\n): Mob[] {\n  let species = RND.item(speciesOptions);\n  let characters = [];\n  let charGenConfig = PremadeConfigs.getFantasy();\n  charGenConfig.speciesOptions = [species];\n\n  for (let i = 0; i < amount; i++) {\n    let c = Characters.generate(charGenConfig);\n    c.archetype = RND.item(archetypes);\n    c.abilities = c.abilities.concat(c.archetype.abilities);\n    c.threatLevel = Characters.getTotalThreatLevel(c);\n    c.summary = `${c.gender.name} ${c.species.adjective} ${c.archetype.name}`;\n    for (let m = 0; m < c.archetype.itemGenerators.length; m++) {\n      c.carried.push(c.archetype.itemGenerators[m].generate());\n    }\n    characters.push(c);\n  }\n\n  return characters;\n}\n\nexport function getDefaultConfig(): EncounterGeneratorConfig {\n  return {\n    isHostile: true,\n    environment: \"forest\",\n    template: null,\n    sentientOptions: CommonSpecies.sentient(),\n    creatureOptions: CommonSpecies.withoutTag(\"sentient\", all),\n    minThreatLevel: 1,\n    maxThreatLevel: 4,\n  };\n}\n","import type Edge from \"./edge.js\";\nimport type Vertex from \"./vertex.js\";\n\nexport function distance(a: Vertex, b: Vertex): number {\n  let d = Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n\n  return d;\n}\n\nexport function edgeEquals(A: Edge, B: Edge): boolean {\n  if (A.a.x == B.a.x && A.a.y == B.a.y && A.b.x == B.b.x && A.b.y == B.b.y) {\n    return true;\n  } else if (A.a.x == B.b.x && A.a.y == B.b.y && A.b.x == B.a.x && A.b.y == B.a.y) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function edgesFromVertices(vertices: Vertex[]): Edge[] {\n  let edges = [];\n\n  for (let i = 0; i < vertices.length; i++) {\n    let a = vertices[i];\n    let b = vertices[0];\n    if (i < vertices.length - 1) {\n      b = vertices[i + 1];\n    }\n    let edge: Edge = { a, b };\n    edges.push(edge);\n  }\n\n  return edges;\n}\n\nexport function getMidpoint(edge: Edge): Vertex {\n  let x = (edge.a.x + edge.b.x) / 2;\n  let y = (edge.a.y + edge.b.y) / 2;\n\n  return { x, y };\n}\n\nexport function getSlope(edge: Edge): number {\n  return (edge.b.y - edge.a.y) / (edge.b.x - edge.a.x);\n}\n\nexport function vertexEquals(a: Vertex, b: Vertex): boolean {\n  if (a.x == b.x && a.y == b.y) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function vertexIn(needle: Vertex, haystack: Vertex[]): boolean {\n  for (let i = 0; i < haystack.length; i++) {\n    if (vertexEquals(needle, haystack[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","export default class Lock {\n  id: string;\n  name: string;\n  description: string;\n  objectId: number; // numeric id of the thing that this locks\n  strength: number;\n  isLocked: boolean;\n\n  constructor() {\n    this.id = \"\";\n    this.name = \"a lock\";\n    this.description = \"a lock\";\n    this.objectId = -1;\n    this.strength = 1;\n    this.isLocked = true;\n  }\n}\n","export const STONE = 0;\nexport const ROOM = 1;\nexport const V_DOOR = 2;\nexport const H_DOOR = 3;\nexport const V_S_DOOR = 4;\nexport const H_S_DOOR = 5;\n","import type RoomFeatureGenerator from \"../features/featuregenerator.js\";\nimport type Mutator from \"../mutators/mutator.js\";\n\nexport default class RoomTheme {\n  name: string;\n  allowedEnvironments: string[];\n  minWidth: number;\n  maxWidth: number;\n  minHeight: number;\n  maxHeight: number;\n  flooringOptions: string[];\n  dressingGenerators: RoomFeatureGenerator[];\n  featureGenerators: RoomFeatureGenerator[];\n  mutators: Mutator[];\n  shapes: string[];\n  tags: string[];\n  commonality: number;\n\n  constructor(\n    name: string,\n    allowedEnvironments: string[],\n    minWidth: number,\n    minHeight: number,\n    maxWidth: number,\n    maxHeight: number,\n    flooringOptions: string[],\n    dressingGenerators: RoomFeatureGenerator[],\n    featureGenerators: RoomFeatureGenerator[],\n    mutators: Mutator[],\n    shapes: string[],\n    tags: string[],\n    commonality: number,\n  ) {\n    this.name = name;\n    this.allowedEnvironments = allowedEnvironments;\n    this.minWidth = minWidth;\n    this.maxWidth = maxWidth;\n    this.minHeight = minHeight;\n    this.maxHeight = maxHeight;\n    this.flooringOptions = flooringOptions;\n    this.dressingGenerators = dressingGenerators;\n    this.featureGenerators = featureGenerators;\n    this.mutators = mutators;\n    this.shapes = shapes;\n    this.tags = tags;\n    this.commonality = commonality;\n  }\n}\n","import type Encounter from \"$lib/encounters/encounter.js\";\nimport type Edge from \"$lib/geometry/edge.js\";\nimport * as Geometry from \"$lib/geometry/geometry.js\";\nimport type Polygon from \"$lib/geometry/polygon.js\";\nimport type Vertex from \"$lib/geometry/vertex.js\";\nimport * as Tiles from \"../tiles.js\";\nimport type RoomFeature from \"./features/feature.js\";\nimport RoomTheme from \"./themes/theme.js\";\n\nexport default class Room {\n  id: number;\n  name: string;\n  description: string;\n  secrets: string;\n  shape: Polygon;\n  tileMesh: Polygon[];\n  tiles: number[][];\n  vertices: Vertex[];\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n  center: Vertex;\n  lightLevel: number;\n  features: RoomFeature[];\n  treasureCaches: string[];\n  encounters: Encounter[];\n  theme: RoomTheme;\n  doors: number[];\n\n  constructor() {\n    this.id = -1;\n    this.name = \"\";\n    this.tileMesh = [];\n    this.encounters = [];\n    this.features = [];\n    this.doors = [];\n    this.description = \"\";\n    this.minX = 0;\n    this.minY = 0;\n    this.maxX = 0;\n    this.maxY = 0;\n    this.center = { x: 0, y: 0 };\n    this.shape = { vertices: [], edges: [] };\n    this.theme = new RoomTheme(\"\", [], 0, 0, 0, 0, [], [], [], [], [], [], 0);\n    this.secrets = \"\";\n    this.tiles = [];\n    this.treasureCaches = [];\n    this.vertices = [];\n    this.lightLevel = 0;\n  }\n\n  calculateTileMesh() {\n    // deprecated\n    let tiles = [];\n\n    let minY = this.minY;\n    let maxY = this.maxY;\n    let minX = this.minX;\n    let maxX = this.maxX;\n\n    for (let y = minY; y < maxY; y++) {\n      for (let x = minX; x < maxX; x++) {\n        let n: Polygon = { vertices: [], edges: [] };\n        n.vertices = [\n          { x: x - 0.5, y: y - 0.5 },\n          { x: x + 0.5, y: y - 0.5 },\n          { x: x + 0.5, y: y + 0.5 },\n          { x: x - 0.5, y: y + 0.5 },\n        ];\n        n.edges = Geometry.edgesFromVertices(n.vertices);\n        tiles.push(n);\n      }\n    }\n\n    this.tileMesh = tiles;\n  }\n\n  calculateTiles(mapWidth: number, mapHeight: number) {\n    let newTiles: number[][] = [];\n    for (let y = 0; y < mapHeight; y++) {\n      let row: number[] = [];\n      newTiles[y] = row;\n      for (let x = 0; x < mapWidth; x++) {\n        newTiles[y][x] = Tiles.STONE;\n      }\n    }\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      if (this.vertices[i].y > newTiles.length - 1) {\n        console.debug(\n          `Vertices outside the bounds of the map: ${newTiles.length} newTiles.length, ${\n            this.vertices[i].y\n          } this.vertices[i].y`,\n          this.vertices,\n        );\n      }\n      newTiles[this.vertices[i].y][this.vertices[i].x] = Tiles.ROOM;\n    }\n\n    this.tiles = newTiles;\n  }\n\n  calculateVertices() {\n    let v = [];\n\n    for (let y = 0; y < this.tiles.length; y++) {\n      for (let x = 0; x < this.tiles[y].length; x++) {\n        if (this.tiles[y][x] != Tiles.STONE) {\n          v.push({ x, y });\n        }\n      }\n    }\n\n    this.vertices = v;\n  }\n\n  getTileEdges(): Edge[] {\n    // deprecated\n    let result = [];\n\n    for (let i = 0; i < this.tileMesh.length; i++) {\n      for (let j = 0; j < this.tileMesh[i].edges.length; j++) {\n        result.push(this.tileMesh[i].edges[j]);\n      }\n    }\n\n    return result;\n  }\n\n  getCenter(): Vertex {\n    let x = this.minX + (this.maxX - this.minX) / 2;\n    let y = this.minY + (this.maxY - this.minY) / 2;\n\n    return { x, y };\n  }\n\n  getMinX(): number {\n    let result = this.vertices[0].x;\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      if (this.vertices[i].x < result) {\n        result = this.vertices[i].x;\n      }\n    }\n\n    return result;\n  }\n\n  getMaxX(): number {\n    let result = this.vertices[0].x;\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      if (this.vertices[i].x > result) {\n        result = this.vertices[i].x;\n      }\n    }\n\n    return result;\n  }\n\n  getMinY(): number {\n    let result = this.vertices[0].y;\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      if (this.vertices[i].y < result) {\n        result = this.vertices[i].y;\n      }\n    }\n\n    return result;\n  }\n\n  getMaxY(): number {\n    let result = this.vertices[0].y;\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      if (this.vertices[i].y > result) {\n        result = this.vertices[i].y;\n      }\n    }\n\n    return result;\n  }\n\n  getHeight(): number {\n    return this.maxY - this.minY;\n  }\n\n  getWidth(): number {\n    return this.maxX - this.minX;\n  }\n\n  moveBy(mx: number, my: number, mapWidth: number, mapHeight: number) {\n    for (let i = 0; i < this.vertices.length; i++) {\n      this.vertices[i].x += mx;\n      this.vertices[i].y += my;\n    }\n\n    this.calculateTiles(mapWidth, mapHeight);\n    this.minX = this.getMinX();\n    this.maxX = this.getMaxX();\n    this.minY = this.getMinY();\n    this.maxY = this.getMaxY();\n    this.center = this.getCenter();\n  }\n\n  moveTo(nx: number, ny: number, mapWidth: number, mapHeight: number) {\n    const diffX = nx - this.minX;\n    const diffY = ny - this.minY;\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      this.vertices[i].x += diffX;\n      this.vertices[i].y += diffY;\n    }\n\n    this.calculateTiles(mapWidth, mapHeight);\n    this.minX = this.getMinX();\n    this.maxX = this.getMaxX();\n    this.minY = this.getMinY();\n    this.maxY = this.getMaxY();\n    this.center = this.getCenter();\n  }\n}\n","import * as Geometry from \"$lib/geometry/geometry.js\";\nimport type Vertex from \"$lib/geometry/vertex.js\";\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport Room from \"./room.js\";\nimport type RoomGeneratorConfig from \"./roomgeneratorconfig.js\";\n\nexport default class RoomGenerator {\n  config: RoomGeneratorConfig;\n\n  constructor(config: RoomGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Room {\n    let width = random.int(this.config.theme.minWidth, this.config.theme.maxWidth);\n    let height = random.int(this.config.theme.minHeight, this.config.theme.maxHeight);\n    let x = random.int(2, this.config.mapWidth - width - 3);\n    let y = random.int(2, this.config.mapHeight - height - 3);\n\n    let room = new Room();\n    room.name = this.config.theme.name; // TODO: maybe make this a name generator\n    room.theme = this.config.theme;\n\n    let shape = RND.item(this.config.theme.shapes);\n\n    if (shape == \"rectangular\") {\n      room = getRectangularRoom(x, y, width, height, room);\n      room.description = RND.item([\n        `This rectangular room is ${width * 5}' wide and ${height * 5}' long.`,\n        `This ${room.name} is ${width * 5}' wide and ${height * 5}' long.`,\n      ]);\n    } else if (shape == \"square\") {\n      room = getSquareRoom(x, y, width, room);\n      room.description = RND.item([\n        `This square room is ${width * 5}' wide and ${height * 5}' long.`,\n        `This room is a square ${width * 5}' wide and ${height * 5}' long.`,\n        `This ${room.name} is ${width * 5}' wide and ${height * 5}' long.`,\n      ]);\n    } else if (shape == \"cavern\") {\n      room = getCavernRoom(x, y, width, height, room);\n      room.description = RND.item([`This is a cavern.`]);\n    } else if (shape == \"corridor\") {\n      room = getCorridor(x, y, width, height, room);\n      room.description = RND.item([`This is a corridor.`]);\n    }\n\n    if (RND.simple(100) > 70) {\n      let flooring = RND.item(room.theme.flooringOptions);\n      room.description += RND.item([\n        ` The floor is ${flooring}.`,\n        ` ${Words.capitalize(flooring)} flooring is cracked in places.`,\n        ` The ${flooring} flooring is cracked in places.`,\n        ` The ${flooring} flooring is broken in places.`,\n      ]);\n    }\n\n    for (let i = 0; i < this.config.theme.featureGenerators.length; i++) {\n      let feature = this.config.theme.featureGenerators[i].generate();\n      room.features.push(feature);\n      if (feature.secret != \"\") {\n        room.secrets += feature.secret + \" \";\n      }\n    }\n\n    if (this.config.theme.dressingGenerators.length > 0 && RND.simple(100) > 70) {\n      let dGen = RND.item(this.config.theme.dressingGenerators);\n      room.features.push(dGen.generate());\n    }\n\n    room.minX = x;\n    room.maxX = room.getMaxX();\n    room.minY = y;\n    room.maxY = room.getMaxY();\n    room.center = room.getCenter();\n    room.calculateTiles(this.config.mapWidth, this.config.mapHeight);\n\n    return room;\n  }\n}\n\n// TODO: Use a different algorithm for generating caverns\nfunction getCavernRoom(ox: number, oy: number, width: number, height: number, room: Room): Room {\n  // in this instance, we're using x,y as the top left corner of a bounding box\n  let start: Vertex = { x: Math.floor((ox + width) / 2), y: Math.floor((oy + height) / 2) };\n  let steps = 20;\n\n  const maxX = ox + width;\n  const maxY = oy + height;\n\n  room.vertices.push(start);\n\n  let v: Vertex = { x: start.x, y: start.y };\n\n  for (let i = 0; i < steps; i++) {\n    let x = v.x;\n    let y = v.y;\n\n    if (RND.simple(100) > 50) {\n      let mx = random.int(-1, 1);\n      x += mx;\n\n      if (x > maxX) {\n        x = maxX;\n      } else if (x < ox) {\n        x = ox;\n      }\n    } else {\n      let my = random.int(-1, 1);\n      y += my;\n\n      if (y > maxY) {\n        y = maxY;\n      } else if (y < oy) {\n        y = oy;\n      }\n    }\n\n    let nv: Vertex = { x, y };\n    let alreadyThere = false;\n    for (let j = 0; j < room.vertices.length; j++) {\n      if (Geometry.vertexEquals(room.vertices[j], nv)) {\n        alreadyThere = true;\n        break;\n      }\n    }\n    if (!alreadyThere) {\n      room.vertices.push(nv);\n    }\n\n    v.x = x;\n    v.y = y;\n  }\n\n  return room;\n}\n\n// TODO: Get rid of most dead ends, or try connecting directly to two other rooms\nfunction getCorridor(x: number, y: number, width: number, height: number, room: Room): Room {\n  let length = random.int(Math.max(3, Math.floor((width + height - 2) / 2)), width + height - 2);\n\n  let nx = random.int(x, x + width - 1);\n  let ny = random.int(y, y + height - 1);\n\n  room.vertices.push({ x: nx, y: ny });\n\n  let direction = RND.item([\n    { x: -1, y: 0 },\n    { x: 1, y: 0 },\n    { x: 0, y: -1 },\n    { x: 0, y: 1 },\n  ]);\n\n  for (let i = 0; i < length; i++) {\n    let mx = nx + direction.x;\n    let my = ny + direction.y;\n\n    if (mx >= width + x || mx <= x) {\n      direction.x = 0;\n      direction.y = RND.item([-1, 1]);\n    } else if (my >= height + y || my <= y) {\n      direction.y = 0;\n      direction.x = RND.item([-1, 1]);\n    } else {\n      nx = mx;\n      ny = my;\n\n      let nv: Vertex = { x: nx, y: ny };\n\n      if (Geometry.vertexIn(nv, room.vertices)) {\n        continue;\n      }\n\n      room.vertices.push(nv);\n\n      if (RND.simple(100) > 90) {\n        if (direction.y != 0) {\n          direction.x = direction.y;\n          direction.y = 0;\n        } else {\n          direction.y = direction.x;\n          direction.x = 0;\n        }\n      }\n    }\n  }\n\n  return room;\n}\n\nfunction getRectangularRoom(x: number, y: number, width: number, height: number, room: Room): Room {\n  for (let i = y; i < y + height; i++) {\n    for (let j = x; j < x + width; j++) {\n      room.vertices.push({ x: j, y: i });\n    }\n  }\n\n  room.description = `This room is ${(width + 1) * 5}' wide and ${(height + 1) * 5}' long.`;\n\n  return room;\n}\n\nfunction getSquareRoom(x: number, y: number, size: number, room: Room): Room {\n  for (let i = y; i < y + size; i++) {\n    for (let j = x; j < x + size; j++) {\n      room.vertices.push({ x: j, y: i });\n    }\n  }\n\n  room.description = `This square room is ${(size + 1) * 5}' wide and ${(size + 1) * 5}' long.`;\n\n  return room;\n}\n","import type RoomTheme from \"./themes/theme.js\";\n\nexport default class RoomGeneratorConfig {\n  mapHeight: number;\n  mapWidth: number;\n  theme: RoomTheme;\n\n  constructor(mapWidth: number, mapHeight: number, theme: RoomTheme) {\n    this.mapHeight = mapHeight;\n    this.mapWidth = mapWidth;\n    this.theme = theme;\n  }\n}\n","import * as Geometry from \"$lib/geometry/geometry.js\";\nimport type Room from \"./room.js\";\nimport RoomGenerator from \"./roomgenerator.js\";\nimport RoomGeneratorConfig from \"./roomgeneratorconfig.js\";\nimport type RoomTheme from \"./themes/theme.js\";\n\nexport function distanceToNearestOtherRoomTile(room: Room, rooms: Room[]): number {\n  let distance = 10000000;\n\n  for (let i = 0; i < rooms.length; i++) {\n    for (let j = 0; j < rooms[i].vertices.length; j++) {\n      for (let k = 0; k < room.vertices.length; k++) {\n        let d = Geometry.distance(rooms[i].vertices[j], room.vertices[k]);\n        if (d <= distance) {\n          distance = d;\n        }\n      }\n    }\n  }\n\n  return distance;\n}\n\n// TODO: make this more performant\nexport function doesRoomCollide(room: Room, rooms: Room[]): boolean {\n  for (let i = 0; i < rooms.length; i++) {\n    for (let j = 0; j < rooms[i].vertices.length; j++) {\n      for (let k = 0; k < room.vertices.length; k++) {\n        if (Geometry.vertexEquals(room.vertices[k], rooms[i].vertices[j])) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function doesRoomTouch(room: Room, rooms: Room[]): boolean {\n  for (let i = 0; i < rooms.length; i++) {\n    for (let j = 0; j < rooms[i].vertices.length; j++) {\n      for (let k = 0; k < room.vertices.length; k++) {\n        if (Geometry.distance(room.vertices[k], rooms[i].vertices[j]) == 1) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function getNearestRoom(room: Room, rooms: Room[]): Room {\n  let distance = 10000000;\n  let n = rooms[0];\n\n  for (let i = 0; i < rooms.length; i++) {\n    for (let j = 0; j < rooms[i].vertices.length; j++) {\n      for (let k = 0; k < room.vertices.length; k++) {\n        let d = Geometry.distance(rooms[i].vertices[j], room.vertices[k]);\n        if (d <= distance) {\n          distance = d;\n          n = rooms[i];\n        }\n      }\n    }\n  }\n\n  return n;\n}\n\n// Get all rooms that have a tile exactly two spaces away from a tile in this room\nexport function getNeighboringRooms(room: Room, rooms: Room[]): Room[] {\n  let result = [];\n  let ids: number[] = [];\n\n  for (let i = 0; i < rooms.length; i++) {\n    // for each other room...\n    for (let j = 0; j < room.vertices.length; j++) {\n      // go through this room's tiles...\n      for (let k = 0; k < rooms[i].vertices.length; k++) {\n        // and check the distance from it to each tile in the other room\n        let d = Geometry.distance(rooms[i].vertices[k], room.vertices[j]);\n        // if it's 2 tiles away, add the room to the result if it's not the compared room and it's not already in the results\n        if (d <= 2 && !ids.includes(rooms[i].id) && rooms[i].id != room.id) {\n          ids.push(rooms[i].id);\n          result.push(rooms[i]);\n          break;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function getPlaceableRoom(\n  mapWidth: number,\n  mapHeight: number,\n  theme: RoomTheme,\n  rooms: Room[],\n): Room | null {\n  let generation = true;\n  let maxX = mapWidth - 3;\n  let maxY = mapHeight - 3;\n  let roomGenConfig = new RoomGeneratorConfig(mapWidth, mapHeight, theme);\n  let roomGen = new RoomGenerator(roomGenConfig);\n  let room = roomGen.generate();\n  let roomAttempts = 0;\n  let roomAttemptLimit = 5;\n  let nx = room.minX + 1;\n  let ny = room.minY;\n\n  while (generation) {\n    if (\n      !doesRoomCollide(room, rooms)\n      && !doesRoomTouch(room, rooms)\n      && isRoomInRange(2, room, rooms)\n    ) {\n      generation = false;\n    } else if (roomAttempts <= roomAttemptLimit) {\n      nx += 1;\n\n      if (nx > maxX - room.getWidth()) {\n        nx = 2;\n        ny++;\n        if (ny > maxY - room.getHeight()) {\n          roomAttempts++;\n          nx = 2;\n          ny = 2;\n          continue;\n        }\n      }\n\n      room.moveTo(nx, ny, mapWidth, mapHeight);\n    } else if (roomAttempts > roomAttemptLimit) {\n      return null;\n    } else {\n      roomAttempts++;\n      room = roomGen.generate();\n      nx = room.minX + 1;\n      ny = room.minY;\n    }\n  }\n\n  return room;\n}\n\nexport function isRoomInRange(range: number, room: Room, rooms: Room[]): boolean {\n  if (distanceToNearestOtherRoomTile(room, rooms) == range) {\n    return true;\n  }\n\n  return false;\n}\n","import type Edge from \"$lib/geometry/edge.js\";\nimport * as Geometry from \"$lib/geometry/geometry.js\";\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport type Door from \"./door.js\";\nimport type Dungeon from \"./dungeon.js\";\nimport Lock from \"./lock.js\";\nimport type RoomFeature from \"./rooms/features/feature.js\";\nimport type Room from \"./rooms/room.js\";\nimport * as Rooms from \"./rooms/rooms.js\";\nimport * as Tiles from \"./tiles.js\";\n\nexport function addDoor(room1: Room, room2: Room): Door {\n  let door: Door = {\n    room1: -1,\n    room2: -1,\n    vertex: { x: 0, y: 0 },\n    tile: 0,\n    lock: null,\n    isSecret: false,\n    description: \"\",\n  };\n  let possibleEdges = [];\n\n  for (let i = 0; i < room1.vertices.length; i++) {\n    for (let j = 0; j < room2.vertices.length; j++) {\n      let nD = Geometry.distance(room1.vertices[i], room2.vertices[j]);\n      if (nD == 2) {\n        let a = room1.vertices[i];\n        let b = room2.vertices[j];\n        possibleEdges.push({ a, b });\n      }\n    }\n  }\n\n  let e: Edge = RND.item(possibleEdges);\n  door.vertex = Geometry.getMidpoint(e);\n\n  if (Geometry.getSlope(e) === 0) {\n    door.tile = Tiles.H_DOOR;\n  } else {\n    door.tile = Tiles.V_DOOR;\n  }\n\n  if (RND.simple(100) > 90) {\n    door.lock = new Lock();\n    door.lock.id = RND.randomString(24);\n  } else if (RND.simple(100) > 90) {\n    door.isSecret = true;\n    if (door.tile == Tiles.H_DOOR) {\n      door.tile = Tiles.H_S_DOOR;\n    } else {\n      door.tile = Tiles.V_S_DOOR;\n    }\n  }\n\n  door.room1 = room1.id;\n  door.room2 = room2.id;\n\n  let doorQuality = RND.item([\n    RND.item([\"rough\", \"decaying\", \"rotted\"]),\n    \"simple\",\n    \"plain\",\n    RND.item([\n      \"iron-trimmed\",\n      \"copper-trimmed\",\n      \"silver-trimmed\",\n      \"gold-trimmed\",\n      \"painted\",\n      \"carved\",\n      \"ornate\",\n    ]),\n  ]);\n\n  door.description = Words.article(doorQuality) + \" \" + doorQuality + \" door\";\n\n  return door;\n}\n\nexport function addDoorsToDungeon(dungeon: Dungeon): Dungeon {\n  for (let i = 0; i < dungeon.rooms.length; i++) {\n    let neighbors = Rooms.getNeighboringRooms(dungeon.rooms[i], dungeon.rooms);\n    let viable = [];\n\n    for (let j = 0; j < neighbors.length; j++) {\n      let existingDoor = false;\n      for (let k = 0; k < dungeon.rooms[i].doors.length; k++) {\n        let door = dungeon.doors[dungeon.rooms[i].doors[k]];\n        if (\n          (door.room1 == dungeon.rooms[i].id && door.room2 == neighbors[j].id)\n          || (door.room2 == dungeon.rooms[i].id && door.room1 == neighbors[j].id)\n        ) {\n          existingDoor = true;\n        }\n      }\n      if (!existingDoor) {\n        viable.push(neighbors[j]);\n      }\n    }\n\n    if (viable.length == 0) {\n      continue;\n    }\n\n    let r2 = RND.item(viable);\n    let door = addDoor(dungeon.rooms[i], r2);\n\n    if (r2.id == 0) {\n      door.isSecret = false;\n      if (dungeon.rooms[0].doors.length < 2) {\n        door.lock = null;\n      }\n    }\n\n    dungeon.doors.push(door);\n    let di = dungeon.doors.length - 1;\n    dungeon.rooms[i].doors.push(di);\n\n    let description1 = getDoorDescription(door, dungeon.rooms[i]);\n    let description2 = getDoorDescription(door, dungeon.rooms[r2.id]);\n\n    let secret1 = \"\";\n    let secret2 = \"\";\n\n    if (door.isSecret) {\n      let hiddenText = RND.item([\n        `${RND.item([\"It is\", \"It's\"])} hidden behind a tapestry.`,\n        `${\n          RND.item([\n            \"It is\",\n            \"It's\",\n          ])\n        } practically undetectable except for a thin seam visible only on close inspection.`,\n        `A tapestry obscures it.`,\n        `It cannot be opened from this side.`,\n        `A pile of ${RND.item([\"refuse\", \"debris\", \"trash\"])} obscures it.`,\n      ]);\n      if (RND.simple(100) > 50) {\n        secret2 = `${description2} ${hiddenText}`;\n        description2 = \"\";\n      } else {\n        secret1 = `${description1} ${hiddenText}`;\n        description1 = \"\";\n      }\n      dungeon.rooms[i].secrets += secret1;\n      dungeon.rooms[r2.id].secrets += secret2;\n    }\n\n    let door1feature: RoomFeature = { name: \"door\", description: description1, secret: secret1, isContainer: false };\n    let door2feature: RoomFeature = { name: \"door\", description: description2, secret: secret2, isContainer: false };\n\n    dungeon.rooms[i].features.push(door1feature);\n    dungeon.rooms[r2.id].doors.push(di);\n    dungeon.rooms[r2.id].features.push(door2feature);\n\n    dungeon.tiles = addDoorToTiles(door, dungeon.tiles);\n  }\n\n  return dungeon;\n}\n\nexport function addDoorToTiles(door: Door, tiles: number[][]): number[][] {\n  tiles[door.vertex.y][door.vertex.x] = door.tile;\n\n  return tiles;\n}\n\nexport function getDoorDescription(door: Door, room: Room): string {\n  let dir = \"\";\n\n  if (door.tile == Tiles.V_DOOR) {\n    if (door.vertex.y > room.center.y) {\n      if (door.vertex.x < room.center.x) {\n        dir = \"southwest\";\n      } else if (door.vertex.x > room.center.x) {\n        dir = \"southeast\";\n      } else {\n        dir = \"south\";\n      }\n    } else {\n      if (door.vertex.x < room.center.x) {\n        dir = \"northwest\";\n      } else if (door.vertex.x > room.center.x) {\n        dir = \"northeast\";\n      } else {\n        dir = \"north\";\n      }\n    }\n  } else {\n    if (door.vertex.x < room.center.x) {\n      if (door.vertex.y > room.center.y) {\n        dir = \"southwest\";\n      } else if (door.vertex.y < room.center.y) {\n        dir = \"northwest\";\n      } else {\n        dir = \"west\";\n      }\n    } else {\n      if (door.vertex.y > room.center.y) {\n        dir = \"southeast\";\n      } else if (door.vertex.y < room.center.y) {\n        dir = \"northeast\";\n      } else {\n        dir = \"east\";\n      }\n    }\n  }\n\n  let description = RND.item([\n    `There's ${door.description} in the ${dir}`,\n    `There is ${door.description} in the ${dir}`,\n    Words.capitalize(door.description) + ` lies in the ${dir}`,\n    Words.capitalize(door.description) + ` is in the ${dir}`,\n  ]);\n\n  if (door.lock != null) {\n    description += \". It is locked.\";\n  } else {\n    description += \".\";\n  }\n\n  return description;\n}\n","import * as RND from \"@ironarachne/rng\";\nimport type RoomFeature from \"./feature.js\";\n\nexport default class RoomFeatureGenerator {\n  name: string;\n  descriptionOptions: string[];\n  secretOptions: string[];\n  isContainer: boolean;\n\n  constructor(\n    name: string,\n    descriptionOptions: string[],\n    secretOptions: string[],\n    isContainer: boolean,\n  ) {\n    this.name = name;\n    this.descriptionOptions = descriptionOptions;\n    this.secretOptions = secretOptions;\n    this.isContainer = isContainer;\n  }\n\n  generate(): RoomFeature {\n    let secret = \"\";\n\n    if (RND.simple(100) > 70 && this.secretOptions.length > 0) {\n      secret = RND.item(this.secretOptions);\n    }\n\n    return {\n      name: this.name,\n      description: RND.item(this.descriptionOptions),\n      secret: secret,\n      isContainer: this.isContainer,\n    };\n  }\n}\n","import type Room from \"../room.js\";\n\nexport default class RoomMutator {\n  name: string;\n  mutate: (room: Room) => Room;\n  tags: string[];\n\n  constructor(name: string, mutate: (room: Room) => Room, tags: string[]) {\n    this.name = name;\n    this.mutate = mutate;\n    this.tags = tags;\n  }\n}\n","import RoomFeatureGenerator from \"../features/featuregenerator.js\";\nimport type Room from \"../room.js\";\nimport RoomMutator from \"./mutator.js\";\n\nexport function all(): RoomMutator[] {\n  return [\n    new RoomMutator(\n      \"brazier\",\n      (room: Room) => {\n        let featureGenerator = new RoomFeatureGenerator(\n          \"brazier\",\n          [\n            \"There is a large lit brazier in the middle of the room.\",\n            \"There are lit braziers around the room here.\",\n          ],\n          [],\n          false,\n        );\n        room.features.push(featureGenerator.generate());\n        room.lightLevel += 2;\n\n        return room;\n      },\n      [\"light\"],\n    ),\n    new RoomMutator(\n      \"torches\",\n      (room: Room) => {\n        let featureGenerator = new RoomFeatureGenerator(\n          \"torches\",\n          [\"Torches line the walls.\", \"A few torches sit in sconces on the walls.\"],\n          [],\n          false,\n        );\n        room.features.push(featureGenerator.generate());\n        room.lightLevel += 1;\n\n        return room;\n      },\n      [\"light\"],\n    ),\n  ];\n}\n\nexport function withName(name: string, mutators: RoomMutator[]): RoomMutator {\n  for (let i = 0; i < mutators.length; i++) {\n    if (mutators[i].name == name) {\n      return mutators[i];\n    }\n  }\n\n  throw new Error(`Failed to find mutator with name ${name}.`);\n}\n\nexport function withTag(tag: string, mutators: RoomMutator[]): RoomMutator[] {\n  let result = [];\n\n  for (let i = 0; i < mutators.length; i++) {\n    if (mutators[i].tags.includes(tag)) {\n      result.push(mutators[i]);\n    }\n  }\n\n  return result;\n}\n","import RoomFeatureGenerator from \"../features/featuregenerator.js\";\nimport RoomTheme from \"./theme.js\";\n\nexport function all(): RoomTheme[] {\n  let genericFeatures = [\n    new RoomFeatureGenerator(\n      \"debris\",\n      [\n        \"There is a pile of random debris here.\",\n        \"Much of the floor is covered in debris.\",\n        \"Debris of unknown origin is scattered about.\",\n      ],\n      [],\n      false,\n    ),\n    new RoomFeatureGenerator(\n      \"rags\",\n      [\n        \"There is a pile of rags here.\",\n        \"One of the corners has a large pile of filthy rags.\",\n        \"Small piles of rags are scattered across the floor.\",\n      ],\n      [],\n      false,\n    ),\n    new RoomFeatureGenerator(\n      \"cobwebs\",\n      [\n        \"There are a lot of cobwebs here.\",\n        \"The ceiling is partly covered in cobwebs.\",\n        \"Dense cobwebs hang down from the ceiling.\",\n      ],\n      [],\n      false,\n    ),\n  ];\n\n  return [\n    new RoomTheme(\n      \"altar room\",\n      [],\n      3,\n      3,\n      10,\n      10,\n      [\"marble\", \"stone tile\"],\n      genericFeatures,\n      [\n        new RoomFeatureGenerator(\n          \"altar\",\n          [\n            \"There is an evil-looking altar here.\",\n            \"There is a blood-covered altar here.\",\n            \"On top of a stone dais is a long altar.\",\n          ],\n          [],\n          false,\n        ),\n      ],\n      [],\n      [\"rectangular\"],\n      [\"cult\"],\n      5,\n    ),\n    new RoomTheme(\n      \"armory\",\n      [],\n      3,\n      3,\n      6,\n      6,\n      [\"stone tile\"],\n      genericFeatures,\n      [\n        new RoomFeatureGenerator(\n          \"weapon racks\",\n          [\n            \"Weapon racks full of old spears, swords, and axes line the walls.\",\n            \"Each wall has at least one wooden rack full of weapons.\",\n            \"There are rows of weapon racks here.\",\n          ],\n          [],\n          false,\n        ),\n        new RoomFeatureGenerator(\n          \"armor displays\",\n          [\n            \"Pieces of armor in various states of disrepair hang from pegs on the walls.\",\n            \"There are numerous pegs on the walls for armor to be hung.\",\n            \"Several pieces of armor are on armor stands here.\",\n          ],\n          [],\n          false,\n        ),\n      ],\n      [],\n      [\"rectangular\", \"square\"],\n      [\"military\"],\n      5,\n    ),\n    new RoomTheme(\n      \"barracks\",\n      [],\n      8,\n      8,\n      15,\n      15,\n      [\"stone tile\"],\n      genericFeatures,\n      [\n        new RoomFeatureGenerator(\n          \"beds\",\n          [\n            \"There are many beds here.\",\n            \"There are many bunk beds here.\",\n            \"There are many cots here.\",\n            \"Beds line the walls.\",\n            \"Cots line the walls.\",\n          ],\n          [],\n          false,\n        ),\n        new RoomFeatureGenerator(\n          \"chests\",\n          [\"There are chests at the end of each bed.\", \"Each bed has a chest at the foot.\"],\n          [],\n          true,\n        ),\n      ],\n      [],\n      [\"rectangular\"],\n      [\"military\"],\n      5,\n    ),\n    new RoomTheme(\n      \"burial chamber\",\n      [],\n      5,\n      5,\n      10,\n      10,\n      [\"stone tile\"],\n      genericFeatures,\n      [\n        new RoomFeatureGenerator(\n          \"coffins\",\n          [\n            \"There is a large stone sarcophagus here.\",\n            \"There is an ornate sarcophagus here.\",\n            \"There are several sarcophagi here.\",\n            \"There is a large, ornate coffin here.\",\n            \"There are many coffins here.\",\n            \"Coffins line the walls.\",\n            \"Along the walls are several long alcoves. Each one has a stone coffin.\",\n          ],\n          [],\n          true,\n        ),\n      ],\n      [],\n      [\"rectangular\"],\n      [\"tomb\"],\n      5,\n    ),\n    new RoomTheme(\n      \"chamber\",\n      [],\n      2,\n      2,\n      6,\n      6,\n      [\"marble\", \"stone tile\"],\n      genericFeatures,\n      [],\n      [],\n      [\"rectangular\", \"square\"],\n      [\"dungeon\"],\n      40,\n    ),\n    new RoomTheme(\n      \"fountain chamber\",\n      [],\n      2,\n      2,\n      5,\n      5,\n      [\"stone tile\"],\n      genericFeatures,\n      [\n        new RoomFeatureGenerator(\n          \"fountain\",\n          [\n            \"There is a large fountain here.\",\n            \"There is an ornate fountain here.\",\n            \"There is a disused fountain here with brackish water.\",\n            \"There is an elegant fountain here.\",\n            \"Two fountains lie on either side of the room.\",\n            \"Small fountains sit in each corner of the room.\",\n            \"An old and disused fountain sits in the corner.\",\n          ],\n          [],\n          true,\n        ),\n      ],\n      [],\n      [\"rectangular\", \"square\"],\n      [\"dungeon\", \"nobility\"],\n      5,\n    ),\n    new RoomTheme(\n      \"kitchen\",\n      [],\n      2,\n      2,\n      5,\n      5,\n      [\"stone tile\"],\n      genericFeatures,\n      [\n        new RoomFeatureGenerator(\n          \"oven\",\n          [\n            \"There is a large wood-fired oven here.\",\n            \"There are several large ovens here.\",\n            \"Ovens line one of the walls.\",\n            \"A long-dormant oven sits against the back wall.\",\n          ],\n          [],\n          false,\n        ),\n        new RoomFeatureGenerator(\n          \"pantry cabinet\",\n          [\"There is a pantry cabinet here.\", \"A pantry cabinet sits against one wall.\"],\n          [],\n          true,\n        ),\n        new RoomFeatureGenerator(\n          \"table\",\n          [\n            \"There is a table here.\",\n            \"A table sits against one wall.\",\n            \"An assortment of kitchen utensils and tools sit on a large table here.\",\n          ],\n          [],\n          false,\n        ),\n      ],\n      [],\n      [\"rectangular\"],\n      [\"food\", \"military\"],\n      5,\n    ),\n    new RoomTheme(\n      \"laboratory\",\n      [],\n      4,\n      4,\n      6,\n      6,\n      [\"stone tile\"],\n      genericFeatures,\n      [\n        new RoomFeatureGenerator(\n          \"lab table\",\n          [\n            \"There is a large table here with a wide array of alchemical devices on it.\",\n            \"There are several tables here with various devices on them.\",\n            \"Tables with alchemical devices, books, and other items are arranged around the room.\",\n          ],\n          [],\n          false,\n        ),\n        new RoomFeatureGenerator(\n          \"specimen cabinet\",\n          [\n            \"There is a large cabinet here.\",\n            \"There is a simple cabinet here, and the door is ajar.\",\n            \"There is a cabinet here.\",\n          ],\n          [],\n          true,\n        ),\n      ],\n      [],\n      [\"rectangular\"],\n      [\"alchemy\", \"mage\"],\n      5,\n    ),\n    new RoomTheme(\n      \"library\",\n      [],\n      5,\n      5,\n      15,\n      15,\n      [\"stone tile\"],\n      genericFeatures,\n      [\n        new RoomFeatureGenerator(\n          \"bookcases\",\n          [\n            \"There are many bookcases here.\",\n            \"There are a number of well-preserved bookcases here.\",\n            \"The walls are lined with bookcases.\",\n          ],\n          [],\n          true,\n        ),\n        new RoomFeatureGenerator(\n          \"table\",\n          [\n            \"There are several tables here.\",\n            \"There is a table here with a large book open lying on it.\",\n          ],\n          [],\n          false,\n        ),\n      ],\n      [],\n      [\"rectangular\", \"square\"],\n      [\"mage\", \"nobility\"],\n      5,\n    ),\n    new RoomTheme(\n      \"storeroom\",\n      [],\n      2,\n      2,\n      6,\n      6,\n      [\"stone tile\"],\n      genericFeatures,\n      [\n        new RoomFeatureGenerator(\n          \"stacked boxes\",\n          [\n            \"Many boxes are stacked here.\",\n            \"Boxes are stacked in corners here.\",\n            \"Crates and large boxes line the walls.\",\n            \"A few broken crates and boxes are strewn about.\",\n          ],\n          [],\n          true,\n        ),\n      ],\n      [],\n      [\"rectangular\", \"square\"],\n      [\"dungeon\"],\n      20,\n    ),\n  ];\n}\n","import RoomFeatureGenerator from \"../features/featuregenerator.js\";\nimport * as Dungeon from \"./dungeon.js\";\nimport RoomTheme from \"./theme.js\";\n\nexport function all(): RoomTheme[] {\n  let result: RoomTheme[] = [];\n\n  result = result.concat(Dungeon.all());\n\n  return result;\n}\n\nexport function byName(name: string, themes: RoomTheme[]): RoomTheme {\n  for (let i = 0; i < themes.length; i++) {\n    if (themes[i].name == name) {\n      return themes[i];\n    }\n  }\n\n  throw new Error(`Failed to find room theme with name ${name}.`);\n}\n\nexport function byTag(tag: string, themes: RoomTheme[]): RoomTheme[] {\n  let result = [];\n\n  for (let i = 0; i < themes.length; i++) {\n    if (themes[i].tags.includes(tag)) {\n      result.push(themes[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function getEntrance(): RoomTheme {\n  return new RoomTheme(\n    \"entrance\",\n    [],\n    2,\n    2,\n    4,\n    4,\n    [\"stone tile\"],\n    [],\n    [\n      new RoomFeatureGenerator(\n        \"entrance\",\n        [\n          \"The entrance to the dungeon is here.\",\n          \"The stairs out of the dungeon are here.\",\n          \"There is a set of stairs here leading out of the dungeon.\",\n          \"The stairs leading out of the dungeon are here.\",\n        ],\n        [],\n        false,\n      ),\n    ],\n    [],\n    [\"rectangular\", \"square\"],\n    [\"dungeon\", \"entrance\"],\n    10,\n  );\n}\n","import type Item from \"../item.js\";\nimport type ItemMutator from \"./itemmutator.js\";\n\nexport default class MeleeWeaponMutator implements ItemMutator {\n  name: string;\n  mutate: (item: Item) => Item;\n  requiredTag: string;\n  tags: string[];\n\n  constructor(\n    name: string,\n    mutate: (item: Item) => Item,\n    requiredTag: string,\n    tags: string[],\n  ) {\n    this.name = name;\n    this.mutate = mutate;\n    this.requiredTag = requiredTag;\n    this.tags = tags;\n  }\n}\n","import MeleeWeapon from \"../../weapons/melee.js\";\nimport type ItemMutator from \"../itemmutator.js\";\nimport MeleeWeaponMutator from \"../meleeweapon.js\";\n\nexport function all(): ItemMutator[] {\n  let sets = [\n    {\n      element: \"fire\",\n      damage: \"+1d6 fire\",\n      description:\n        \"The blade is wreathed in flame when wielded. Anything flammable struck with it immediately ignites.\",\n    },\n    {\n      element: \"ice\",\n      damage: \"+1d6 cold\",\n      description:\n        \"The blade is surrounded by a layer of ice when wielded. Enemies struck with it are chilled to the bone and have difficulty moving.\",\n    },\n    {\n      element: \"lightning\",\n      damage: \"+1d6 electricity\",\n      description: \"The blade is surrounded by crackling lightning when wielded.\",\n    },\n    {\n      element: \"poison\",\n      damage: \"+1d6 poison\",\n      description:\n        \"The blade is coated in a sickly green liquid when wielded. The liquid is highly poisonous, causing illness and eventually death if not cured.\",\n    },\n    {\n      element: \"acid\",\n      damage: \"+1d6 acid\",\n      description: \"The blade is coated in a thin yellow acid when wielded.\",\n    },\n    {\n      element: \"darkness\",\n      damage: \"+1d6 darkness\",\n      description:\n        \"The blade is hidden in shadow when wielded. It is difficult for enemies to predict where attacks with this weapon will come from.\",\n    },\n    {\n      element: \"light\",\n      damage: \"+1d6 light\",\n      description:\n        \"The blade glows faintly when wielded. On command, that light glows brightly enough to illuminate a large room.\",\n    },\n    {\n      element: \"earth\",\n      damage: \"+1d6 earth\",\n      description: \"The blade appears to be made of stone. Anything struck with it is turned to stone.\",\n    },\n  ];\n\n  let result = [];\n\n  for (let set of sets) {\n    result.push(\n      new MeleeWeaponMutator(\n        `${set.element}-enchanted melee weapon`,\n        (item) => {\n          item.name = `${set.element}-enchanted ${item.name}`;\n          if (item instanceof MeleeWeapon) {\n            item.damage += ` ${set.damage}`;\n          }\n          item.description += ` ${set.description}`;\n          item.value += 10000;\n          return item;\n        },\n        \"bladed weapon\",\n        [\"weapon\", \"melee weapon\", \"bladed weapon\", \"enchantment\", set.element],\n      ),\n    );\n  }\n\n  return result;\n}\n","import type ItemMutator from \"./itemmutator.js\";\nimport * as BladedWeapons from \"./weapons/bladedweapons.js\";\n\nexport function all(): ItemMutator[] {\n  let results: ItemMutator[] = [];\n\n  results = results.concat(BladedWeapons.all());\n\n  return results;\n}\n\nexport function withAnyTag(tags: string[], mutators: ItemMutator[]): ItemMutator[] {\n  let result: ItemMutator[] = [];\n  let names: string[] = [];\n\n  for (let i = 0; i < mutators.length; i++) {\n    for (let j = 0; j < tags.length; j++) {\n      if (mutators[i].tags.includes(tags[j]) && !names.includes(mutators[i].name)) {\n        result.push(mutators[i]);\n        names.push(mutators[i].name);\n        continue;\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function withTag(tag: string, mutators: ItemMutator[]): ItemMutator[] {\n  let result: ItemMutator[] = [];\n\n  for (let mutator of mutators) {\n    if (mutator.tags.includes(tag)) {\n      result.push(mutator);\n    }\n  }\n\n  return result;\n}\n","import * as RND from \"@ironarachne/rng\";\nimport random from \"random\";\nimport * as Components from \"./components/components.js\";\nimport type Item from \"./item.js\";\nimport type ItemGeneratorConfig from \"./itemgeneratorconfig.js\";\nimport * as Mutators from \"./mutators/mutators.js\";\n\nexport default class ItemGenerator {\n  config: ItemGeneratorConfig;\n\n  constructor(config: ItemGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Item {\n    let quality = random.int(this.config.minQuality, this.config.maxQuality);\n    let components = Components.withMaxQuality(this.config.maxQuality, this.config.components);\n    components = Components.withMinQuality(this.config.minQuality, components);\n    let item = this.config.pattern.complete(this.config.components, quality);\n\n    if (this.config.useMutator) {\n      let mutators = Mutators.withAnyTag(item.tags, this.config.mutators);\n      if (mutators.length > 0) {\n        let mutator = RND.item(mutators);\n        item = mutator.mutate(item);\n      }\n    }\n\n    return item;\n  }\n}\n","import Component from \"./components/component.js\";\nimport * as Components from \"./components/components.js\";\nimport type ItemMutator from \"./mutators/itemmutator.js\";\nimport * as Mutators from \"./mutators/mutators.js\";\nimport type Pattern from \"./patterns/pattern.js\";\n\nexport default class ItemGeneratorConfig {\n  pattern: Pattern;\n  components: Component[];\n  minValue: number;\n  maxValue: number;\n  minQuality: number;\n  maxQuality: number;\n  mutators: ItemMutator[];\n  useMutator: boolean;\n\n  constructor() {\n    this.components = Components.all();\n    this.minValue = 0;\n    this.maxValue = 0;\n    this.minQuality = 0;\n    this.maxQuality = 1;\n    this.mutators = Mutators.all();\n    this.useMutator = false;\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport ItemGenerator from \"./itemgenerator.js\";\nimport ItemGeneratorConfig from \"./itemgeneratorconfig.js\";\nimport * as Patterns from \"./patterns/patterns.js\";\n\nexport function getItemGenerator(itemName: string, quality: number): ItemGenerator {\n  let itemGenConfig = new ItemGeneratorConfig();\n  itemGenConfig.pattern = Patterns.byName(itemName);\n\n  let minValue = 0;\n  let minQuality = quality;\n  let maxValue = 10;\n  let maxQuality = quality;\n\n  if (quality == 1) {\n    maxValue = 20;\n  } else if (quality == 2) {\n    minValue = 10;\n    maxValue = 30;\n  } else if (quality == 3) {\n    minValue = 30;\n    maxValue = 50;\n  } else if (quality == 3) {\n    minValue = 50;\n    maxValue = 100;\n  } else if (quality == 4) {\n    minValue = 100;\n    maxValue = 10000;\n  }\n\n  itemGenConfig.minValue = minValue;\n  itemGenConfig.maxValue = maxValue;\n  itemGenConfig.minQuality = minQuality;\n  itemGenConfig.maxQuality = maxQuality;\n\n  let itemGen = new ItemGenerator(itemGenConfig);\n\n  return itemGen;\n}\n\nexport function getItemGeneratorByTag(tag: string, quality: number): ItemGenerator {\n  let patternOptions = Patterns.forCategory(tag);\n\n  return getItemGenerator(RND.item(patternOptions).name, quality);\n}\n","import * as ItemGenerators from \"$lib/equipment/generators.js\";\nimport type Archetype from \"../archetype.js\";\n\nexport function all(): Archetype[] {\n  return [\n    {\n      name: \"cleric\",\n      abilities: [\n        {\n          name: \"turn undead\",\n          description: \"turns undead creatures\",\n          category: \"divine\",\n          threatLevel: 1,\n        },\n        {\n          name: \"divine spellcasting\",\n          description: \"casts divine spells\",\n          category: \"divine\",\n          threatLevel: 1,\n        },\n      ],\n      tags: [\"cleric\"],\n      threatLevel: 2,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"mace\", 1),\n        ItemGenerators.getItemGeneratorByTag(\"breastplate\", 1),\n      ],\n    },\n    {\n      name: \"priest\",\n      abilities: [\n        {\n          name: \"turn undead\",\n          description: \"turns undead creatures\",\n          category: \"divine\",\n          threatLevel: 1,\n        },\n        {\n          name: \"divine spellcasting\",\n          description: \"casts divine spells\",\n          category: \"divine\",\n          threatLevel: 2,\n        },\n      ],\n      tags: [\"cleric\"],\n      threatLevel: 1,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"staff\", 1),\n        ItemGenerators.getItemGeneratorByTag(\"robe\", 1),\n      ],\n    },\n    {\n      name: \"high priest\",\n      abilities: [\n        {\n          name: \"turn undead\",\n          description: \"turns undead creatures\",\n          category: \"divine\",\n          threatLevel: 1,\n        },\n        {\n          name: \"divine spellcasting\",\n          description: \"casts divine spells\",\n          category: \"divine\",\n          threatLevel: 3,\n        },\n      ],\n      tags: [\"cleric\"],\n      threatLevel: 2,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"staff\", 2),\n        ItemGenerators.getItemGeneratorByTag(\"robe\", 2),\n      ],\n    },\n  ];\n}\n","import * as ItemGenerators from \"../../equipment/generators.js\";\nimport type Archetype from \"../archetype.js\";\n\nexport function all(): Archetype[] {\n  return [\n    {\n      name: \"cult acolyte\",\n      abilities: [],\n      tags: [\"cult\"],\n      threatLevel: 1,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"staff\", 1),\n        ItemGenerators.getItemGenerator(\"robe\", 0),\n      ],\n    },\n    {\n      name: \"cult priest\",\n      abilities: [\n        {\n          name: \"demonic spellcasting\",\n          description: \"casts demonic spells\",\n          category: \"demonic\",\n          threatLevel: 2,\n        },\n      ],\n      tags: [\"cult\"],\n      threatLevel: 2,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"staff\", 1),\n        ItemGenerators.getItemGenerator(\"robe\", 1),\n      ],\n    },\n    {\n      name: \"cult high priest\",\n      abilities: [\n        {\n          name: \"demonic spellcasting\",\n          description: \"casts demonic spells\",\n          category: \"demonic\",\n          threatLevel: 3,\n        },\n      ],\n      tags: [\"cult\"],\n      threatLevel: 3,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"staff\", 3),\n        ItemGenerators.getItemGeneratorByTag(\"knife\", 2),\n        ItemGenerators.getItemGenerator(\"robe\", 3),\n      ],\n    },\n  ];\n}\n","import * as ItemGenerators from \"../../equipment/generators.js\";\nimport type Archetype from \"../archetype.js\";\n\nexport function all(): Archetype[] {\n  return [\n    {\n      name: \"apprentice mage\",\n      abilities: [\n        {\n          name: \"arcane spellcasting\",\n          description: \"casts arcane spells\",\n          category: \"spellcaster\",\n          threatLevel: 1,\n        },\n      ],\n      tags: [\"magic user\"],\n      threatLevel: 1,\n      itemGenerators: [ItemGenerators.getItemGenerator(\"staff\", 1), ItemGenerators.getItemGenerator(\"robe\", 0)],\n    },\n    {\n      name: \"archmage\",\n      abilities: [\n        {\n          name: \"arcane spellcasting\",\n          description: \"casts arcane spells\",\n          category: \"spellcaster\",\n          threatLevel: 8,\n        },\n      ],\n      tags: [\"magic user\"],\n      threatLevel: 4,\n      itemGenerators: [ItemGenerators.getItemGenerator(\"staff\", 3), ItemGenerators.getItemGenerator(\"robe\", 3)],\n    },\n    {\n      name: \"druid\",\n      abilities: [\n        {\n          name: \"nature spellcasting\",\n          description: \"casts nature spells\",\n          category: \"spellcaster\",\n          threatLevel: 1,\n        },\n      ],\n      tags: [\"magic user\"],\n      threatLevel: 2,\n      itemGenerators: [ItemGenerators.getItemGenerator(\"staff\", 1), ItemGenerators.getItemGenerator(\"robe\", 0)],\n    },\n    {\n      name: \"mage\",\n      abilities: [\n        {\n          name: \"arcane spellcasting\",\n          description: \"casts arcane spells\",\n          category: \"spellcaster\",\n          threatLevel: 4,\n        },\n      ],\n      tags: [\"magic user\"],\n      threatLevel: 2,\n      itemGenerators: [ItemGenerators.getItemGenerator(\"staff\", 1), ItemGenerators.getItemGenerator(\"robe\", 0)],\n    },\n    {\n      name: \"necromancer\",\n      abilities: [\n        {\n          name: \"necromantic spellcasting\",\n          description: \"casts necromantic spells\",\n          category: \"spellcaster\",\n          threatLevel: 2,\n        },\n      ],\n      tags: [\"magic user\"],\n      threatLevel: 4,\n      itemGenerators: [ItemGenerators.getItemGenerator(\"staff\", 3), ItemGenerators.getItemGenerator(\"robe\", 3)],\n    },\n    {\n      name: \"sorcerer\",\n      abilities: [\n        {\n          name: \"arcane spellcasting\",\n          description: \"casts arcane spells\",\n          category: \"spellcaster\",\n          threatLevel: 1,\n        },\n      ],\n      tags: [\"magic user\"],\n      threatLevel: 2,\n      itemGenerators: [],\n    },\n    {\n      name: \"warlock\",\n      abilities: [\n        {\n          name: \"demonic spellcasting\",\n          description: \"casts demonic spells\",\n          category: \"spellcaster\",\n          threatLevel: 1,\n        },\n      ],\n      tags: [\"magic user\"],\n      threatLevel: 2,\n      itemGenerators: [],\n    },\n    {\n      name: \"witch\",\n      abilities: [\n        {\n          name: \"arcane spellcasting\",\n          description: \"casts arcane spells\",\n          category: \"spellcaster\",\n          threatLevel: 1,\n        },\n      ],\n      tags: [\"magic user\"],\n      threatLevel: 2,\n      itemGenerators: [],\n    },\n    {\n      name: \"wizard\",\n      abilities: [\n        {\n          name: \"arcane spellcasting\",\n          description: \"casts arcane spells\",\n          category: \"spellcaster\",\n          threatLevel: 4,\n        },\n      ],\n      tags: [\"magic user\"],\n      threatLevel: 2,\n      itemGenerators: [ItemGenerators.getItemGenerator(\"staff\", 1), ItemGenerators.getItemGenerator(\"robe\", 1)],\n    },\n  ];\n}\n","import * as ItemGenerators from \"../../equipment/generators.js\";\nimport type Archetype from \"../archetype.js\";\n\nexport function all(): Archetype[] {\n  return [\n    {\n      name: \"archer\",\n      abilities: [],\n      tags: [\"martial\", \"military\"],\n      threatLevel: 1,\n      itemGenerators: [ItemGenerators.getItemGeneratorByTag(\"bow\", 1)],\n    },\n    {\n      name: \"captain\",\n      abilities: [],\n      tags: [\"martial\", \"military\"],\n      threatLevel: 1,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"sword\", 2),\n        ItemGenerators.getItemGeneratorByTag(\"breastplate\", 2),\n        ItemGenerators.getItemGeneratorByTag(\"helmet\", 2),\n      ],\n    },\n    {\n      name: \"general\",\n      abilities: [],\n      tags: [\"martial\", \"military\"],\n      threatLevel: 1,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"sword\", 3),\n        ItemGenerators.getItemGeneratorByTag(\"breastplate\", 3),\n        ItemGenerators.getItemGeneratorByTag(\"helmet\", 3),\n      ],\n    },\n    {\n      name: \"guard\",\n      abilities: [],\n      tags: [\"martial\", \"military\"],\n      threatLevel: 1,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"spear\", 1),\n        ItemGenerators.getItemGeneratorByTag(\"body armor\", 1),\n      ],\n    },\n    { name: \"hunter\", abilities: [], tags: [\"martial\", \"wilderness\"], threatLevel: 1, itemGenerators: [] },\n    { name: \"martial artist\", abilities: [], tags: [\"martial\"], threatLevel: 1, itemGenerators: [] },\n    { name: \"martial arts master\", abilities: [], tags: [\"martial\"], threatLevel: 2, itemGenerators: [] },\n    {\n      name: \"raider captain\",\n      abilities: [],\n      tags: [\"criminal\", \"martial\"],\n      threatLevel: 1,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"sword\", 1),\n        ItemGenerators.getItemGeneratorByTag(\"breastplate\", 1),\n      ],\n    },\n    {\n      name: \"raider\",\n      abilities: [],\n      tags: [\"criminal\", \"martial\"],\n      threatLevel: 1,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"weapon\", 1),\n        ItemGenerators.getItemGeneratorByTag(\"body armor\", 1),\n      ],\n    },\n    { name: \"ranger\", abilities: [], tags: [\"martial\", \"wilderness\"], threatLevel: 3, itemGenerators: [] },\n    {\n      name: \"soldier\",\n      abilities: [],\n      tags: [\"martial\", \"military\"],\n      threatLevel: 1,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"martial weapon\", 1),\n        ItemGenerators.getItemGeneratorByTag(\"body armor\", 1),\n      ],\n    },\n    {\n      name: \"thug\",\n      abilities: [],\n      tags: [\"criminal\", \"martial\"],\n      threatLevel: 1,\n      itemGenerators: [ItemGenerators.getItemGeneratorByTag(\"club\", 1)],\n    },\n    {\n      name: \"veteran hunter\",\n      abilities: [],\n      tags: [\"martial\", \"wilderness\"],\n      threatLevel: 2,\n      itemGenerators: [ItemGenerators.getItemGeneratorByTag(\"bow\", 3)],\n    },\n    {\n      name: \"veteran soldier\",\n      abilities: [],\n      tags: [\"martial\", \"military\"],\n      threatLevel: 2,\n      itemGenerators: [\n        ItemGenerators.getItemGeneratorByTag(\"sword\", 2),\n        ItemGenerators.getItemGeneratorByTag(\"breastplate\", 2),\n      ],\n    },\n    {\n      name: \"warrior\",\n      abilities: [],\n      tags: [\"martial\", \"wilderness\"],\n      threatLevel: 1,\n      itemGenerators: [ItemGenerators.getItemGeneratorByTag(\"simple weapon\", 1)],\n    },\n  ];\n}\n","import type Archetype from \"../archetype.js\";\n\nexport function all(): Archetype[] {\n  return [\n    {\n      name: \"lich\",\n      abilities: [\n        {\n          name: \"necromantic spellcasting\",\n          description: \"casts necromantic spells\",\n          category: \"spellcaster\",\n          threatLevel: 8,\n        },\n      ],\n      tags: [\"undead\"],\n      threatLevel: 5,\n      itemGenerators: [],\n    },\n    { name: \"shambler\", abilities: [], tags: [\"undead\"], threatLevel: 1, itemGenerators: [] },\n    { name: \"sprinter\", abilities: [], tags: [\"undead\"], threatLevel: 2, itemGenerators: [] },\n  ];\n}\n","import type Archetype from \"../archetype.js\";\nimport * as Cleric from \"./cleric.js\";\nimport * as Cult from \"./cult.js\";\nimport * as Mage from \"./mage.js\";\nimport * as Martial from \"./martial.js\";\nimport * as Undead from \"./undead.js\";\n\nexport function all(): Archetype[] {\n  let result: Archetype[] = [];\n\n  result = result.concat(Cleric.all());\n  result = result.concat(Cult.all());\n  result = result.concat(Mage.all());\n  result = result.concat(Martial.all());\n  result = result.concat(Undead.all());\n\n  return result;\n}\n","import type Mob from \"./mob.js\";\n\nexport function hasAllTagsIn(tags: string[], mobs: Mob[]): Mob[] {\n  let result = [];\n\n  for (let i = 0; i < mobs.length; i++) {\n    let valid = true;\n    for (let t = 0; t < tags.length; t++) {\n      if (!mobs[i].tags.includes(tags[t])) {\n        valid = false;\n        break;\n      }\n    }\n    if (valid === true) {\n      result.push(mobs[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function hasAnyTagIn(tags: string[], mobs: Mob[]): Mob[] {\n  let result = [];\n\n  for (let i = 0; i < mobs.length; i++) {\n    let valid = false;\n    for (let t = 0; t < tags.length; t++) {\n      if (mobs[i].tags.includes(tags[t])) {\n        valid = true;\n        break;\n      }\n    }\n    if (valid === true) {\n      result.push(mobs[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function hasCreatureType(creatureType: string, mobs: Mob[]): Mob[] {\n  let result = [];\n\n  for (let i = 0; i < mobs.length; i++) {\n    if (mobs[i].creatureTypes.includes(creatureType)) {\n      result.push(mobs[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function hasEnvironment(environment: string, mobs: Mob[]): Mob[] {\n  let result = [];\n\n  for (let i = 0; i < mobs.length; i++) {\n    if (mobs[i].environments.includes(environment)) {\n      result.push(mobs[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function hasNoTagIn(tags: string[], mobs: Mob[]): Mob[] {\n  let result = [];\n\n  for (let i = 0; i < mobs.length; i++) {\n    let valid = true;\n    for (let t = 0; t < tags.length; t++) {\n      if (mobs[i].tags.includes(tags[t])) {\n        valid = false;\n        break;\n      }\n    }\n    if (valid === true) {\n      result.push(mobs[i]);\n    }\n  }\n\n  return result;\n}\n","import type Mob from \"./mob.js\";\nimport * as Mobs from \"./mobs.js\";\n\nexport default class MobFilter {\n  withAllTags: string[];\n  withAnyTag: string[];\n  withCreatureType: string;\n  withEnvironment: string;\n  withNoTags: string[];\n\n  constructor(\n    withAllTags: string[],\n    withAnyTag: string[],\n    withCreatureType: string,\n    withEnvironment: string,\n    withNoTags: string[],\n  ) {\n    this.withAllTags = withAllTags;\n    this.withAnyTag = withAnyTag;\n    this.withCreatureType = withCreatureType;\n    this.withEnvironment = withEnvironment;\n    this.withNoTags = withNoTags;\n  }\n\n  apply(mobs: Mob[]): Mob[] {\n    let result = mobs;\n\n    if (this.withAllTags.length > 0) {\n      result = Mobs.hasAllTagsIn(this.withAllTags, result);\n    }\n\n    if (this.withAnyTag.length > 0) {\n      result = Mobs.hasAnyTagIn(this.withAnyTag, result);\n    }\n\n    if (this.withCreatureType != \"\") {\n      result = Mobs.hasCreatureType(this.withCreatureType, result);\n    }\n\n    if (this.withEnvironment != \"\") {\n      result = Mobs.hasEnvironment(this.withEnvironment, result);\n    }\n\n    if (this.withNoTags.length > 0) {\n      result = Mobs.hasNoTagIn(this.withNoTags, result);\n    }\n\n    return result;\n  }\n}\n","import * as Archetypes from \"$lib/archetypes/archetypes.js\";\nimport * as FantasyArchetypes from \"$lib/archetypes/fantasy/all.js\";\nimport MobFilter from \"$lib/mobs/filter.js\";\nimport type EncounterTemplate from \"../../encounter_template.js\";\n\nexport function all(): EncounterTemplate[] {\n  let allArchetypes = FantasyArchetypes.all();\n  return [\n    {\n      name: \"group of raiders\",\n      threatLevel: 3,\n      groupTemplates: [\n        {\n          name: \"raider captain\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"raider captain\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n        {\n          name: \"raiders\",\n          threatLevel: 3,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"raider\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 3,\n          maxNumber: 6,\n        },\n      ],\n      tags: [\"bandits\"],\n      commonality: 5,\n    },\n    {\n      name: \"group of looters\",\n      threatLevel: 3,\n      groupTemplates: [\n        {\n          name: \"looters\",\n          threatLevel: 3,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"thug\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 3,\n          maxNumber: 6,\n        },\n      ],\n      tags: [\"bandits\"],\n      commonality: 5,\n    },\n    {\n      name: \"group of thugs\",\n      threatLevel: 2,\n      groupTemplates: [\n        {\n          name: \"thugs\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"thug\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"bandits\"],\n      commonality: 5,\n    },\n  ];\n}\n","import * as Archetypes from \"$lib/archetypes/archetypes.js\";\nimport * as FantasyArchetypes from \"$lib/archetypes/fantasy/all.js\";\nimport MobFilter from \"$lib/mobs/filter.js\";\nimport type EncounterTemplate from \"../../encounter_template.js\";\n\nexport function all(): EncounterTemplate[] {\n  let allArchetypes = FantasyArchetypes.all();\n  return [\n    {\n      name: \"group of cult acolytes\",\n      threatLevel: 1,\n      groupTemplates: [\n        {\n          name: \"cult acolytes\",\n          threatLevel: 1,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"cult acolyte\", allArchetypes)],\n          filter: new MobFilter([], [\"cult\", \"corruptible\"], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"cult\"],\n      commonality: 50,\n    },\n    {\n      name: \"group of lesser demons\",\n      threatLevel: 4,\n      groupTemplates: [\n        {\n          name: \"lesser demons\",\n          threatLevel: 2,\n          isSentient: false,\n          archetypes: [],\n          filter: new MobFilter([\"demon\"], [], \"\", \"\", []),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"cult\", \"demonic\"],\n      commonality: 1,\n    },\n    {\n      name: \"cult priest\",\n      threatLevel: 2,\n      groupTemplates: [\n        {\n          name: \"cult priest\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"cult priest\", allArchetypes)],\n          filter: new MobFilter([], [\"cult\", \"corruptible\"], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n      ],\n      tags: [\"cult\"],\n      commonality: 20,\n    },\n    {\n      name: \"cult high priest\",\n      threatLevel: 5,\n      groupTemplates: [\n        {\n          name: \"cult high priest\",\n          threatLevel: 5,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"cult high priest\", allArchetypes)],\n          filter: new MobFilter([], [\"cult\", \"corruptible\"], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n      ],\n      tags: [\"cult\"],\n      commonality: 15,\n    },\n  ];\n}\n","import MobFilter from \"$lib/mobs/filter.js\";\nimport type EncounterTemplate from \"../../encounter_template.js\";\n\nexport function all(): EncounterTemplate[] {\n  return [\n    {\n      name: \"swarming insects\",\n      threatLevel: 3,\n      groupTemplates: [\n        {\n          name: \"swarming insects\",\n          threatLevel: 3,\n          isSentient: false,\n          archetypes: [],\n          filter: new MobFilter([\"swarm\"], [], \"\", \"\", []),\n          minNumber: 3,\n          maxNumber: 8,\n        },\n      ],\n      tags: [\"insects\"],\n      commonality: 5,\n    },\n    {\n      name: \"wandering creature\",\n      threatLevel: 2,\n      groupTemplates: [\n        {\n          name: \"wandering creature\",\n          threatLevel: 3,\n          isSentient: false,\n          archetypes: [],\n          filter: new MobFilter([], [], \"\", \"\", []),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n      ],\n      tags: [\"wandering creature\"],\n      commonality: 40,\n    },\n    {\n      name: \"group of wandering creatures\",\n      threatLevel: 4,\n      groupTemplates: [\n        {\n          name: \"wandering creatures\",\n          threatLevel: 3,\n          isSentient: false,\n          archetypes: [],\n          filter: new MobFilter([], [], \"\", \"\", []),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"wandering creature\"],\n      commonality: 30,\n    },\n  ];\n}\n","import * as Archetypes from \"$lib/archetypes/archetypes.js\";\nimport * as FantasyArchetypes from \"$lib/archetypes/fantasy/all.js\";\nimport MobFilter from \"$lib/mobs/filter.js\";\nimport type EncounterTemplate from \"../../encounter_template\";\n\nexport function all(): EncounterTemplate[] {\n  let allArchetypes = FantasyArchetypes.all();\n\n  return [\n    {\n      name: \"archmage\",\n      threatLevel: 5,\n      groupTemplates: [\n        {\n          name: \"archmage\",\n          threatLevel: 5,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"archmage\", allArchetypes)],\n          filter: new MobFilter([], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n      ],\n      tags: [\"mage\", \"magic\"],\n      commonality: 1,\n    },\n    {\n      name: \"mage\",\n      threatLevel: 2,\n      groupTemplates: [\n        {\n          name: \"mage\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"mage\", allArchetypes)],\n          filter: new MobFilter([], [], \"humanoid\", \"\", [\"skeleton\", \"zombie\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n      ],\n      tags: [\"mage\", \"magic\"],\n      commonality: 5,\n    },\n  ];\n}\n","import * as Archetypes from \"$lib/archetypes/archetypes.js\";\nimport * as FantasyArchetypes from \"$lib/archetypes/fantasy/all.js\";\nimport MobFilter from \"$lib/mobs/filter.js\";\nimport type EncounterTemplate from \"../../encounter_template.js\";\n\nexport function all(): EncounterTemplate[] {\n  let allArchetypes = FantasyArchetypes.all();\n\n  return [\n    {\n      name: \"squad of soldiers\",\n      threatLevel: 1,\n      groupTemplates: [\n        {\n          name: \"soldiers\",\n          threatLevel: 1,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"soldier\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"martial\", \"soldiers\"],\n      commonality: 10,\n    },\n    {\n      name: \"squad of veterans\",\n      threatLevel: 2,\n      groupTemplates: [\n        {\n          name: \"veteran soldiers\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"veteran soldier\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"martial\", \"soldiers\"],\n      commonality: 5,\n    },\n    {\n      name: \"captain\",\n      threatLevel: 4,\n      groupTemplates: [\n        {\n          name: \"captain\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"captain\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n        {\n          name: \"veteran soldiers\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"veteran soldier\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"martial\", \"soldiers\"],\n      commonality: 3,\n    },\n    {\n      name: \"general\",\n      threatLevel: 5,\n      groupTemplates: [\n        {\n          name: \"general\",\n          threatLevel: 3,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"general\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n        {\n          name: \"captain\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"captain\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 2,\n        },\n      ],\n      tags: [\"martial\", \"soldiers\"],\n      commonality: 2,\n    },\n  ];\n}\n","import * as Archetypes from \"$lib/archetypes/archetypes.js\";\nimport * as FantasyArchetypes from \"$lib/archetypes/fantasy/all.js\";\nimport MobFilter from \"$lib/mobs/filter.js\";\nimport type EncounterTemplate from \"../../encounter_template.js\";\n\nexport function all(): EncounterTemplate[] {\n  let allArchetypes = FantasyArchetypes.all();\n\n  return [\n    {\n      name: \"lich\",\n      threatLevel: 5,\n      groupTemplates: [\n        {\n          name: \"lich\",\n          threatLevel: 5,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"lich\", allArchetypes)],\n          filter: new MobFilter([], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n      ],\n      tags: [\"undead\"],\n      commonality: 5,\n    },\n    {\n      name: \"necromancer\",\n      threatLevel: 7,\n      groupTemplates: [\n        {\n          name: \"necromancer\",\n          threatLevel: 5,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"necromancer\", allArchetypes)],\n          filter: new MobFilter([], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n        {\n          name: \"skeletons\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [\n            Archetypes.byName(\"warrior\", allArchetypes),\n            Archetypes.byName(\"soldier\", allArchetypes),\n            Archetypes.byName(\"guard\", allArchetypes),\n          ],\n          filter: new MobFilter([\"skeleton\"], [], \"\", \"\", []),\n          minNumber: 3,\n          maxNumber: 6,\n        },\n      ],\n      tags: [\"mage\", \"undead\"],\n      commonality: 5,\n    },\n    {\n      name: \"pack of ghouls\",\n      threatLevel: 5,\n      groupTemplates: [\n        {\n          name: \"ghouls\",\n          threatLevel: 3,\n          isSentient: false,\n          archetypes: [],\n          filter: new MobFilter([\"ghoul\"], [], \"\", \"\", []),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"undead\"],\n      commonality: 5,\n    },\n    {\n      name: \"pack of undead\",\n      threatLevel: 5,\n      groupTemplates: [\n        {\n          name: \"undead\",\n          threatLevel: 3,\n          isSentient: false,\n          archetypes: [],\n          filter: new MobFilter([\"undead\"], [], \"\", \"\", [\"vampire\"]),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"undead\"],\n      commonality: 5,\n    },\n    {\n      name: \"pack of skeletons\",\n      threatLevel: 2,\n      groupTemplates: [\n        {\n          name: \"skeletons\",\n          threatLevel: 2,\n          isSentient: true,\n          archetypes: [\n            Archetypes.byName(\"warrior\", allArchetypes),\n            Archetypes.byName(\"soldier\", allArchetypes),\n            Archetypes.byName(\"guard\", allArchetypes),\n          ],\n          filter: new MobFilter([\"skeleton\"], [], \"\", \"\", []),\n          minNumber: 3,\n          maxNumber: 6,\n        },\n      ],\n      tags: [\"skeleton\", \"undead\"],\n      commonality: 10,\n    },\n    {\n      name: \"pack of zombies\",\n      threatLevel: 3,\n      groupTemplates: [\n        {\n          name: \"zombies\",\n          threatLevel: 3,\n          isSentient: true,\n          archetypes: [\n            Archetypes.byName(\"shambler\", allArchetypes),\n            Archetypes.byName(\"sprinter\", allArchetypes),\n          ],\n          filter: new MobFilter([\"zombie\"], [], \"\", \"\", []),\n          minNumber: 3,\n          maxNumber: 6,\n        },\n      ],\n      tags: [\"zombie\", \"undead\"],\n      commonality: 10,\n    },\n    {\n      name: \"vampire\",\n      threatLevel: 5,\n      groupTemplates: [\n        {\n          name: \"vampire\",\n          threatLevel: 5,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"warrior\", allArchetypes)],\n          filter: new MobFilter([\"vampire\"], [], \"\", \"\", []),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n      ],\n      tags: [\"vampire\", \"undead\"],\n      commonality: 2,\n    },\n  ];\n}\n","import * as Archetypes from \"$lib/archetypes/archetypes.js\";\nimport * as FantasyArchetypes from \"$lib/archetypes/fantasy/all.js\";\nimport MobFilter from \"$lib/mobs/filter.js\";\nimport type EncounterTemplate from \"../../encounter_template.js\";\n\nexport function all(): EncounterTemplate[] {\n  let allArchetypes = FantasyArchetypes.all();\n\n  return [\n    {\n      name: \"group of hunters\",\n      threatLevel: 3,\n      groupTemplates: [\n        {\n          name: \"hunters\",\n          threatLevel: 3,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"hunter\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 3,\n          maxNumber: 6,\n        },\n      ],\n      tags: [\"hunters\"],\n      commonality: 5,\n    },\n    {\n      name: \"lone hunter\",\n      threatLevel: 1,\n      groupTemplates: [\n        {\n          name: \"hunter\",\n          threatLevel: 1,\n          isSentient: true,\n          archetypes: [Archetypes.byName(\"hunter\", allArchetypes)],\n          filter: new MobFilter([\"martial\"], [], \"humanoid\", \"\", [\"undead\"]),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n      ],\n      tags: [\"hunters\"],\n      commonality: 1,\n    },\n    {\n      name: \"swarming insects\",\n      threatLevel: 3,\n      groupTemplates: [\n        {\n          name: \"swarming insects\",\n          threatLevel: 3,\n          isSentient: false,\n          archetypes: [],\n          filter: new MobFilter([\"swarm\"], [], \"\", \"\", []),\n          minNumber: 3,\n          maxNumber: 8,\n        },\n      ],\n      tags: [\"insect swarm\"],\n      commonality: 5,\n    },\n    {\n      name: \"wandering creature\",\n      threatLevel: 3,\n      groupTemplates: [\n        {\n          name: \"wandering creature\",\n          threatLevel: 3,\n          isSentient: false,\n          archetypes: [],\n          filter: new MobFilter([], [], \"\", \"\", []),\n          minNumber: 1,\n          maxNumber: 1,\n        },\n      ],\n      tags: [\"wandering creature\"],\n      commonality: 10,\n    },\n    {\n      name: \"group of wandering creatures\",\n      threatLevel: 5,\n      groupTemplates: [\n        {\n          name: \"wandering creatures\",\n          threatLevel: 3,\n          isSentient: false,\n          archetypes: [],\n          filter: new MobFilter([], [], \"\", \"\", []),\n          minNumber: 2,\n          maxNumber: 4,\n        },\n      ],\n      tags: [\"wandering creature\"],\n      commonality: 10,\n    },\n  ];\n}\n","import type EncounterTemplate from \"../../encounter_template.js\";\nimport * as Bandits from \"./bandits.js\";\nimport * as Cult from \"./cult.js\";\nimport * as GenericDungeon from \"./generic_dungeon.js\";\nimport * as Magic from \"./magic.js\";\nimport * as Martial from \"./martial.js\";\nimport * as Undead from \"./undead.js\";\nimport * as Wilderness from \"./wilderness.js\";\n\nexport function all(includeUndead: boolean): EncounterTemplate[] {\n  let result: EncounterTemplate[] = [];\n\n  result = result.concat(Bandits.all());\n  result = result.concat(Cult.all());\n  result = result.concat(GenericDungeon.all());\n  result = result.concat(Magic.all());\n  result = result.concat(Martial.all());\n  result = result.concat(Wilderness.all());\n\n  if (includeUndead) {\n    result = result.concat(Undead.all());\n  }\n\n  return result;\n}\n","import type EncounterTemplate from \"../encounter_template.js\";\n\nexport function belowThreatLevel(\n  level: number,\n  templates: EncounterTemplate[],\n): EncounterTemplate[] {\n  return inThreatLevelRange(0, level, templates);\n}\n\nexport function inThreatLevelRange(\n  minLevel: number,\n  maxLevel: number,\n  templates: EncounterTemplate[],\n): EncounterTemplate[] {\n  let result = [];\n\n  for (let i = 0; i < templates.length; i++) {\n    if (templates[i].threatLevel >= minLevel && templates[i].threatLevel <= maxLevel) {\n      result.push(templates[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function withThreatLevel(\n  level: number,\n  templates: EncounterTemplate[],\n): EncounterTemplate[] {\n  return inThreatLevelRange(level, level, templates);\n}\n\nexport function withTag(tag: string, templates: EncounterTemplate[]): EncounterTemplate[] {\n  let result = [];\n\n  for (let i = 0; i < templates.length; i++) {\n    if (templates[i].tags.includes(tag)) {\n      result.push(templates[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function withoutTag(tag: string, templates: EncounterTemplate[]): EncounterTemplate[] {\n  let result = [];\n\n  for (let i = 0; i < templates.length; i++) {\n    if (!templates[i].tags.includes(tag)) {\n      result.push(templates[i]);\n    }\n  }\n\n  return result;\n}\n","import type EncounterTemplate from \"$lib/encounters/template.js\";\nimport type Species from \"$lib/species/species.js\";\nimport type * as MUN from \"@ironarachne/made-up-names\";\nimport type RoomRequirement from \"./rooms/roomrequirement.js\";\nimport type RoomTheme from \"./rooms/themes/theme.js\";\n\nexport default class DungeonTheme {\n  name: string;\n  mainEnvironment: string;\n  nameGenerator: MUN.GenericNameGenerator;\n  weakEncounterTemplates: EncounterTemplate[];\n  strongEncounterTemplates: EncounterTemplate[];\n  bossEncounterTemplates: EncounterTemplate[];\n  sentientOptions: Species[];\n  flooringOptions: string[];\n  roomThemes: RoomTheme[];\n  requiredRooms: RoomRequirement[];\n\n  constructor(\n    name: string,\n    mainEnvironment: string,\n    nameGenerator: MUN.GenericNameGenerator,\n    weak: EncounterTemplate[],\n    strong: EncounterTemplate[],\n    boss: EncounterTemplate[],\n    sentientOptions: Species[],\n    flooringOptions: string[],\n    roomThemes: RoomTheme[],\n    requiredRooms: RoomRequirement[],\n  ) {\n    this.name = name;\n    this.mainEnvironment = mainEnvironment;\n    this.nameGenerator = nameGenerator;\n    this.weakEncounterTemplates = weak;\n    this.strongEncounterTemplates = strong;\n    this.bossEncounterTemplates = boss;\n    this.sentientOptions = sentientOptions; // TODO: figure out if this is still in use\n    this.flooringOptions = flooringOptions;\n    this.roomThemes = roomThemes;\n    this.requiredRooms = requiredRooms;\n  }\n}\n","import type RoomTheme from \"./themes/theme.js\";\n\nexport default class RoomRequirement {\n  theme: RoomTheme;\n  minCount: number;\n  maxCount: number;\n\n  constructor(theme: RoomTheme, minCount: number, maxCount: number) {\n    this.theme = theme;\n    this.minCount = minCount;\n    this.maxCount = maxCount;\n  }\n}\n","import * as FantasyEncounters from \"$lib/encounters/templates/fantasy/all.js\";\nimport * as Encounters from \"$lib/encounters/templates/templates.js\";\nimport * as CommonSpecies from \"$lib/species/common.js\";\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport random from \"random\";\nimport DungeonTheme from \"../dungeon_theme.js\";\nimport RoomRequirement from \"../rooms/roomrequirement.js\";\nimport * as RoomThemes from \"../rooms/themes/themes.js\";\n\nexport function getTheme(): DungeonTheme {\n  let allEncounters = FantasyEncounters.all(false);\n  let allSentientOptions = CommonSpecies.sentient();\n  allSentientOptions = CommonSpecies.withCreatureType(\"humanoid\", allSentientOptions);\n  let numberOfSentientOptions = random.int(1, 3);\n\n  let cultEncounters = Encounters.withTag(\"cult\", allEncounters);\n  let cultWeakEncounters = Encounters.belowThreatLevel(3, cultEncounters);\n  let cultStrongEncounters = Encounters.inThreatLevelRange(3, 4, cultEncounters);\n  let cultBossEncounters = Encounters.withThreatLevel(5, cultEncounters);\n\n  let cultNameGen = new MUN.GenericNameGenerator();\n  let c1 = [\"DEN\", \"DOMAIN\", \"LAIR\"];\n  let c2 = [\"BALEFUL\", \"VILE\", \"DARK\", \"DEMONIC\"];\n  let c3 = [\"BROTHERHOOD\", \"ORDER\"];\n  for (let i = 0; i < c1.length; i++) {\n    for (let j = 0; j < c2.length; j++) {\n      for (let k = 0; k < c3.length; k++) {\n        cultNameGen.patterns.push(`THE ${c1[i]} OF THE ${c2[j]} ${c3[k]}`);\n      }\n    }\n  }\n\n  let cultSentientOptions = CommonSpecies.byTag(\"corruptible\", allSentientOptions);\n  cultSentientOptions = CommonSpecies.randomUniqueSet(cultSentientOptions, numberOfSentientOptions);\n\n  const allRoomThemes = RoomThemes.all();\n  let barracks = RoomThemes.byName(\"barracks\", allRoomThemes);\n  let altar = RoomThemes.byName(\"altar room\", allRoomThemes);\n\n  let cultRoomThemes = RoomThemes.byTag(\"cult\", allRoomThemes);\n  let dungeonRoomThemes = RoomThemes.byTag(\"dungeon\", allRoomThemes);\n  cultRoomThemes = cultRoomThemes.concat(dungeonRoomThemes);\n\n  return new DungeonTheme(\n    \"cult\",\n    \"forest\",\n    cultNameGen,\n    cultWeakEncounters,\n    cultStrongEncounters,\n    cultBossEncounters,\n    cultSentientOptions,\n    [\"stone tile\"],\n    cultRoomThemes,\n    [new RoomRequirement(altar, 1, 1), new RoomRequirement(barracks, 1, 1)],\n  );\n}\n","import * as FantasyEncounters from \"$lib/encounters/templates/fantasy/all.js\";\nimport * as Encounters from \"$lib/encounters/templates/templates.js\";\nimport * as CommonSpecies from \"$lib/species/common.js\";\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport random from \"random\";\nimport DungeonTheme from \"../dungeon_theme.js\";\nimport RoomRequirement from \"../rooms/roomrequirement.js\";\nimport * as RoomThemes from \"../rooms/themes/themes.js\";\n\nexport function getTheme(): DungeonTheme {\n  let allEncounters = FantasyEncounters.all(false);\n  let allSentientOptions = CommonSpecies.sentient();\n  allSentientOptions = CommonSpecies.withCreatureType(\"humanoid\", allSentientOptions);\n  let numberOfSentientOptions = random.int(1, 3);\n\n  let fortressEncounters = Encounters.withTag(\"martial\", allEncounters);\n\n  let fortressSentientOptions = CommonSpecies.byTag(\"martial\", allSentientOptions);\n  fortressSentientOptions = CommonSpecies.randomUniqueSet(\n    fortressSentientOptions,\n    numberOfSentientOptions,\n  );\n\n  for (let i = 0; i < fortressEncounters.length; i++) {\n    if (fortressEncounters[i].tags.includes(\"soldiers\")) {\n      fortressEncounters[i].commonality += 20;\n    }\n  }\n\n  let fortressWeakEncounters = Encounters.belowThreatLevel(3, fortressEncounters);\n  let fortressStrongEncounters = Encounters.inThreatLevelRange(3, 4, fortressEncounters);\n  let fortressBossEncounters = Encounters.withThreatLevel(5, fortressEncounters);\n\n  let fortressNameGen = new MUN.GenericNameGenerator();\n  let p1 = [\"FORTRESS\", \"STRONGHOLD\", \"DOMAIN\", \"DOMINION\", \"LAIR\"];\n  let p2 = [\"DARK\", \"DREAD\", \"DIRE\", \"IRON\", \"BLOODY\", \"CURSED\"];\n  let p3 = [\"LEGION\", \"ARMY\"];\n  for (let i = 0; i < p1.length; i++) {\n    for (let j = 0; j < p2.length; j++) {\n      for (let k = 0; k < p3.length; k++) {\n        fortressNameGen.patterns.push(`THE ${p1[i]} OF THE ${p2[j]} ${p3[k]}`);\n      }\n    }\n  }\n\n  const allRoomThemes = RoomThemes.all();\n  let barracks = RoomThemes.byName(\"barracks\", allRoomThemes);\n\n  let dungeonRoomThemes = RoomThemes.byTag(\"dungeon\", allRoomThemes);\n  let militaryRoomThemes = RoomThemes.byTag(\"military\", allRoomThemes);\n  let fortressRoomThemes = militaryRoomThemes.concat(dungeonRoomThemes);\n\n  return new DungeonTheme(\n    \"fortress\",\n    \"hill\",\n    fortressNameGen,\n    fortressWeakEncounters,\n    fortressStrongEncounters,\n    fortressBossEncounters,\n    fortressSentientOptions,\n    [\"stone tile\"],\n    fortressRoomThemes,\n    [new RoomRequirement(barracks, 1, 2)],\n  );\n}\n","import * as FantasyEncounters from \"$lib/encounters/templates/fantasy/all.js\";\nimport * as GenericEncounters from \"$lib/encounters/templates/fantasy/generic_dungeon.js\";\nimport * as Encounters from \"$lib/encounters/templates/templates.js\";\nimport * as CommonSpecies from \"$lib/species/common.js\";\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport random from \"random\";\nimport DungeonTheme from \"../dungeon_theme.js\";\nimport * as RoomThemes from \"../rooms/themes/themes.js\";\n\nexport function getTheme(): DungeonTheme {\n  let allEncounters = FantasyEncounters.all(false);\n  let allSentientOptions = CommonSpecies.sentient();\n  allSentientOptions = CommonSpecies.withCreatureType(\"humanoid\", allSentientOptions);\n  let numberOfSentientOptions = random.int(1, 2);\n\n  let magicSentientOptions = allSentientOptions;\n  magicSentientOptions = CommonSpecies.randomUniqueSet(\n    magicSentientOptions,\n    numberOfSentientOptions,\n  );\n\n  let magicEncounters = Encounters.withTag(\"magic\", allEncounters);\n  magicEncounters = magicEncounters.concat(GenericEncounters.all());\n  let magicWeakEncounters = Encounters.belowThreatLevel(3, magicEncounters);\n  let magicStrongEncounters = Encounters.inThreatLevelRange(3, 4, magicEncounters);\n  let magicBossEncounters = Encounters.withThreatLevel(5, magicEncounters);\n\n  let magicNameGen = new MUN.GenericNameGenerator();\n  let m1 = [`LABORATORY`, `LAIR`, `DOMAIN`, `DOMINION`];\n  let m2 = [\"MAD\", \"DREAD\", \"DARK\", \"CRAZED\", \"RECLUSIVE\", \"DOOMED\", \"CURSED\"];\n  let m3 = [\"ARCHMAGE\", \"SORCERER\", \"WIZARD\", \"WITCH\", \"WARLOCK\"];\n\n  for (let i = 0; i < m1.length; i++) {\n    for (let j = 0; j < m2.length; j++) {\n      for (let k = 0; k < m3.length; k++) {\n        magicNameGen.patterns.push(`THE ${m1[i]} OF THE ${m2[j]} ${m3[k]}`);\n      }\n    }\n  }\n\n  const allRoomThemes = RoomThemes.all();\n  const dungeonRoomThemes = RoomThemes.byTag(\"dungeon\", allRoomThemes);\n\n  let mageRoomThemes = RoomThemes.byTag(\"mage\", allRoomThemes);\n  mageRoomThemes = mageRoomThemes.concat(dungeonRoomThemes);\n\n  return new DungeonTheme(\n    \"mage lair\",\n    \"forest\",\n    magicNameGen,\n    magicWeakEncounters,\n    magicStrongEncounters,\n    magicBossEncounters,\n    magicSentientOptions,\n    [\"stone tile\", \"marble\"],\n    mageRoomThemes,\n    [],\n  );\n}\n","import * as GenericEncounters from \"$lib/encounters/templates/fantasy/generic_dungeon.js\";\nimport * as UndeadEncounters from \"$lib/encounters/templates/fantasy/undead.js\";\nimport * as Encounters from \"$lib/encounters/templates/templates.js\";\nimport * as CommonSpecies from \"$lib/species/common.js\";\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport random from \"random\";\nimport DungeonTheme from \"../dungeon_theme.js\";\nimport * as RoomThemes from \"../rooms/themes/themes.js\";\n\nexport function getTheme(): DungeonTheme {\n  let allSentientOptions = CommonSpecies.sentient();\n  allSentientOptions = CommonSpecies.withCreatureType(\"humanoid\", allSentientOptions);\n  let numberOfSentientOptions = random.int(1, 2);\n\n  let tombSentientOptions = CommonSpecies.byTag(\"martial\", allSentientOptions);\n  tombSentientOptions = CommonSpecies.randomUniqueSet(tombSentientOptions, numberOfSentientOptions);\n\n  let tombEncounters = GenericEncounters.all();\n  tombEncounters = tombEncounters.concat(UndeadEncounters.all());\n\n  let tombWeakEncounters = Encounters.belowThreatLevel(2, tombEncounters);\n  let tombStrongEncounters = Encounters.inThreatLevelRange(3, 4, tombEncounters);\n  let tombBossEncounters = Encounters.withThreatLevel(5, tombEncounters);\n\n  let tombNameGen = new MUN.GenericNameGenerator();\n  let t1 = [\"TOMB\", \"CRYPT\", \"CATACOMBS\", \"MAUSOLEUM\", \"BARROWS\"];\n  let t2 = [\n    `THE DAMNED`,\n    `THE FORGOTTEN`,\n    `THE LOST`,\n    `WAKING NIGHTMARES`,\n    `FORGOTTEN SOULS`,\n    `LOST SOULS`,\n  ];\n  for (let i = 0; i < t1.length; i++) {\n    for (let j = 0; j < t2.length; j++) {\n      tombNameGen.patterns.push(`THE ${t1[i]} OF ${t2[j]}`);\n    }\n  }\n\n  const allRoomThemes = RoomThemes.all();\n  const dungeonRoomThemes = RoomThemes.byTag(\"dungeon\", allRoomThemes);\n\n  let tombRoomThemes = RoomThemes.byTag(\"tomb\", allRoomThemes);\n  tombRoomThemes = tombRoomThemes.concat(dungeonRoomThemes);\n\n  return new DungeonTheme(\n    \"tomb\",\n    \"hill\",\n    tombNameGen,\n    tombWeakEncounters,\n    tombStrongEncounters,\n    tombBossEncounters,\n    tombSentientOptions,\n    [\"stone tile\"],\n    tombRoomThemes,\n    [],\n  );\n}\n","import type DungeonTheme from \"../dungeon_theme.js\";\nimport * as Cult from \"./cult.js\";\nimport * as Fortress from \"./fortress.js\";\nimport * as MageLair from \"./mage_lair.js\";\nimport * as Tomb from \"./tomb.js\";\n\nexport function all(): DungeonTheme[] {\n  let result = [];\n\n  result.push(Cult.getTheme());\n  result.push(Fortress.getTheme());\n  result.push(MageLair.getTheme());\n  result.push(Tomb.getTheme());\n\n  return result;\n}\n","import type TreasureGenerator from \"./treasuregenerator.js\";\n\nexport default class TreasureTableEntry {\n  commonality: number;\n  generator: TreasureGenerator;\n\n  constructor(commonality: number, generator: TreasureGenerator) {\n    this.commonality = commonality;\n    this.generator = generator;\n  }\n}\n","import TreasureTableEntry from \"./tableentry.js\";\n\nexport default class TreasureTable {\n  entries: TreasureTableEntry[];\n\n  constructor(entries: TreasureTableEntry[]) {\n    this.entries = entries;\n  }\n}\n","import TreasureTable from \"./table.js\";\n\nexport default class TreasureGeneratorConfig {\n  tables: TreasureTable[];\n\n  constructor() {\n    this.tables = [];\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport type Item from \"../../equipment/item.js\";\nimport TreasureGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class TreasureResultGenerator {\n  config: TreasureGeneratorConfig;\n\n  constructor(config: TreasureGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Item[] {\n    let result: Item[] = [];\n\n    for (const table of this.config.tables) {\n      let possibleItems = table.entries;\n\n      let t = RND.weighted(possibleItems);\n      let gen = t.generator;\n      let items = gen.generate();\n\n      result = result.concat(items);\n    }\n\n    return result;\n  }\n}\n","import type Item from \"../../equipment/item.js\";\n\nexport default class Key implements Item {\n  name: string;\n  description: string;\n  value: number;\n  lockId: string;\n  quality: number;\n  tags: string[];\n}\n","import type Item from \"../../equipment/item.js\";\n\nexport default class ArtObject implements Item {\n  name: string;\n  description: string;\n  value: number;\n  quality: number;\n  tags: string[];\n\n  constructor() {\n    this.name = \"an art object\";\n    this.description = \"an art object\";\n    this.value = 10;\n    this.quality = 2;\n    this.tags = [\"art object\"];\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport * as Currency from \"../../currency/currency.js\";\nimport ArtObject from \"./artobject.js\";\nimport type TreasureGenerator from \"./treasuregenerator.js\";\n\nexport default class ArtObjectGenerator implements TreasureGenerator {\n  minValue: number;\n  maxValue: number;\n  count: number;\n\n  constructor(min: number, max: number, count: number) {\n    this.minValue = min;\n    this.maxValue = max;\n    this.count = count;\n  }\n\n  generate(): ArtObject[] {\n    let objects = [];\n\n    for (let i = 0; i < this.count; i++) {\n      let object = new ArtObject();\n\n      object.value = random.int(this.minValue, this.maxValue);\n      object.name = getArtObjectForValue(this.minValue, this.maxValue);\n\n      let worth = Currency.valueToCoins(object.value, false, false, false);\n\n      object.description = `${Words.article(object.name)} ${object.name} worth ${worth}`;\n\n      objects.push(object);\n    }\n\n    return objects;\n  }\n}\n\nfunction getArtObjectForValue(minValue: number, maxValue: number): string {\n  const allOptions = getArtObjects();\n\n  let options = [];\n\n  for (let i = 0; i < allOptions.length; i++) {\n    if (allOptions[i].value >= minValue && allOptions[i].value <= maxValue) {\n      options.push(allOptions[i].name);\n    }\n  }\n\n  return RND.item(options);\n}\n\nfunction getArtObjects(): { name: string; value: number }[] {\n  return [\n    {\n      name: \"silver ewer\",\n      value: 2500,\n    },\n    {\n      name: \"carved bone statuette\",\n      value: 2500,\n    },\n    {\n      name: \"small gold bracelet\",\n      value: 2500,\n    },\n    {\n      name: \"cloth-of-gold vestments\",\n      value: 2500,\n    },\n    {\n      name: \"black velvet mask stitched with silver thread\",\n      value: 2500,\n    },\n    {\n      name: \"copper chalice with silver filigree\",\n      value: 2500,\n    },\n    {\n      name: \"pair of engraved bone dice\",\n      value: 2500,\n    },\n    {\n      name: \"small mirror set in a painted wood frame\",\n      value: 2500,\n    },\n    {\n      name: \"embroidered silk handkerchief\",\n      value: 2500,\n    },\n    {\n      name: \"gold locket with a painted portrait inside\",\n      value: 2500,\n    },\n    {\n      name: \"gold ring set with bloodstones\",\n      value: 25000,\n    },\n    {\n      name: \"carved ivory statuette\",\n      value: 25000,\n    },\n    {\n      name: \"large gold bracelet\",\n      value: 25000,\n    },\n    {\n      name: \"silver necklace with a gemstone pendant\",\n      value: 25000,\n    },\n    {\n      name: \"bronze crown\",\n      value: 25000,\n    },\n    {\n      name: \"silk robe with gold embroidery\",\n      value: 25000,\n    },\n    {\n      name: \"large well-made tapestry\",\n      value: 25000,\n    },\n    {\n      name: \"brass mug with jade inlay\",\n      value: 25000,\n    },\n    {\n      name: \"box of turquoise animal figurines\",\n      value: 25000,\n    },\n    {\n      name: \"gold bird cage with electrum filigree\",\n      value: 25000,\n    },\n    {\n      name: \"silver chalice set with moonstones\",\n      value: 75000,\n    },\n    {\n      name: \"silver-plated steel longsword with jet set in hilt\",\n      value: 75000,\n    },\n    {\n      name: \"carved harp of exotic wood with ivory inlay and zircon gems\",\n      value: 75000,\n    },\n    {\n      name: \"small gold idol\",\n      value: 75000,\n    },\n    {\n      name: \"gold dragon comb set with red garnets as eyes\",\n      value: 75000,\n    },\n    {\n      name: \"bottle stopper cork embossed with gold leaf and set with amethysts\",\n      value: 75000,\n    },\n    {\n      name: \"ceremonial electrum dagger with a black pearl in the pommel\",\n      value: 75000,\n    },\n    {\n      name: \"silver and gold brooch\",\n      value: 75000,\n    },\n    {\n      name: \"obsidian statuette with gold fittings and inlay\",\n      value: 75000,\n    },\n    {\n      name: \"painted gold war mask\",\n      value: 75000,\n    },\n    {\n      name: \"fine gold chain set with a fire opal\",\n      value: 250000,\n    },\n    {\n      name: \"old masterpiece painting\",\n      value: 250000,\n    },\n    {\n      name: \"embroidered silk and velvet mantle set with numerous moonstones\",\n      value: 250000,\n    },\n    {\n      name: \"platinum bracelet set with a sapphire\",\n      value: 250000,\n    },\n    {\n      name: \"embroidered glove set with jewel chips\",\n      value: 250000,\n    },\n    {\n      name: \"jeweled anklet\",\n      value: 250000,\n    },\n    {\n      name: \"gold music box\",\n      value: 250000,\n    },\n    {\n      name: \"gold circlet set with four aquamarines\",\n      value: 250000,\n    },\n    {\n      name: \"eye patch with a mock eye set in blue sapphire and moonstone\",\n      value: 250000,\n    },\n    {\n      name: \"necklace string of small pink pearls\",\n      value: 250000,\n    },\n    {\n      name: \"jeweled gold crown\",\n      value: 750000,\n    },\n    {\n      name: \"jeweled platinum ring\",\n      value: 750000,\n    },\n    {\n      name: \"small gold stattuete set with rubies\",\n      value: 750000,\n    },\n    {\n      name: \"gold cup set with emeralds\",\n      value: 750000,\n    },\n    {\n      name: \"painted gold child's sarcophagus\",\n      value: 750000,\n    },\n    {\n      name: \"jade game board with solid gold playing pieces\",\n      value: 750000,\n    },\n    {\n      name: \"bejeweled ivory drinking horn with gold filigree\",\n      value: 750000,\n    },\n  ];\n}\n","import type Item from \"../../equipment/item.js\";\n\nexport default class BagOfCoins implements Item {\n  name: string;\n  description: string;\n  value: number;\n  quality: number;\n  tags: string[];\n\n  constructor() {\n    this.name = \"a bag of coins\";\n    this.description = \"a bag of coins\";\n    this.value = 10;\n    this.quality = 1;\n    this.tags = [\"bag of coins\"];\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport * as Dice from \"../../dice.js\";\nimport BagOfCoins from \"./bagofcoins.js\";\nimport type TreasureGenerator from \"./treasuregenerator.js\";\n\nexport default class CoinGenerator implements TreasureGenerator {\n  cp: string;\n  sp: string;\n  ep: string;\n  gp: string;\n  pp: string;\n\n  constructor(cp: string, sp: string, ep: string, gp: string, pp: string) {\n    this.cp = cp;\n    this.sp = sp;\n    this.ep = ep;\n    this.gp = gp;\n    this.pp = pp;\n  }\n\n  generate(): BagOfCoins[] {\n    let bag = new BagOfCoins();\n    let cp = 0;\n    let sp = 0;\n    let ep = 0;\n    let gp = 0;\n    let pp = 0;\n\n    if (this.cp != \"\") {\n      cp = Dice.roll(this.cp);\n    }\n\n    if (this.sp != \"\") {\n      sp = Dice.roll(this.sp);\n    }\n\n    if (this.ep != \"\") {\n      ep = Dice.roll(this.ep);\n    }\n\n    if (this.gp != \"\") {\n      gp = Dice.roll(this.gp);\n    }\n\n    if (this.pp != \"\") {\n      pp = Dice.roll(this.pp);\n    }\n\n    bag.value = cp + sp * 10 + ep * 50 + gp * 100 + pp * 1000;\n\n    let coinCount = cp + sp + ep + gp + pp;\n    let container = RND.item([\"bag\", \"pouch\", \"purse\"]);\n\n    // TODO: pull the container out into its own class, and have a library that generates an appropriate description\n    // maybe also figure out how to have multiple types of things in a container... perhaps treasure has a property\n    // like \"needsContainer\" and \"containerSize\" or something\n\n    if (coinCount > 1000) {\n      container = RND.item([\"chest\", \"large chest\"]);\n    } else if (coinCount > 250) {\n      container = RND.item([\"chest\", \"satchel\"]);\n    } else if (coinCount > 100) {\n      container = RND.item([\"sack\", \"box\"]);\n    }\n\n    bag.name = `a ${container} of coins`;\n\n    bag.description = \"a \" + container + \" of coins \" + RND.item([\"containing\", \"holding\", \"with\"]) + \" \";\n\n    let moneys = [];\n\n    if (cp > 0) {\n      moneys.push(`${new Intl.NumberFormat().format(cp)} cp`);\n    }\n\n    if (sp > 0) {\n      moneys.push(`${new Intl.NumberFormat().format(sp)} sp`);\n    }\n\n    if (ep > 0) {\n      moneys.push(`${new Intl.NumberFormat().format(ep)} ep`);\n    }\n\n    if (gp > 0) {\n      moneys.push(`${new Intl.NumberFormat().format(gp)} gp`);\n    }\n\n    if (pp > 0) {\n      moneys.push(`${new Intl.NumberFormat().format(pp)} pp`);\n    }\n\n    bag.description += Words.arrayToPhrase(moneys);\n\n    return [bag];\n  }\n}\n","import type Item from \"../../equipment/item.js\";\n\nexport default class Gem implements Item {\n  name: string;\n  description: string;\n  value: number;\n  quality: number;\n  tags: string[];\n\n  constructor() {\n    this.name = \"a gem\";\n    this.description = \"a gem\";\n    this.value = 10;\n    this.quality = 2;\n    this.tags = [\"gem\"];\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport * as Currency from \"../../currency/currency.js\";\nimport Gem from \"./gem.js\";\nimport type TreasureGenerator from \"./treasuregenerator.js\";\n\nexport default class GemGenerator implements TreasureGenerator {\n  minValue: number;\n  maxValue: number;\n  gemCount: number;\n\n  constructor(min: number, max: number, gemCount: number) {\n    this.minValue = min;\n    this.maxValue = max;\n    this.gemCount = gemCount;\n  }\n\n  generate(): Gem[] {\n    let gems = [];\n\n    for (let i = 0; i < this.gemCount; i++) {\n      let gem = new Gem();\n\n      gem.value = random.int(this.minValue, this.maxValue);\n\n      if (gem.value < 1100) {\n        gem.name = RND.item(getOrnamental());\n      } else if (gem.value < 8100) {\n        gem.name = RND.item(getSemiprecious());\n      } else if (gem.value < 15100) {\n        gem.name = RND.item(getFancy());\n      } else if (gem.value < 50100) {\n        gem.name = RND.item(getPrecious());\n      } else if (gem.value < 100100) {\n        gem.name = RND.item(getGemstones());\n      } else {\n        gem.name = RND.item(getJewels());\n      }\n\n      let worth = Currency.valueToCoins(gem.value, false, false, false);\n\n      gem.description = `${Words.article(gem.name)} ${gem.name} worth ${worth}`;\n\n      gems.push(gem);\n    }\n\n    return gems;\n  }\n}\n\nfunction getOrnamental(): string[] {\n  return [\n    \"banded agate\",\n    \"eye agate\",\n    \"moss agate\",\n    \"azurite\",\n    \"blue quartz\",\n    \"hematite\",\n    \"lapis lazuli\",\n    \"malachite\",\n    \"obsidian\",\n    \"rhodochrosite\",\n    \"tiger eye\",\n    \"turquoise\",\n    \"irregular freshwater pearl\",\n  ];\n}\n\nfunction getSemiprecious(): string[] {\n  return [\n    \"bloodstone\",\n    \"carnelian\",\n    \"chalcedony\",\n    \"chrysoprase\",\n    \"citrine\",\n    \"jasper\",\n    \"moonstone\",\n    \"onyx\",\n    \"quartz\",\n    \"sardonyx\",\n    \"star rose quartz\",\n    \"zircon\",\n  ];\n}\n\nfunction getFancy(): string[] {\n  return [\n    \"amber\",\n    \"amethyst\",\n    \"chrysoberyl\",\n    \"coral\",\n    \"garnet\",\n    \"jade\",\n    \"jet\",\n    \"pearl\",\n    \"spinel\",\n    \"tourmaline\",\n  ];\n}\n\nfunction getPrecious(): string[] {\n  return [\"alexandrite\", \"aquamarine\", \"black pearl\", \"blue spinel\", \"peridot\", \"topaz\"];\n}\n\nfunction getGemstones(): string[] {\n  return [\n    \"black opal\",\n    \"blue sapphire\",\n    \"emerald\",\n    \"fire opal\",\n    \"opal\",\n    \"star ruby\",\n    \"star sapphire\",\n    \"yellow sapphire\",\n  ];\n}\n\nfunction getJewels(): string[] {\n  return [\"black sapphire\", \"diamond\", \"jacinth\", \"ruby\"];\n}\n","import * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport * as Currency from \"../../currency/currency.js\";\nimport type Item from \"../../equipment/item.js\";\nimport ItemGenerator from \"../../equipment/itemgenerator.js\";\nimport ItemGeneratorConfig from \"../../equipment/itemgeneratorconfig.js\";\nimport * as Patterns from \"../../equipment/patterns/patterns.js\";\nimport type TreasureGenerator from \"./treasuregenerator.js\";\n\nexport default class MagicItemGenerator implements TreasureGenerator {\n  minValue: number;\n  maxValue: number;\n  count: number;\n\n  constructor(min: number, max: number, count: number) {\n    this.minValue = min;\n    this.maxValue = max;\n    this.count = count;\n  }\n\n  generate(): Item[] {\n    let items = [];\n    let possibleItems = Patterns.all();\n\n    for (let i = 0; i < this.count; i++) {\n      let itemGenConfig = new ItemGeneratorConfig();\n      itemGenConfig.pattern = RND.item(possibleItems);\n      itemGenConfig.useMutator = true;\n      itemGenConfig.minQuality = 2;\n      itemGenConfig.maxQuality = 5;\n      itemGenConfig.minValue = this.minValue;\n      itemGenConfig.maxValue = this.maxValue;\n      let itemGen = new ItemGenerator(itemGenConfig);\n      let item = itemGen.generate();\n\n      let worth = Currency.valueToCoins(item.value, false, false, false);\n\n      item.description = `${Words.article(item.name)} ${item.name} worth ${worth}`;\n\n      items.push(item);\n    }\n\n    return items;\n  }\n}\n","import * as Dice from \"../../../dice.js\";\nimport ArtObjectGenerator from \"../artobjectgenerator.js\";\nimport CoinGenerator from \"../coingenerator.js\";\nimport GemGenerator from \"../gemgenerator.js\";\nimport MagicItemGenerator from \"../magicitemgenerator.js\";\nimport TreasureTable from \"../table.js\";\nimport TreasureTableEntry from \"../tableentry.js\";\n\nexport function horde(): TreasureTable[] {\n  return [\n    new TreasureTable([\n      new TreasureTableEntry(30, new CoinGenerator(\"6d6x100\", \"3d6x100\", \"\", \"2d6x10\", \"\")),\n    ]),\n    new TreasureTable([\n      new TreasureTableEntry(8, new GemGenerator(900, 1000, Dice.roll(\"2d6\"))),\n      new TreasureTableEntry(12, new ArtObjectGenerator(1500, 3500, Dice.roll(\"2d4\"))),\n      new TreasureTableEntry(8, new GemGenerator(4500, 5000, Dice.roll(\"2d6\"))),\n    ]),\n  ];\n}\n\nexport function individual(): TreasureTable[] {\n  return [\n    new TreasureTable([\n      new TreasureTableEntry(30, new CoinGenerator(\"5d6\", \"\", \"\", \"\", \"\")),\n      new TreasureTableEntry(30, new CoinGenerator(\"\", \"4d6\", \"\", \"\", \"\")),\n      new TreasureTableEntry(10, new CoinGenerator(\"\", \"\", \"3d6\", \"\", \"\")),\n      new TreasureTableEntry(25, new CoinGenerator(\"\", \"\", \"\", \"3d6\", \"\")),\n      new TreasureTableEntry(5, new CoinGenerator(\"\", \"\", \"\", \"\", \"1d6\")),\n    ]),\n  ];\n}\n","import * as Dice from \"../../../dice.js\";\nimport ArtObjectGenerator from \"../artobjectgenerator.js\";\nimport CoinGenerator from \"../coingenerator.js\";\nimport GemGenerator from \"../gemgenerator.js\";\nimport MagicItemGenerator from \"../magicitemgenerator.js\";\nimport TreasureTable from \"../table.js\";\nimport TreasureTableEntry from \"../tableentry.js\";\n\nexport function horde(): TreasureTable[] {\n  return [\n    new TreasureTable([\n      new TreasureTableEntry(30, new CoinGenerator(\"\", \"\", \"\", \"4d6x1000\", \"5d6x100\")),\n    ]),\n    new TreasureTable([\n      new TreasureTableEntry(20, new ArtObjectGenerator(20000, 30000, Dice.roll(\"2d4\"))),\n      new TreasureTableEntry(30, new GemGenerator(45000, 50000, Dice.roll(\"3d6\"))),\n      new TreasureTableEntry(8, new GemGenerator(95000, 100000, Dice.roll(\"3d6\"))),\n      new TreasureTableEntry(10, new ArtObjectGenerator(70000, 80000, Dice.roll(\"2d4\"))),\n    ]),\n    new TreasureTable([\n      new TreasureTableEntry(5, new MagicItemGenerator(10000, 30000, Dice.roll(\"1d6\"))),\n    ]),\n  ];\n}\n\nexport function individual(): TreasureTable[] {\n  return [\n    new TreasureTable([\n      new TreasureTableEntry(20, new CoinGenerator(\"\", \"4d6x100\", \"\", \"1d6x100\", \"\")),\n      new TreasureTableEntry(15, new CoinGenerator(\"\", \"\", \"1d6x100\", \"1d6x100\", \"\")),\n      new TreasureTableEntry(40, new CoinGenerator(\"\", \"\", \"\", \"2d6x100\", \"1d6x10\")),\n      new TreasureTableEntry(25, new CoinGenerator(\"\", \"\", \"\", \"2d6x100\", \"2d6x10\")),\n    ]),\n  ];\n}\n","import * as Dice from \"../../../dice.js\";\nimport ArtObjectGenerator from \"../artobjectgenerator.js\";\nimport CoinGenerator from \"../coingenerator.js\";\nimport GemGenerator from \"../gemgenerator.js\";\nimport MagicItemGenerator from \"../magicitemgenerator.js\";\nimport TreasureTable from \"../table.js\";\nimport TreasureTableEntry from \"../tableentry.js\";\n\nexport function horde(): TreasureTable[] {\n  return [\n    new TreasureTable([\n      new TreasureTableEntry(30, new CoinGenerator(\"2d6x100\", \"2d6x1000\", \"\", \"6d6x100\", \"3d6x10\")),\n    ]),\n    new TreasureTable([\n      new TreasureTableEntry(20, new ArtObjectGenerator(1500, 3000, Dice.roll(\"2d4\"))),\n      new TreasureTableEntry(30, new GemGenerator(4500, 5000, Dice.roll(\"2d6\"))),\n      new TreasureTableEntry(8, new GemGenerator(9500, 10000, Dice.roll(\"3d6\"))),\n      new TreasureTableEntry(10, new ArtObjectGenerator(20000, 30000, Dice.roll(\"2d4\"))),\n    ]),\n  ];\n}\n\nexport function individual(): TreasureTable[] {\n  return [\n    new TreasureTable([\n      new TreasureTableEntry(30, new CoinGenerator(\"4d6x100\", \"\", \"1d6x10\", \"\", \"\")),\n      new TreasureTableEntry(30, new CoinGenerator(\"\", \"6d6x10\", \"\", \"2d6x10\", \"\")),\n      new TreasureTableEntry(10, new CoinGenerator(\"\", \"\", \"1d6x100\", \"2d6x10\", \"\")),\n      new TreasureTableEntry(25, new CoinGenerator(\"\", \"\", \"\", \"4d6x10\", \"\")),\n      new TreasureTableEntry(5, new CoinGenerator(\"\", \"\", \"\", \"2d6x10\", \"3d6\")),\n    ]),\n  ];\n}\n","import type Item from \"../equipment/item.js\";\n\nexport default class TreasureSpawn {\n  minRoom: number;\n  maxRoom: number;\n  treasure: Item[];\n  behavior: string;\n  value: number; // in copper coins\n  isCarried: boolean;\n  isHidden: boolean;\n\n  constructor() {\n    this.minRoom = -1;\n    this.maxRoom = -1;\n    this.value = 1;\n    this.treasure = [];\n    this.isCarried = false;\n    this.isHidden = false;\n  }\n}\n","import type Encounter from \"$lib/encounters/encounter\";\nimport * as Encounters from \"$lib/encounters/encounters\";\nimport type Biome from \"$lib/environment/biomes/biome\";\nimport * as Biomes from \"$lib/environment/biomes/biomes\";\nimport * as Climates from \"$lib/environment/climates/climates\";\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport * as Doors from \"./doors\";\nimport type Dungeon from \"./dungeon\";\nimport type DungeonGeneratorConfig from \"./dungeon_generator_config\";\nimport type EncounterSpawn from \"./encounter_spawn\";\nimport * as Mutators from \"./rooms/mutators/mutators\";\nimport type Room from \"./rooms/room\";\nimport RoomGenerator from \"./rooms/roomgenerator\";\nimport RoomGeneratorConfig from \"./rooms/roomgeneratorconfig\";\nimport * as Rooms from \"./rooms/rooms\";\nimport * as RoomThemes from \"./rooms/themes/themes\";\nimport * as DungeonThemes from \"./themes/themes\";\nimport * as Tiles from \"./tiles\";\nimport TreasureResultGenerator from \"./treasure/generator\";\nimport TreasureGeneratorConfig from \"./treasure/generatorconfig\";\nimport Key from \"./treasure/key\";\nimport * as CommonTables from \"./treasure/tables/common\";\nimport * as RareTables from \"./treasure/tables/rare\";\nimport * as UncommonTables from \"./treasure/tables/uncommon\";\nimport TreasureSpawn from \"./treasurespawn\";\n\nexport function generate(config: DungeonGeneratorConfig): Dungeon {\n  let themeOptions = DungeonThemes.all();\n  let theme = RND.item(themeOptions);\n\n  let dungeon: Dungeon = {\n    environment: \"\",\n    name: \"\",\n    description: \"\",\n    theme: theme,\n    rooms: [],\n    doors: [],\n    tiles: [],\n    totalThreatLevel: 0,\n    averageThreatLevel: 0,\n  };\n  dungeon.environment = RND.item([\n    \"arctic\",\n    \"coastal\",\n    \"desert\",\n    \"forest\",\n    \"grassland\",\n    \"hill\",\n    \"mountain\",\n    \"urban\",\n    \"underdark\",\n  ]);\n  dungeon.tiles = initializeTiles(config.width, config.height);\n\n  dungeon.name = dungeon.theme.nameGenerator.generate(1)[0];\n\n  dungeon = generateEntrance(dungeon, config.width, config.height);\n\n  let numRooms = random.int(config.minRooms, config.maxRooms);\n  dungeon = generateRooms(dungeon, numRooms, config.width, config.height);\n\n  for (let i = 0; i < 2; i++) {\n    dungeon = Doors.addDoorsToDungeon(dungeon);\n  }\n\n  dungeon = addLight(dungeon);\n\n  let keySpawns = generateKeySpawns(dungeon);\n\n  // TODO: generate trap spawns\n  // trap spawns have a type, a min and max room for location, and a potential treasure spawn\n  // note that trap spawns can target doors or features\n\n  let encounterSpawns = [];\n  let numberOfEncounters = 0;\n\n  for (let i = 1; i < dungeon.rooms.length; i++) {\n    let encounterChance = RND.simple(100);\n    let encounterType = \"none\";\n    if (i == dungeon.rooms.length - 1) {\n      encounterType = \"boss\";\n    } else if (encounterChance > 90) {\n      encounterType = \"strong\";\n    } else if (encounterChance > 30) {\n      encounterType = \"weak\";\n    }\n\n    if (encounterType != \"none\") {\n      let spawn = generateEncounterSpawn(dungeon, encounterType, i);\n      encounterSpawns.push(spawn);\n      numberOfEncounters++;\n    }\n  }\n\n  let treasureSpawns = generateTreasureHordes(dungeon);\n\n  dungeon = generateEncounters(dungeon, encounterSpawns);\n  dungeon = generateKeys(dungeon, keySpawns);\n  dungeon = generateTreasure(dungeon, treasureSpawns);\n\n  dungeon.averageThreatLevel = Math.floor(dungeon.totalThreatLevel / numberOfEncounters);\n\n  return dungeon;\n}\n\nexport function getDefaultConfig(): DungeonGeneratorConfig {\n  let climate = RND.item(Climates.all());\n  let biomeGenConfig = Biomes.getDefaultConfig();\n  biomeGenConfig.climate = climate;\n\n  let biomes: Biome[] = [];\n  for (let i = 0; i < 5; i++) {\n    biomeGenConfig.climate = RND.item(Climates.all());\n    biomes.push(Biomes.generate(biomeGenConfig));\n  }\n\n  return {\n    width: 40,\n    height: 50,\n    maxRooms: 30,\n    minRooms: 20,\n    minThreatLevel: 0,\n    maxThreatLevel: 5,\n    possibleBiomes: biomes,\n  };\n}\n\nfunction addLight(dungeon: Dungeon): Dungeon {\n  let allMutators = Mutators.all();\n  let lights = Mutators.withTag(\"light\", allMutators);\n\n  for (let i = 0; i < dungeon.rooms.length; i++) {\n    if (RND.simple(100) > 60) {\n      let lightMutator = RND.item(lights);\n      dungeon.rooms[i] = lightMutator.mutate(dungeon.rooms[i]);\n    }\n  }\n\n  return dungeon;\n}\n\nfunction addRoomToTiles(room: Room, tiles: number[][]): number[][] {\n  for (let i = 0; i < room.vertices.length; i++) {\n    tiles[room.vertices[i].y][room.vertices[i].x] = Tiles.ROOM;\n  }\n\n  return tiles;\n}\n\nfunction generateEncounters(dungeon: Dungeon, encounterSpawns: EncounterSpawn[]): Dungeon {\n  for (let i = 0; i < encounterSpawns.length; i++) {\n    let maxRoom = encounterSpawns[i].maxRoom;\n    if (maxRoom == -1) {\n      maxRoom = dungeon.rooms.length - 1;\n    }\n    let minRoom = encounterSpawns[i].minRoom;\n    let roomId = random.int(minRoom, maxRoom);\n\n    let eGenConfig = encounterSpawns[i].encounterConfig;\n\n    let encounter: Encounter = Encounters.generate(eGenConfig);\n\n    dungeon.rooms[roomId].encounters.push(encounter);\n    dungeon.totalThreatLevel += encounter.totalThreatLevel;\n\n    if (encounterSpawns[i].treasureSpawns.length > 0) {\n      for (let j = 0; j < encounterSpawns[i].treasureSpawns.length; j++) {\n        let ts = encounterSpawns[i].treasureSpawns[j];\n        for (let k = 0; k < encounter.groups.length; k++) {\n          for (let l = 0; l < encounter.groups[k].mobs.length; l++) {\n            if (RND.simple(100) > 50) {\n              encounter.groups[k].mobs[l].carried.push(RND.item(ts.treasure));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return dungeon;\n}\n\nfunction generateEncounterSpawn(\n  dungeon: Dungeon,\n  encounterType: string,\n  roomId: number,\n): EncounterSpawn {\n  let config = Encounters.getDefaultConfig();\n  config.environment = dungeon.environment;\n  config.sentientOptions = dungeon.theme.sentientOptions;\n  let treasureTables = CommonTables.individual();\n\n  if (encounterType == \"boss\") {\n    config.template = RND.weighted(dungeon.theme.bossEncounterTemplates);\n    config.minThreatLevel = 3;\n    config.maxThreatLevel = 10;\n    treasureTables = RareTables.individual();\n  } else if (encounterType == \"strong\") {\n    config.template = RND.weighted(dungeon.theme.strongEncounterTemplates);\n    treasureTables = UncommonTables.individual();\n  } else {\n    config.template = RND.weighted(dungeon.theme.weakEncounterTemplates);\n  }\n\n  let spawn: EncounterSpawn = { minRoom: roomId, maxRoom: roomId, encounterConfig: config, treasureSpawns: [] };\n\n  let addTreasureToEncounter = false;\n\n  if (spawn.encounterConfig.template === null) {\n    throw new Error(\"Encounter template is null\");\n  }\n\n  for (let j = 0; j < spawn.encounterConfig.template.groupTemplates.length; j++) {\n    if (spawn.encounterConfig.template.groupTemplates[j].isSentient) {\n      addTreasureToEncounter = true;\n    }\n  }\n\n  let treasureConfig = new TreasureGeneratorConfig();\n  treasureConfig.tables = treasureTables;\n  let treasureGen = new TreasureResultGenerator(treasureConfig);\n  let treasure = treasureGen.generate();\n  let ts = new TreasureSpawn();\n  ts.treasure = ts.treasure.concat(treasure);\n  if (addTreasureToEncounter) {\n    spawn.treasureSpawns.push(ts);\n  }\n\n  return spawn;\n}\n\nfunction generateEntrance(dungeon: Dungeon, mapWidth: number, mapHeight: number): Dungeon {\n  let entranceTheme = RoomThemes.getEntrance();\n  entranceTheme.flooringOptions = dungeon.theme.flooringOptions;\n  let roomGenConfig = new RoomGeneratorConfig(mapWidth, mapHeight, entranceTheme);\n\n  let roomGen = new RoomGenerator(roomGenConfig);\n\n  let firstRoom = roomGen.generate();\n  firstRoom.id = 0;\n\n  dungeon.rooms.push(firstRoom);\n  dungeon.tiles = addRoomToTiles(firstRoom, dungeon.tiles);\n\n  return dungeon;\n}\n\nfunction generateKeySpawns(dungeon: Dungeon): TreasureSpawn[] {\n  let keySpawns: TreasureSpawn[] = [];\n\n  for (let i = 0; i < dungeon.doors.length; i++) {\n    if (dungeon.doors[i].lock !== null) {\n      let keySpawn = new TreasureSpawn();\n      keySpawn.behavior = `This key unlocks the door between room ${dungeon.doors[i].room1 + 1} and room ${\n        dungeon.doors[i].room2 + 1\n      } in ${dungeon.name}.`;\n      keySpawn.minRoom = 0;\n      keySpawn.maxRoom = dungeon.doors[i].room1;\n      let key = new Key();\n      key.name = \"a key\";\n      let lock = dungeon.doors[i].lock;\n      if (lock === null) {\n        throw new Error(\"Door has no lock but expected one\");\n      }\n      key.lockId = lock.id;\n\n      let keyDescription = RND.item([\n        `a ${RND.item([\"simple\", \"plain\", \"rough\"])} key`,\n        `a ${RND.item([\"small\", \"ornate\", \"shiny\", \"tarnished\"])} key`,\n      ]);\n      key.description = `${keyDescription} that unlocks the door between room ${dungeon.doors[i].room1 + 1} and room ${\n        dungeon.doors[i].room2 + 1\n      }`;\n      key.value = random.int(1, 10);\n      keySpawn.treasure.push(key);\n      keySpawns.push(keySpawn);\n    }\n  }\n\n  return keySpawns;\n}\n\nfunction generateKeys(dungeon: Dungeon, keySpawns: TreasureSpawn[]): Dungeon {\n  for (let i = 0; i < keySpawns.length; i++) {\n    let roomId = random.int(keySpawns[i].minRoom, keySpawns[i].maxRoom);\n    if (dungeon.rooms[roomId].encounters.length > 0) {\n      let e = RND.item(dungeon.rooms[roomId].encounters);\n      let m = RND.item(e.groups[0].mobs);\n      m.carried.push(keySpawns[i].treasure[0]);\n    } else {\n      dungeon.rooms[roomId].treasureCaches.push(keySpawns[i].treasure[0].description);\n    }\n  }\n\n  return dungeon;\n}\n\nfunction generateRooms(\n  dungeon: Dungeon,\n  numRooms: number,\n  mapWidth: number,\n  mapHeight: number,\n): Dungeon {\n  let id = 0;\n  let roomGeneration = true;\n  let failedIterations = 0;\n  let failedMax = 5;\n\n  for (let i = 0; i < dungeon.theme.requiredRooms.length; i++) {\n    let rr = dungeon.theme.requiredRooms[i];\n\n    let roomCount = random.int(rr.minCount, rr.maxCount);\n\n    for (let j = 0; j < roomCount; j++) {\n      let r = Rooms.getPlaceableRoom(mapWidth, mapHeight, rr.theme, dungeon.rooms);\n\n      if (r === null) {\n        console.debug(`Room broke`, rr, dungeon.theme.name);\n      } else {\n        id += 1;\n        r.id = id;\n\n        dungeon.rooms.push(r);\n        dungeon.tiles = addRoomToTiles(r, dungeon.tiles);\n      }\n    }\n  }\n\n  while (roomGeneration) {\n    if (dungeon.rooms.length >= numRooms) {\n      roomGeneration = false;\n    } else {\n      let roomTheme = RND.weighted(dungeon.theme.roomThemes);\n      if (roomTheme.environment == dungeon.theme.mainEnvironment) {\n        roomTheme.flooringOptions = dungeon.theme.flooringOptions;\n      }\n      let r = Rooms.getPlaceableRoom(mapWidth, mapHeight, roomTheme, dungeon.rooms);\n      if (r === null) {\n        failedIterations++;\n      } else {\n        id += 1;\n        r.id = id;\n\n        dungeon.rooms.push(r);\n        dungeon.tiles = addRoomToTiles(r, dungeon.tiles);\n      }\n\n      if (failedIterations > failedMax) {\n        roomGeneration = false;\n      }\n    }\n  }\n\n  return dungeon;\n}\n\nfunction generateTreasure(dungeon: Dungeon, treasureSpawns: TreasureSpawn[]): Dungeon {\n  for (let i = 0; i < treasureSpawns.length; i++) {\n    let maxRoom = treasureSpawns[i].maxRoom;\n    if (maxRoom == -1) {\n      maxRoom = dungeon.rooms.length - 1;\n    }\n    let minRoom = treasureSpawns[i].minRoom;\n    if (minRoom == -1) {\n      minRoom = 1;\n    }\n    let roomId = random.int(minRoom, maxRoom);\n\n    let descriptions = [];\n\n    for (const t of treasureSpawns[i].treasure) {\n      descriptions.push(t.description);\n    }\n\n    let treasureDescription = Words.arrayToPhrase(descriptions);\n\n    if (treasureSpawns[i].isHidden) {\n      treasureDescription += `, hidden somewhere in the room`;\n      dungeon.rooms[roomId].treasureCaches.push(treasureDescription);\n    } else if (treasureSpawns[i].isCarried) {\n      let te = RND.item(dungeon.rooms[roomId].encounters);\n      let mob = RND.item(te.groups[0].mobs);\n      mob.carried.push(treasureDescription);\n    } else {\n      let containers = [];\n      for (let i = 0; i < dungeon.rooms[roomId].features.length; i++) {\n        if (dungeon.rooms[roomId].features[i].isContainer) {\n          containers.push(i);\n        }\n      }\n      if (containers.length > 0) {\n        if (RND.simple(100) > 10) {\n          treasureDescription += \", inside \" + dungeon.rooms[roomId].features[RND.item(containers)].name;\n        }\n        dungeon.rooms[roomId].treasureCaches.push(treasureDescription);\n      } else {\n        dungeon.rooms[roomId].treasureCaches.push(treasureDescription);\n      }\n    }\n  }\n\n  return dungeon;\n}\n\nfunction generateTreasureHordes(dungeon: Dungeon): TreasureSpawn[] {\n  let hordeChance = 100;\n  let treasureSpawns = [];\n  let commonHordeTables = CommonTables.horde();\n  let bossHordeTables = RareTables.horde();\n\n  for (let i = 1; i < dungeon.rooms.length; i++) {\n    // Chance of a treasure horde - increases the higher the room number, but decreases after each horde\n    if (RND.simple(100) > hordeChance) {\n      let hordeConfig = new TreasureGeneratorConfig();\n      hordeConfig.tables = commonHordeTables;\n      if (i == dungeon.rooms.length - 1) {\n        hordeConfig.tables = bossHordeTables;\n      }\n      let treasureGen = new TreasureResultGenerator(hordeConfig);\n      let treasure = treasureGen.generate();\n      let horde = new TreasureSpawn();\n      horde.treasure = horde.treasure.concat(treasure);\n\n      treasureSpawns.push(horde);\n      hordeChance = 100;\n    } else {\n      hordeChance -= 2;\n    }\n  }\n\n  return treasureSpawns;\n}\n\nfunction initializeTiles(width: number, height: number): number[][] {\n  let v: number[][] = [];\n\n  for (let y = 0; y < height; y++) {\n    let row: number[] = [];\n    v[y] = row;\n    for (let x = 0; x < width; x++) {\n      v[y][x] = Tiles.STONE;\n    }\n  }\n\n  return v;\n}\n","<script lang=\"ts\">\n  import * as Currency from \"$lib/currency/currency\";\n  import * as RND from \"@ironarachne/rng\";\n  import * as Words from '@ironarachne/words';\n  import random from \"random\";\n  import seedrandom from \"seedrandom\";\n  import * as Dungeons from \"$lib/dungeon/dungeons\";\n  import DungeonTileRenderer from \"$lib/dungeon/tilerenderer\";\n  import { onMount } from \"svelte\";\n\n  let seed = RND.randomString(13);\n\n  let canvas: HTMLCanvasElement;\n  let minRooms = 20;\n  let maxRooms = 30;\n\n  let config = Dungeons.getDefaultConfig();\n  config.minRooms = minRooms;\n  config.maxRooms = maxRooms;\n  let dungeon = Dungeons.generate(config);\n  let renderer = new DungeonTileRenderer(800, 1000, config.height, config.width);\n\n  function generate() {\n    random.use(seedrandom(seed));\n\n    config.minRooms = minRooms;\n    config.maxRooms = maxRooms;\n\n    dungeon = Dungeons.generate(config);\n    renderer.render(dungeon, canvas);\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  onMount(() => {\n    canvas = <HTMLCanvasElement> document.getElementById('mapCanvas');\n    newSeed();\n  });\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/fantasy.scss';\n\n  div.mobs {\n    display: block;\n    padding: 0;\n    margin: 0;\n  }\n\n  div.mob {\n    border: 1px solid black;\n    padding: 0.5rem;\n    margin: 0.5rem;\n  }\n\n  div.mob > h4 {\n    display: block;\n    font-size: 1rem;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    border-bottom: 1px solid black;\n  }\n\n  div.room-description {\n    border: 3px solid black;\n    padding: 0.5rem;\n    margin: 0.5rem;\n  }\n\n  div.room-secrets {\n    padding: 0.5rem;\n  }\n</style>\n\n<svelte:head>\n  <title>Dungeon Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"fantasy main\">\n  <h1>Dungeon Generator</h1>\n\n  <p>A dungeon generator.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\"/>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"minRooms\">Min. Rooms</label>\n    <input type=\"number\" name=\"minRooms\" bind:value={minRooms} id=\"minRooms\"/>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"maxRooms\">Max. Rooms</label>\n    <input type=\"number\" name=\"maxRooms\" bind:value={maxRooms} id=\"maxRooms\"/>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <h2>{dungeon.name}</h2>\n\n  <p><strong>Environment:</strong> {dungeon.environment}</p>\n  <p><strong>Total Threat Level:</strong> {dungeon.totalThreatLevel}</p>\n  <p><strong>Average Threat Level:</strong> {dungeon.averageThreatLevel}</p>\n\n  <canvas id=\"mapCanvas\" width=\"800\" height=\"1000\"></canvas>\n\n  {#each dungeon.rooms as room }\n  <div class=\"room\">\n    <h3>{room.id + 1}. {Words.title(room.name)}</h3>\n    {#if room.lightLevel == 0}<p>This room is dark.</p>{/if}\n    <div class=\"room-description\">\n      {room.description}\n      {#each room.features as feature}\n      {feature.description + ' '}\n      {/each}\n    </div>\n    {#if room.secrets != ''}\n    <div class=\"room-secrets\">\n      {room.secrets}\n    </div>\n    {/if}\n    <div class=\"encounter\">\n      {#each room.encounters as encounter}\n        {#each encounter.groups as group}\n        <p>There {#if group.mobs.length > 1}are {group.mobs.length}{:else}is {Words.article(group.name)}{/if} {group.name} here.</p>\n        <div class=\"mobs\">\n          {#each group.mobs as mob}\n          <div class=\"mob\">\n            <h4>{mob.name}, {mob.summary} (TL {mob.threatLevel})</h4>\n            {#if mob.abilities.length > 0}\n            <p>Abilities:</p>\n            <ul>\n              {#each mob.abilities as ability}\n              <li><strong>{ability.name}:</strong> {ability.description}</li>\n              {/each}\n            </ul>\n            {/if}\n            {#if mob.carried.length > 0}\n            <p>Carrying the following:</p>\n            <ul>\n              {#each mob.carried as item}\n              <li>{item.description}, worth {Currency.valueToCoins(item.value, false, false, false)}</li>\n              {/each}\n            </ul>\n            {/if}\n          </div>\n          {/each}\n        </div>\n        {/each}\n      {/each}\n    </div>\n    {#if room.treasureCaches.length > 0}\n    <div class=\"treasure\">\n      <h4>Treasure</h4>\n      <ul>\n        {#each room.treasureCaches as cache}\n        <li>{cache}</li>\n        {/each}\n      </ul>\n    </div>\n    {/if}\n  </div>\n  {/each}\n</section>\n"],"names":["generate","AgeCategories.randomWeighted","SizeMatrix.getSizeConfig","CommonSpecies.randomTraits","CommonSpecies.getSkeletonVariants","CommonSpecies.getVampireVariants","CommonSpecies.getZombieVariants","Creatures.newCreatureGeneratorConfig","Creatures.generate","PremadeConfigs.getFantasy","Characters.generate","Characters.getTotalThreatLevel","getDefaultConfig","CommonSpecies.sentient","CommonSpecies.withoutTag","all","Geometry.edgesFromVertices","Tiles.STONE","Tiles.ROOM","Geometry.vertexEquals","Geometry.vertexIn","distance","Geometry.distance","Geometry.getMidpoint","Geometry.getSlope","Tiles.H_DOOR","Tiles.V_DOOR","Tiles.H_S_DOOR","Tiles.V_S_DOOR","Rooms.getNeighboringRooms","withTag","Dungeon.all","BladedWeapons.all","Components.withMaxQuality","Components.withMinQuality","Mutators.withAnyTag","Components.all","Mutators.all","Patterns.byName","Patterns.forCategory","ItemGenerators.getItemGeneratorByTag","ItemGenerators.getItemGenerator","Cleric.all","Cult.all","Mage.all","Martial.all","Undead.all","withAnyTag","withCreatureType","Mobs.hasAllTagsIn","Mobs.hasAnyTagIn","Mobs.hasCreatureType","Mobs.hasEnvironment","Mobs.hasNoTagIn","FantasyArchetypes.all","Archetypes.byName","Bandits.all","GenericDungeon.all","Magic.all","Wilderness.all","getTheme","FantasyEncounters.all","CommonSpecies.withCreatureType","Encounters.withTag","Encounters.belowThreatLevel","Encounters.inThreatLevelRange","Encounters.withThreatLevel","CommonSpecies.byTag","CommonSpecies.randomUniqueSet","RoomThemes.all","RoomThemes.byName","RoomThemes.byTag","GenericEncounters.all","UndeadEncounters.all","Cult.getTheme","Fortress.getTheme","MageLair.getTheme","Tomb.getTheme","Currency.valueToCoins","Dice.roll","Patterns.all","horde","individual","DungeonThemes.all","Doors.addDoorsToDungeon","Climates.all","Biomes.getDefaultConfig","Biomes.generate","Mutators.withTag","Encounters.generate","Encounters.getDefaultConfig","CommonTables.individual","RareTables.individual","UncommonTables.individual","RoomThemes.getEntrance","Rooms.getPlaceableRoom","CommonTables.horde","RareTables.horde","Dungeons.getDefaultConfig","Dungeons.generate"],"mappings":"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T;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IACT;AAAA,MACA,MAAA;AAAA,MACQ,OAAA;AAAA,IACC;AAAA,IAC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"}