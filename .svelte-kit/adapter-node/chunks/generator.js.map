{"version":3,"file":"generator.js","sources":["../../../../src/lib/religion/categories/category.ts","../../../../src/lib/religion/categories/monotheism.ts","../../../../src/lib/religion/categories/polytheism.ts","../../../../src/lib/religion/categories/shamanism.ts","../../../../src/lib/religion/categories/categories.ts","../../../../src/lib/religion/generatorconfig.ts","../../../../src/lib/relationships/relationship.ts","../../../../src/lib/relationships/generator.ts","../../../../src/lib/religion/domains/domainset.ts","../../../../src/lib/religion/realms/realm.ts","../../../../src/lib/religion/deities/deity.ts","../../../../src/lib/religion/deities/generatorconfig.ts","../../../../src/lib/religion/deities/generator.ts","../../../../src/lib/religion/domains/generatorconfig.ts","../../../../src/lib/religion/domains/generator.ts","../../../../src/lib/religion/pantheons/generatorconfig.ts","../../../../src/lib/religion/pantheons/pantheonmember.ts","../../../../src/lib/religion/pantheons/pantheon.ts","../../../../src/lib/religion/pantheons/generator.ts","../../../../src/lib/appearance.ts","../../../../src/lib/religion/realms/realmconcept.ts","../../../../src/lib/religion/appearancetraits.ts","../../../../src/lib/religion/realms/generatorconfig.ts","../../../../src/lib/religion/realms/realmconcepts.ts","../../../../src/lib/religion/realms/generator.ts","../../../../src/lib/religion/religion.ts","../../../../src/lib/religion/generator.ts"],"sourcesContent":["\"use strict\";\n\nexport default class ReligionCategory {\n  name: string;\n  description: string;\n  hasDeities: boolean;\n  hasLeader: boolean;\n  minDeities: number;\n  maxDeities: number;\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.hasDeities = false;\n    this.hasLeader = false;\n    this.minDeities = 0;\n    this.maxDeities = 0;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport ReligionCategory from \"./category.js\";\n\nexport default class Monotheism extends ReligionCategory {\n  constructor() {\n    super();\n    this.name = \"monotheism\";\n    this.description = \"This religion \" + RND.item([\"has a single all-powerful god\", \"is monotheistic\"]) + \".\";\n    this.hasDeities = true;\n    this.minDeities = 1;\n    this.maxDeities = 1;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport ReligionCategory from \"./category.js\";\n\nexport default class Polytheism extends ReligionCategory {\n  constructor() {\n    super();\n    this.name = \"polytheism\";\n    this.description = \"This religion \" + RND.item([\"has several gods\", \"is polytheistic\"]) + \".\";\n    this.hasDeities = true;\n    this.hasLeader = true;\n    this.minDeities = 2;\n    this.maxDeities = 16;\n  }\n}\n","\"use strict\";\n\nimport ReligionCategory from \"./category.js\";\n\nexport default class Shamanism extends ReligionCategory {\n  constructor() {\n    super();\n    this.name = \"shamanism\";\n    this.description = \"This religion is shamanistic.\";\n  }\n}\n","\"use strict\";\n\nimport ReligionCategory from \"./category.js\";\nimport Monotheism from \"./monotheism.js\";\nimport Polytheism from \"./polytheism.js\";\nimport Shamanism from \"./shamanism.js\";\n\nexport function all(): ReligionCategory[] {\n  return [new Monotheism(), new Polytheism(), new Shamanism()];\n}\n","\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport * as Categories from \"./categories/categories.js\";\nimport ReligionCategory from \"./categories/category.js\";\n\nexport default class ReligionGeneratorConfig {\n  categories: ReligionCategory[];\n  nameGenerator: MUN.Generator;\n  femaleNameGenerator: MUN.Generator;\n  maleNameGenerator: MUN.Generator;\n\n  constructor() {\n    this.categories = Categories.all();\n\n    let genSet = new MUN.HumanSet();\n\n    if (genSet.family === null) {\n      throw new Error(\"No family name generator found.\");\n    } else if (genSet.female === null) {\n      throw new Error(\"No female name generator found\");\n    } else if (genSet.male === null) {\n      throw new Error(\"No male name generator found\");\n    }\n\n    this.nameGenerator = genSet.family;\n    this.femaleNameGenerator = genSet.female;\n    this.maleNameGenerator = genSet.male;\n  }\n}\n","\"use strict\";\n\nexport default class Relationship {\n  noun: string;\n  target: number;\n  verb: string;\n  strength: number;\n\n  constructor(noun: string, verb: string, target: number, strength: number) {\n    this.noun = noun;\n    this.verb = verb;\n    this.target = target;\n    this.strength = strength;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport Relationship from \"./relationship.js\";\n\nexport default class RelationshipGenerator {\n  strength: number;\n\n  constructor(strength: number) {\n    this.strength = strength;\n  }\n\n  generate(): Relationship {\n    let verb = \"\";\n    let noun = \"\";\n\n    if (this.strength == -1) {\n      verb = RND.item([\"dislikes\", \"distrusts\", \"mistrusts\", \"is annoyed by\"]);\n      noun = \"enemy\";\n    } else if (this.strength == -2) {\n      verb = RND.item([\"fears\", \"hates\", \"loathes\", \"can't stand\"]);\n      noun = \"enemy\";\n    } else if (this.strength == 0) {\n      verb = RND.item([\n        \"is intrigued by\",\n        \"is ambivalent towards\",\n        \"is neutral towards\",\n        \"is suspicious of\",\n      ]);\n      noun = \"acquaintance\";\n    } else if (this.strength == 1) {\n      verb = RND.item([\"likes\", \"is amused by\", \"enjoys the company of\", \"enjoys\", \"trusts\"]);\n      noun = \"friend\";\n    } else {\n      verb = RND.item([\"loves\", \"deeply trusts\", \"adores\"]);\n      noun = \"friend\";\n    }\n\n    return new Relationship(noun, verb, 0, this.strength);\n  }\n}\n","\"use strict\";\n\nimport Domain from \"./domain.js\";\n\nexport default class DomainSet {\n  primary: Domain;\n  secondaries: Domain[];\n\n  constructor() {\n    this.secondaries = [];\n  }\n}\n","\"use strict\";\n\nexport default class Realm {\n  name: string;\n  description: string;\n  personalityTraits: string[];\n  appearanceTraits: string[];\n\n  constructor(\n    name: string,\n    description: string,\n    personalityTraits: string[],\n    appearanceTraits: any[],\n  ) {\n    this.name = name;\n    this.description = description;\n    this.personalityTraits = personalityTraits;\n    this.appearanceTraits = appearanceTraits;\n  }\n}\n","\"use strict\";\n\nimport * as Words from \"@ironarachne/words\";\nimport AgeCategory from \"../../age/agecategory.js\";\nimport PersonalityTrait from \"../../characters/personality/personalitytrait.js\";\nimport Gender from \"../../gender.js\";\nimport type Species from \"../../species/species.js\";\nimport DomainSet from \"../domains/domainset.js\";\nimport Realm from \"../realms/realm.js\";\n\nexport default class Deity {\n  name: string;\n  species: Species;\n  gender: Gender;\n  ageCategory: AgeCategory;\n  domains: DomainSet;\n  titles: string[];\n  realm: Realm;\n  description: string;\n  personalityTraits: PersonalityTrait[];\n  personality: string;\n  appearance: string;\n  holyItem: string;\n  holySymbol: string;\n  isAlive: boolean;\n\n  constructor(\n    name: string,\n    species: Species,\n    gender: Gender,\n    ageCategory: AgeCategory,\n    realm: Realm,\n    domains: DomainSet,\n  ) {\n    this.name = name;\n    this.species = species;\n    this.gender = gender;\n    this.ageCategory = ageCategory;\n    this.domains = domains;\n    this.titles = [];\n    this.realm = realm;\n    this.description = \"\";\n    this.personality = \"\";\n    this.appearance = \"\";\n    this.holyItem = \"\";\n    this.holySymbol = \"\";\n    this.isAlive = true;\n  }\n\n  describe(): string {\n    const speciesAdj = this.species.adjective;\n    const subjectivePronoun = this.gender.subjectivePronoun;\n    let noun = \"god\";\n    const domainNames = [];\n\n    domainNames.push(this.domains.primary.name);\n\n    for (let i = 0; i < this.domains.secondaries.length; i++) {\n      domainNames.push(this.domains.secondaries[i].name);\n    }\n\n    if (this.gender.name === \"female\") {\n      noun = \"goddess\";\n    }\n\n    let description = `${this.name} appears as ${Words.article(speciesAdj)} ${speciesAdj} ${this.ageCategory.noun}.`;\n    description += ` ${Words.capitalize(subjectivePronoun)} has ${this.appearance}. ${this.personality}.`;\n    description += ` ${this.name} is the ${noun} of ${Words.arrayToPhrase(domainNames)}.`;\n    description += ` ${Words.capitalize(subjectivePronoun)} resides in ${\n      Words.uncapitalize(\n        this.realm.name,\n      )\n    }.`;\n\n    return description;\n  }\n}\n","\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport CharacterGenerator from \"../../characters/generator.js\";\nimport * as PremadeConfigs from \"../../characters/premadeconfigs.js\";\nimport DomainSet from \"../domains/domainset.js\";\nimport Realm from \"../realms/realm.js\";\n\nexport default class DeityGeneratorConfig {\n  domainSet: DomainSet;\n  realms: Realm[];\n  characterGenerator: CharacterGenerator;\n  femaleNameGenerator: MUN.Generator | null;\n  maleNameGenerator: MUN.Generator | null;\n\n  constructor() {\n    let charGenConfig = PremadeConfigs.getFantasy();\n\n    this.realms = [];\n    this.characterGenerator = new CharacterGenerator(charGenConfig);\n\n    let genSet = new MUN.HumanSet();\n\n    this.femaleNameGenerator = genSet.female;\n    this.maleNameGenerator = genSet.male;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport Deity from \"./deity.js\";\nimport DeityGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class DeityGenerator {\n  config: DeityGeneratorConfig;\n\n  constructor(config: DeityGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Deity {\n    let possibleHolyItems: string[] = [];\n    let possibleHolySymbols: string[] = [];\n\n    const characterDetails = this.config.characterGenerator.generate();\n\n    if (this.config.maleNameGenerator === null) {\n      throw new Error(\"male name generator not set\");\n    } else if (this.config.femaleNameGenerator === null) {\n      throw new Error(\"female name generator not set\");\n    }\n    let deityName = this.config.femaleNameGenerator.generate(1)[0];\n    if (characterDetails.gender.name == \"male\") {\n      deityName = this.config.maleNameGenerator.generate(1)[0];\n    }\n\n    let deity = new Deity(\n      deityName,\n      characterDetails.species,\n      characterDetails.gender,\n      characterDetails.ageCategory,\n      RND.item(this.config.realms),\n      this.config.domainSet,\n    );\n\n    possibleHolyItems = this.config.domainSet.primary.holyItems;\n    possibleHolySymbols = this.config.domainSet.primary.holySymbols;\n\n    deity.holyItem = RND.item(possibleHolyItems);\n    deity.holySymbol = RND.item(possibleHolySymbols);\n\n    const chanceOfRealmTrait = random.int(1, 100);\n\n    const physicalTraits = characterDetails.physicalTraits;\n    let appearanceTraits = [];\n\n    for (let i = 0; i < physicalTraits.length; i++) {\n      appearanceTraits.push(physicalTraits[i].description);\n    }\n\n    if (chanceOfRealmTrait > 80) {\n      appearanceTraits.push(RND.item(deity.realm.appearanceTraits).phrase);\n    }\n\n    deity.personalityTraits = characterDetails.personalityTraits;\n    deity.personality = describePersonality(deity);\n    deity.appearance = Words.arrayToPhrase(appearanceTraits);\n    deity.description = deity.describe();\n\n    return deity;\n  }\n}\n\nfunction describePersonality(deity: Deity): string {\n  let traits = [];\n\n  for (let i = 0; i < deity.personalityTraits.length; i++) {\n    traits.push(deity.personalityTraits[i].descriptor);\n  }\n\n  return Words.capitalize(deity.gender.subjectivePronoun) + \" is \" + Words.arrayToPhrase(traits);\n}\n","\"use strict\";\n\nimport Domain from \"./domain.js\";\nimport * as Domains from \"./domains.js\";\n\nexport default class DomainGeneratorConfig {\n  numberOfDomains: number;\n  domains: Domain[];\n\n  constructor() {\n    this.numberOfDomains = 1;\n    this.domains = Domains.all();\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport DomainSet from \"./domainset.js\";\nimport DomainGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class DomainGenerator {\n  config: DomainGeneratorConfig;\n\n  constructor(config: DomainGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): DomainSet {\n    let domainSet = new DomainSet();\n\n    this.config.domains = RND.shuffle(this.config.domains);\n\n    let primary = this.config.domains.pop();\n    if (primary !== undefined) {\n      domainSet.primary = primary;\n    } else {\n      throw new Error(\"No primary domain found.\");\n    }\n\n    for (let i = 0; i < this.config.numberOfDomains; i++) {\n      const d = this.config.domains.pop();\n      if (d === undefined) {\n        throw new Error(\"No secondary domain found.\");\n      }\n\n      domainSet.secondaries.push(d);\n    }\n\n    return domainSet;\n  }\n}\n","\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport Domain from \"../domains/domain.js\";\nimport * as Domains from \"../domains/domains.js\";\nimport Realm from \"../realms/realm.js\";\n\nexport default class PantheonGeneratorConfig {\n  domains: Domain[];\n  realms: Realm[];\n  minDeities: number;\n  maxDeities: number;\n  femaleNameGenerator: MUN.Generator;\n  maleNameGenerator: MUN.Generator;\n\n  constructor() {\n    this.domains = Domains.all();\n    this.realms = [];\n    this.minDeities = 1;\n    this.maxDeities = 16;\n\n    let genSet = new MUN.HumanSet();\n\n    if (genSet.female == null) {\n      throw new Error(\"no female name generator in set\");\n    } else if (genSet.male == null) {\n      throw new Error(\"no male name generator in set\");\n    }\n\n    this.femaleNameGenerator = genSet.female;\n    this.maleNameGenerator = genSet.male;\n  }\n}\n","\"use strict\";\n\nimport Relationship from \"../../relationships/relationship.js\";\nimport Deity from \"../deities/deity.js\";\n\nexport default class PantheonMember {\n  deity: Deity;\n  relationships: Relationship[];\n\n  constructor() {\n    this.relationships = [];\n  }\n}\n","\"use strict\";\n\nimport PantheonMember from \"./pantheonmember.js\";\n\nexport default class Pantheon {\n  name: string;\n  description: string;\n  members: PantheonMember[];\n  leader: number;\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.members = [];\n    this.leader = -1;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport RelationshipGenerator from \"../../relationships/generator.js\";\nimport Relationship from \"../../relationships/relationship.js\";\nimport DeityGenerator from \"../deities/generator.js\";\nimport DeityGeneratorConfig from \"../deities/generatorconfig.js\";\nimport DomainSet from \"../domains/domainset.js\";\nimport DomainGenerator from \"../domains/generator.js\";\nimport DomainGeneratorConfig from \"../domains/generatorconfig.js\";\nimport PantheonGeneratorConfig from \"./generatorconfig.js\";\nimport Pantheon from \"./pantheon.js\";\nimport PantheonMember from \"./pantheonmember.js\";\n\nexport default class PantheonGenerator {\n  config: PantheonGeneratorConfig;\n\n  constructor(config: PantheonGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Pantheon {\n    let pantheon = new Pantheon();\n\n    let deityGenConfig = new DeityGeneratorConfig();\n    deityGenConfig.realms = this.config.realms;\n    deityGenConfig.femaleNameGenerator = this.config.femaleNameGenerator;\n    deityGenConfig.maleNameGenerator = this.config.maleNameGenerator;\n\n    const numberOfDeities = random.int(this.config.minDeities, this.config.maxDeities);\n\n    const domainSets = randomDomainSets(numberOfDeities);\n\n    for (let i = 0; i < domainSets.length; i++) {\n      let member = new PantheonMember();\n      deityGenConfig.domainSet = domainSets[i];\n      let deityGen = new DeityGenerator(deityGenConfig);\n\n      let deity = deityGen.generate();\n      member.deity = deity;\n\n      pantheon.members.push(member);\n    }\n\n    let relationshipGenerator = new RelationshipGenerator(0);\n    let numberOfRelationships = random.int(1, 3);\n\n    for (let j = 0; j < numberOfRelationships; j++) {\n      for (let i = 0; i < pantheon.members.length; i++) {\n        relationshipGenerator.strength = random.int(-2, 2);\n        const target = random.int(0, pantheon.members.length - 1);\n        if (target != i) {\n          let alreadyExists = false;\n          for (let k = 0; k < pantheon.members[i].relationships.length; k++) {\n            if (pantheon.members[i].relationships[k].target == target) {\n              alreadyExists = true;\n            }\n          }\n          if (!alreadyExists) {\n            let outward = relationshipGenerator.generate();\n            outward.target = target;\n            pantheon.members[i].relationships.push(outward);\n\n            let inward = relationshipGenerator.generate();\n            inward.target = i;\n            pantheon.members[target].relationships.push(inward);\n          }\n        }\n      }\n    }\n\n    if (pantheon.members.length > 1) {\n      for (let i = 0; i < pantheon.members.length; i++) {\n        let relationships = [];\n\n        for (let x = 0; x < pantheon.members[i].relationships.length; x++) {\n          relationships.push(\n            getRelationshipPhrase(\n              pantheon.members[i].relationships[x],\n              pantheon.members[pantheon.members[i].relationships[x].target].deity.name,\n            ),\n          );\n        }\n\n        const relationshipDescription = \" \" + pantheon.members[i].deity.name + \" \" + Words.arrayToPhrase(relationships)\n          + \".\";\n\n        pantheon.members[i].deity.description += relationshipDescription;\n      }\n    }\n\n    return pantheon;\n  }\n}\n\nfunction getRelationshipPhrase(relationship: Relationship, targetName: string): string {\n  return RND.item([`${relationship.verb} ${targetName}`]);\n}\n\nfunction randomDomainSets(numberOfSets: number): DomainSet[] {\n  let domainGenConfig = new DomainGeneratorConfig();\n  let domainGen = new DomainGenerator(domainGenConfig);\n\n  let sets = [];\n  let allDomains = RND.shuffle(domainGenConfig.domains);\n\n  for (let i = 0; i < numberOfSets; i++) {\n    let domains = [];\n\n    for (let j = 0; j < domainGen.config.numberOfDomains + 1; j++) {\n      domains.push(allDomains.pop());\n    }\n\n    domainGen.config.domains = domains;\n\n    let domainSet = domainGen.generate();\n\n    sets.push(domainSet);\n  }\n\n  return sets;\n}\n","\"use strict\";\n\nexport class AppearanceTrait {\n  phrase: string;\n  bodyPart: string;\n  tags: string[];\n\n  constructor(phrase: string, bodyPart: string, tags: string[]) {\n    this.phrase = phrase;\n    this.bodyPart = bodyPart;\n    this.tags = tags;\n  }\n}\n\nexport function getAllTraitsWithTag(traits: AppearanceTrait[], tag: string) {\n  const results = [];\n\n  for (let i = 0; i < traits.length; i++) {\n    if (traits[i].tags.includes(tag)) {\n      results.push(traits[i]);\n    }\n  }\n\n  return results;\n}\n","\"use strict\";\n\nexport default class RealmConcept {\n  name: string;\n  nameOptions: string[];\n  appearanceTags: string[];\n  personalityTags: string[];\n  descriptionOptions: string[];\n\n  constructor(\n    name: string,\n    nameOptions: string[],\n    appearanceTags: string[],\n    personalityTags: string[],\n    descriptionOptions: string[],\n  ) {\n    this.name = name;\n    this.nameOptions = nameOptions;\n    this.appearanceTags = appearanceTags;\n    this.personalityTags = personalityTags;\n    this.descriptionOptions = descriptionOptions;\n  }\n}\n","\"use strict\";\n\nimport * as AppearanceTrait from \"../appearance.js\";\nimport RealmConcept from \"./realms/realmconcept.js\";\n\nexport function all() {\n  return [\n    new AppearanceTrait.AppearanceTrait(\"six feathered wings\", \"wings\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"four feathered wings\", \"wings\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"two large feathered wings\", \"wings\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"large leathery wings\", \"wings\", [\"sky\", \"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"a lion's tail'\", \"tail\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"a whip-like tail\", \"tail\", [\"earth\", \"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"two tails\", \"tail\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"the horns of a goat\", \"horns\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the horns of a ram\", \"horns\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the antlers of a stag\", \"horns\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the antlers of a deer\", \"horns\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"short, pointed horns\", \"horns\", [\"earth\", \"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"tall, straight horns\", \"horns\", [\"earth\", \"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"glowing blue eyes\", \"eyes\", [\"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"glowing yellow eyes\", \"eyes\", [\"sky\", \"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"glowing red eyes\", \"eyes\", [\"earth\", \"death\", \"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"glowing orange eyes\", \"eyes\", [\"earth\", \"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"eyes that burn with an inner fire\", \"eyes\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"four eyes\", \"eyes\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"six eyes\", \"eyes\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"eight eyes\", \"eyes\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"no eyes\", \"eyes\", [\"death\", \"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"reptilian eyes\", \"eyes\", [\"forest\", \"earth\"]),\n    new AppearanceTrait.AppearanceTrait(\"scales instead of skin\", \"skin\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"skin that glows faintly\", \"skin\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"skin made of living rock\", \"skin\", [\"earth\"]),\n    new AppearanceTrait.AppearanceTrait(\"blue skin\", \"skin\", [\"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"green skin\", \"skin\", [\"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"crystalline skin\", \"skin\", [\"earth\"]),\n    new AppearanceTrait.AppearanceTrait(\"translucent grey skin\", \"skin\", [\"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"dull grey skin\", \"skin\", [\"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"skin covered in leaves\", \"skin\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"skin made of star-lit blackness\", \"skin\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"eight tentacles\", \"tentacles\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"six tentacles\", \"tentacles\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"four tentacles\", \"tentacles\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a lion\", \"head\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a bear\", \"head\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a dragon\", \"head\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a swan\", \"head\", [\"sky\", \"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a deer\", \"head\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a cat\", \"head\", [\"earth\", \"desert\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a wolf\", \"head\", [\"earth\", \"forest\"]),\n  ];\n}\n\nexport function getAllAppearanceTraitsForRealmConcept(concept: RealmConcept) {\n  const traits = all();\n\n  let result: AppearanceTrait.AppearanceTrait[] = [];\n\n  for (let i = 0; i < concept.appearanceTags.length; i++) {\n    const discovered = AppearanceTrait.getAllTraitsWithTag(traits, concept.appearanceTags[i]);\n\n    result = [...result, ...discovered];\n  }\n\n  return result;\n}\n","\"use strict\";\n\nexport default class RealmGeneratorConfig {\n  numberOfRealms: number;\n  requireDualistic: boolean;\n\n  constructor() {\n    this.numberOfRealms = 2;\n    this.requireDualistic = false;\n  }\n}\n","\"use strict\";\n\nimport RealmConcept from \"./realmconcept.js\";\n\nexport function all(): RealmConcept[] {\n  return [\n    new RealmConcept(\n      \"sky\",\n      [\n        \"The Eternal Heavens\",\n        \"The Heavens Above\",\n        \"Heaven\",\n        \"The Sky\",\n        \"The Heavens\",\n        \"The Celestial Realm\",\n        \"The Empyrean\",\n        \"The Firmament\",\n      ],\n      [\"sky\", \"clouds\", \"sun\", \"moon\", \"stars\", \"rainbows\", \"light\"],\n      [\"mercurial\", \"caring\", \"wise\", \"flexible\", \"majestic\", \"powerful\", \"graceful\", \"serene\"],\n      [\n        \"Far above the mortal world, {name} is a realm of light and splendor.\",\n        \"{name} is a realm of light and beauty, where celestial beings roam.\",\n        \"The skies of {name} are awash with vibrant colors and shimmering stars.\",\n      ],\n    ),\n    new RealmConcept(\n      \"earth\",\n      [\n        \"The Earth\",\n        \"The Mortal Realm\",\n        \"The Material Plane\",\n        \"The Mundane World\",\n        \"The Physical Plane\",\n        \"The Human World\",\n      ],\n      [\"earth\", \"mountains\", \"rivers\", \"forests\", \"deserts\", \"oceans\", \"caves\", \"valleys\"],\n      [\"stable\", \"stubborn\", \"physical\", \"grounded\", \"tenacious\", \"reliable\", \"practical\"],\n      [\n        \"{name} is where mortals reside, going about their daily lives.\",\n        \"{name} is the home of all mortal beings, full of bustling cities and quiet countryside.\",\n      ],\n    ),\n    new RealmConcept(\n      \"forest\",\n      [\n        \"The Forest\",\n        \"The Eternal Forest\",\n        \"The Divine Forest\",\n        \"The Sylvan Realm\",\n        \"The Verdant Wilds\",\n        \"The Green Domain\",\n      ],\n      [\"forest\", \"trees\", \"plants\", \"animals\", \"rivers\", \"mountains\"],\n      [\"caring\", \"stable\", \"peaceful\", \"graceful\", \"majestic\", \"wise\", \"mystical\"],\n      [\n        \"Hidden far from the mortal world, {name} is deep and mysterious, full of secrets and ancient magic.\",\n        \"{name} is an infinite forest of beauty and mystery, where the spirits of the wild roam free.\",\n        \"The forests of {name} are alive with the sound of birdsong and rustling leaves.\",\n      ],\n    ),\n    new RealmConcept(\n      \"underworld\",\n      [\n        \"The Underworld\",\n        \"The Afterlife\",\n        \"The Kingdom of Death\",\n        \"The Great Beyond\",\n        \"The Netherworld\",\n        \"The Land of the Dead\",\n      ],\n      [\"death\", \"shadow\", \"bones\", \"ghosts\", \"souls\", \"void\"],\n      [\"angry\", \"brooding\", \"peaceful\", \"wise\", \"merciful\", \"judgmental\", \"powerful\"],\n      [\n        \"{name} is where souls go to rest after death, guided by the spirits of the departed.\",\n        \"{name} is a realm of perpetual darkness where the dead rest forever, watched over by the reapers of the underworld.\",\n        \"The halls of {name} are filled with the whispers of the dead, their spirits forever lingering in the shadows.\",\n      ],\n    ),\n    new RealmConcept(\n      \"ocean\",\n      [\n        \"The Vast Sea\",\n        \"The Sea\",\n        \"The Endless Ocean\",\n        \"The Divine Sea\",\n        \"The Ever-Changing Tides\",\n        \"The Fathomless Depths\",\n        \"The Coral Kingdom\",\n        \"The Ocean of Storms\",\n      ],\n      [\"water\", \"salt\", \"waves\", \"foam\", \"currents\", \"whirlpools\", \"tides\", \"depths\"],\n      [\"mercurial\", \"aloof\", \"cruel\", \"flexible\", \"violent\", \"majestic\", \"mysterious\"],\n      [\n        \"{name} is a realm apart from mortal seas, full of life and infinitely deep.\",\n        \"The deep and restless waters of {name} hide many secrets.\",\n        \"Beneath the surface of {name} lies a kingdom of wonder and terror.\",\n      ],\n    ),\n    new RealmConcept(\n      \"mountain\",\n      [\n        \"The Great Mountain\",\n        \"The Mountain\",\n        \"The Divine Mountain\",\n        \"The Endless Peak\",\n        \"The Celestial Summit\",\n        \"The Sky-Splitting Colossus\",\n        \"The Stone Sentinel\",\n        \"The Cradle of the Gods\",\n      ],\n      [\"earth\", \"rock\", \"stone\", \"ice\", \"snow\", \"summit\", \"peak\", \"valley\"],\n      [\"aloof\", \"wise\", \"physical\", \"stable\", \"majestic\", \"immovable\", \"mysterious\"],\n      [\n        \"{name} is far larger than any mountain of the mortal world.\",\n        \"{name} is covered in lush forests and cascading waterfalls, a towering paradise.\",\n        \"Beneath the peaks and valleys of {name} lies a realm of fire and darkness.\",\n      ],\n    ),\n    new RealmConcept(\n      \"void\",\n      [\n        \"The Nameless Void\",\n        \"The Endless Void\",\n        \"The Void\",\n        \"The Dark Beyond\",\n        \"The Endless Dark\",\n        \"The Abyss\",\n        \"The Great Emptiness\",\n        \"The Eternal Nothingness\",\n      ],\n      [\"alien\", \"darkness\", \"emptiness\", \"silence\", \"cold\", \"nothingness\", \"absence\"],\n      [\"alien\", \"clever\", \"unknowable\", \"silent\", \"watchful\", \"impenetrable\"],\n      [\n        \"{name} is home to things unknowable and alien.\",\n        \"There are mysteries in {name} that no mortal can hope to perceive, let alone understand.\",\n        \"{name} is a realm of eternal darkness and emptiness, where the very fabric of reality is twisted and distorted.\",\n      ],\n    ),\n    new RealmConcept(\n      \"dream\",\n      [\n        \"The Realm of Dreams\",\n        \"The Dreamlands\",\n        \"The Land of Nod\",\n        \"The Ethereal Plane\",\n        \"The Realm of Imagination\",\n        \"The World of Sleep\",\n      ],\n      [\"ethereal\", \"fantastical\", \"dreamlike\", \"otherworldly\", \"surreal\", \"shimmering\"],\n      [\"mysterious\", \"whimsical\", \"fickle\", \"curious\", \"enigmatic\", \"playful\"],\n      [\n        \"{name} is a place where the impossible becomes reality and where the line between dreams and waking life is blurred.\",\n        \"The ethereal beauty of {name} is home to creatures born of pure imagination and fantasy.\",\n        \"In {name}, the landscape constantly shifts and changes, shaped by the whims of the dreamers who call it home.\",\n        \"The dreamscape of {name} is a realm of infinite possibilities, where anything can happen and nothing is truly impossible.\",\n        \"{name} is a place where the innermost thoughts and desires of mortals manifest into reality, for better or for worse.\",\n        \"Those who journey into {name} often find themselves caught in a never-ending cycle of dreams and nightmares.\",\n      ],\n    ),\n  ];\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport * as AppearanceTraits from \"../appearancetraits.js\";\nimport RealmGeneratorConfig from \"./generatorconfig.js\";\nimport Realm from \"./realm.js\";\nimport * as RealmConcepts from \"./realmconcepts.js\";\n\nexport default class RealmGenerator {\n  config: RealmGeneratorConfig;\n\n  constructor(config: RealmGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Realm[] {\n    const realms = [];\n\n    const numberOfRealms = this.config.numberOfRealms;\n\n    let allConcepts = RealmConcepts.all();\n    allConcepts = RND.shuffle(allConcepts);\n\n    for (let i = 0; i < numberOfRealms; i++) {\n      const concept = allConcepts.pop();\n\n      if (typeof concept == \"object\") {\n        const realmName = RND.item(concept.nameOptions);\n\n        const appearanceTraits = AppearanceTraits.getAllAppearanceTraitsForRealmConcept(concept);\n\n        let description = RND.item(concept.descriptionOptions).replace(\n          \"{name}\",\n          Words.uncapitalize(realmName),\n        );\n        description = Words.capitalize(description);\n\n        const realm = new Realm(realmName, description, [], appearanceTraits);\n\n        realms.push(realm);\n      }\n    }\n\n    return realms;\n  }\n}\n","\"use strict\";\n\nimport Pantheon from \"./pantheons/pantheon.js\";\nimport Realm from \"./realms/realm.js\";\n\nexport default class Religion {\n  name: string;\n  description: string;\n  realms: Realm[];\n  pantheon: Pantheon | null;\n\n  constructor(name: string) {\n    this.name = name;\n    this.description = \"\";\n    this.realms = [];\n    this.pantheon = null;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport ReligionGeneratorConfig from \"./generatorconfig.js\";\nimport PantheonGenerator from \"./pantheons/generator.js\";\nimport PantheonGeneratorConfig from \"./pantheons/generatorconfig.js\";\nimport RealmGenerator from \"./realms/generator.js\";\nimport RealmGeneratorConfig from \"./realms/generatorconfig.js\";\nimport Religion from \"./religion.js\";\n\nexport default class ReligionGenerator {\n  config: ReligionGeneratorConfig;\n\n  constructor(config: ReligionGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Religion {\n    let realmGenConfig = new RealmGeneratorConfig();\n    let realmGen = new RealmGenerator(realmGenConfig);\n    const realms = realmGen.generate();\n\n    const category = RND.item(this.config.categories);\n\n    let pantheonGenConfig = new PantheonGeneratorConfig();\n    pantheonGenConfig.realms = realms;\n    pantheonGenConfig.minDeities = category.minDeities;\n    pantheonGenConfig.maxDeities = category.maxDeities;\n    pantheonGenConfig.femaleNameGenerator = this.config.femaleNameGenerator;\n    pantheonGenConfig.maleNameGenerator = this.config.maleNameGenerator;\n    let pantheonGen = new PantheonGenerator(pantheonGenConfig);\n    let pantheon = pantheonGen.generate();\n    pantheon.description = category.description;\n\n    const religion = new Religion(this.config.nameGenerator.generate(1)[0]);\n    religion.realms = realms;\n    religion.pantheon = pantheon;\n\n    if (category.hasLeader) {\n      religion.pantheon.leader = random.int(0, religion.pantheon.members.length - 1);\n\n      let leaderTitle = \"Queen of the Gods\";\n      if (religion.pantheon.members[religion.pantheon.leader].deity.gender.name === \"male\") {\n        leaderTitle = \"King of the Gods\";\n      }\n\n      religion.pantheon.members[religion.pantheon.leader].deity.titles.push(leaderTitle);\n      religion.pantheon.description += ` ${\n        religion.pantheon.members[religion.pantheon.leader].deity.name\n      } is the ${leaderTitle}.`;\n    }\n\n    religion.description = pantheon.description\n      + \" \"\n      + randomGatheringTimes()\n      + \" \"\n      + Words.capitalize(randomGatheringPlace())\n      + \".\";\n\n    return religion;\n  }\n}\n\nfunction randomGatheringPlace(): string {\n  let description = RND.item([\n    \"{follower} gather in {place} for {service}\",\n    \"{follower} congregate in {place} to be led in {service} by {leader}\",\n    \"{follower} meet in {place} to engage in {service} and hear from {leader}\",\n    \"At {place}, {follower} come together for {service} led by {leader}\",\n    \"Join {follower} at {place} for {service} and fellowship with {leader}\",\n    \"{follower} assemble in {place} to participate in {service} and share with {leader}\",\n    \"{follower} unite at {place} for {service} and to learn from {leader}\",\n    \"At {place}, {follower} come together to seek guidance and wisdom from {leader} through {service}\",\n  ]);\n\n  const follower = RND.item([\n    \"adherents\",\n    \"believers\",\n    \"disciples\",\n    \"devotees\",\n    \"faithful\",\n    \"followers\",\n    \"pilgrims\",\n    \"worshippers\",\n    \"zealots\",\n  ]);\n\n  const place = RND.item([\n    \"temples\",\n    \"churches\",\n    \"mosques\",\n    \"synagogues\",\n    \"chapels\",\n    \"shrines\",\n    \"sanctuaries\",\n    \"meeting halls\",\n    \"community centers\",\n    \"outdoor arenas\",\n  ]);\n\n  const service = RND.item([\n    \"silent meditation\",\n    \"guided meditation\",\n    \"chanting\",\n    \"prayer\",\n    \"sacrament\",\n    \"communion\",\n    \"worship\",\n    \"ritual dance\",\n    \"ritual music\",\n    \"structured recitation\",\n    \"spontaneous sharing\",\n    \"teachings and discussions\",\n    \"ritual sacrifice\",\n  ]);\n\n  const leader = RND.item([\n    \"priest\",\n    \"priestess\",\n    \"minister\",\n    \"shaman\",\n    \"spiritual guide\",\n    \"community leader\",\n    \"wise elder\",\n    \"prophet\",\n    \"guru\",\n    \"ascended master\",\n    \"enlightened one\",\n    \"mystic\",\n    \"oracle\",\n  ]);\n\n  description = description\n    .replace(\"{follower}\", follower)\n    .replace(\"{place}\", place)\n    .replace(\"{service}\", service)\n    .replace(\"{leader}\", Words.article(leader) + \" \" + leader);\n\n  return description;\n}\n\nfunction randomGatheringTimes(): string {\n  let description = RND.item([\n    \"Regular gatherings happen once a week.\",\n    \"Regular gatherings happen daily.\",\n    \"Regular gatherings happen once a month.\",\n    \"Weekly gatherings take place every {weekday}.\",\n    \"They come together every {weekday} for a time of {service}.\",\n    \"Their community meets {frequency} for {service} at {time}.\",\n    \"Their gatherings occur {frequency}, bringing {follower} together for {service}.\",\n    \"They gather {frequency} at {place} for {service} and {activity}.\",\n    \"Every {weekday} they gather for {service}, followed by {activity}.\",\n    \"Their gatherings happen {frequency} at {place} and feature {service}, {activity}, and {food/drink}.\",\n    \"People are invited to the {occasion} gathering, where they partake in {service} and {activity}.\",\n  ]);\n\n  description = description\n    .replace(\n      \"{weekday}\",\n      RND.item([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]),\n    )\n    .replace(\"{frequency}\", RND.item([\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"annually\"]))\n    .replace(\n      \"{follower}\",\n      RND.item([\"worshipers\", \"devotees\", \"believers\", \"faithful\", \"followers\", \"pilgrims\"]),\n    )\n    .replace(\n      \"{service}\",\n      RND.item([\"prayer\", \"worship\", \"meditation\", \"reflection\", \"ritual\", \"sermon\", \"teaching\"]),\n    )\n    .replace(\"{time}\", RND.item([\"sunrise\", \"midday\", \"sunset\", \"evening\", \"night\"]))\n    .replace(\n      \"{place}\",\n      RND.item([\n        \"the temple\",\n        \"the church\",\n        \"the mosque\",\n        \"the synagogue\",\n        \"the chapel\",\n        \"the shrine\",\n        \"the sanctuary\",\n        \"the meeting hall\",\n      ]),\n    )\n    .replace(\n      \"{activity}\",\n      RND.item([\n        \"fellowship\",\n        \"conversation\",\n        \"sharing\",\n        \"food and drink\",\n        \"community service\",\n        \"study\",\n      ]),\n    )\n    .replace(\"{occasion}\", RND.item([\"special\", \"holiday\", \"festive\", \"solemn\"]));\n\n  return description;\n}\n"],"names":["all","Categories.all","PremadeConfigs.getFantasy","Domains.all","AppearanceTrait.AppearanceTrait","AppearanceTrait.getAllTraitsWithTag","RealmConcepts.all","AppearanceTraits.getAllAppearanceTraitsForRealmConcept"],"mappings":"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"}