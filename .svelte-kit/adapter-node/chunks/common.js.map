{"version":3,"file":"common.js","sources":["../../../../src/lib/species/modifiers/skeleton.ts","../../../../src/lib/species/modifiers/vampire.ts","../../../../src/lib/species/modifiers/zombie.ts","../../../../src/lib/species/common.ts"],"sourcesContent":["\"use strict\";\n\nimport * as _ from \"lodash\";\nimport type Species from \"../species.js\";\n\nexport function modify(species: Species): Species {\n  let result = _.cloneDeep(species);\n\n  let modifierName = \"skeletal\";\n\n  result.name = `${modifierName} ${result.name}`;\n  result.pluralName = `${modifierName} ${result.pluralName}`;\n  result.adjective = `${modifierName} ${result.adjective}`;\n  result.abilities.push(\"unharmed by piercing damage\");\n  result.tags.push(\"skeleton\");\n  result.tags.push(\"undead\");\n  result.threatLevel += 1;\n\n  return result;\n}\n","\"use strict\";\n\nimport * as _ from \"lodash\";\nimport type Species from \"../species.js\";\n\nexport function modify(species: Species): Species {\n  let result = _.cloneDeep(species);\n\n  let modifierName = \"vampire\";\n\n  result.name = `${modifierName} ${result.name}`;\n  result.pluralName = `${modifierName} ${result.pluralName}`;\n  result.adjective = `${modifierName} ${result.adjective}`;\n  result.abilities.push(\"drain blood to gain life\");\n  result.abilities.push(\"transform into a bat\");\n  result.abilities.push(\"transform into a wolf\");\n  result.abilities.push(\"transform into mist\");\n  result.abilities.push(\"see in the dark\");\n  result.abilities.push(\"can only be killed by a stake through the heart or by direct sunlight\");\n  result.tags.push(\"vampire\");\n  result.tags.push(\"undead\");\n  result.threatLevel += 5;\n\n  return result;\n}\n","\"use strict\";\n\nimport * as _ from \"lodash\";\nimport type Species from \"../species.js\";\n\nexport function modify(species: Species): Species {\n  let result = _.cloneDeep(species);\n\n  let modifierName = \"zombie\";\n\n  result.name = `${modifierName} ${result.name}`;\n  result.pluralName = `${modifierName} ${result.pluralName}`;\n  result.adjective = `${modifierName} ${result.adjective}`;\n  result.abilities.push(\"can only be killed by removing the head\");\n\n  let newTags = [];\n\n  for (let i = 0; i < result.tags.length; i++) {\n    if (result.tags[i] != \"sentient\") {\n      newTags.push(result.tags[i]);\n    }\n  }\n\n  result.tags = newTags;\n\n  result.abilities.push(\"can bite others to transform them into zombies\");\n  result.tags.push(\"zombie\");\n  result.tags.push(\"undead\");\n  result.threatLevel += 1;\n\n  return result;\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Skeleton from \"./modifiers/skeleton.js\";\nimport * as Vampire from \"./modifiers/vampire.js\";\nimport * as Zombie from \"./modifiers/zombie.js\";\nimport type Species from \"./species.js\";\n\nexport function byAnyTag(tags: string[], options: Species[]): Species[] {\n  let result = [];\n\n  let unique = true;\n\n  for (let i = 0; i < options.length; i++) {\n    unique = true;\n    for (let j = 0; j < tags.length; j++) {\n      if (options[i].tags.includes(tags[j]) && unique) {\n        result.push(options[i]);\n        unique = false;\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function byEnvironment(environment: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].environments.includes(environment) || options[i].environments.length == 0) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function byTag(tag: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].tags.includes(tag)) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function getModifiedVariants(options: Species[]): Species[] {\n  let result: Species[] = [];\n\n  result = result.concat(getSkeletonVariants(options));\n  result = result.concat(getVampireVariants(options));\n  result = result.concat(getZombieVariants(options));\n\n  return result;\n}\n\nexport function getSkeletonVariants(options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    let skeleton = Skeleton.modify(options[i]);\n    result.push(skeleton);\n  }\n\n  return result;\n}\n\nexport function getVampireVariants(options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    let vampire = Vampire.modify(options[i]);\n    result.push(vampire);\n  }\n\n  return result;\n}\n\nexport function getZombieVariants(options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    let zombie = Zombie.modify(options[i]);\n    result.push(zombie);\n  }\n\n  return result;\n}\n\nexport function randomUniqueSet(options: Species[], count: number): Species[] {\n  let result: Species[] = [];\n\n  options = RND.shuffle(options);\n\n  if (options.length >= count) {\n    for (let i = 0; i < count; i++) {\n      let item: Species | undefined = options.pop();\n      if (item !== undefined) {\n        result.push(item);\n      }\n    }\n  } else {\n    throw new Error(\"Not enough options to choose from.\");\n  }\n\n  return result;\n}\n\nexport function randomWeighted(options: Species[]): Species {\n  return RND.weighted(options);\n}\n\nexport function withCreatureType(creatureType: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].creatureTypes.includes(creatureType)) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function withoutTag(tag: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (!options[i].tags.includes(tag)) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n"],"names":["modify","Skeleton.modify","Vampire.modify","Zombie.modify"],"mappings":"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"}