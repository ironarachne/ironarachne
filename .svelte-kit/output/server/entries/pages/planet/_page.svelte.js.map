{"version":3,"file":"_page.svelte.js","sources":["../../../../../../src/routes/planet/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import * as RND from '@ironarachne/rng';\n  import * as Classifications from '$lib/planets/classifications';\n  import * as PlanetRenderer from '$lib/renderers/planets/planet-webgl';\n  import random from 'random';\n  import seedrandom from 'seedrandom';\n\n  import { onMount } from 'svelte';\n  import PlanetGeneratorConfig from '$lib/planets/generatorconfig';\n  import PlanetGenerator from '$lib/planets/generator';\n\n  let planetTypes = Classifications.getClassificationNames();\n\n  let seed = RND.randomString(13);\n  random.use(seedrandom(seed));\n  let planetType = 'random';\n  let planetGenConfig = new PlanetGeneratorConfig();\n  let planetGen = new PlanetGenerator(planetGenConfig);\n  let planet = planetGen.generate();\n  let planetImage: HTMLImageElement | null;\n\n  function generate() {\n    random.use(seedrandom(seed));\n\n    if (planetType == 'random') {\n      planetGen.config.possibleClassifications = Classifications.all();\n    } else {\n      let classification = Classifications.getClassificationByName(planetType);\n      if (classification !== undefined) {\n        planetGen.config.possibleClassifications = [\n        classification,\n      ];\n      }\n    }\n\n    planet = planetGen.generate();\n\n    if (planetImage !== null) {\n      planetImage.src = PlanetRenderer.render(planet, 600, 400);\n    }\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  onMount(() => {\n    planetImage = document.getElementById('planet-render') as HTMLImageElement;\n    newSeed();\n  });\n</script>\n\n<svelte:head>\n  <title>Planet Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"main scifi\">\n  <h1>Planet Generator</h1>\n\n  <p>This lets you generate a planet. It uses WebGL and your graphics card.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"planetType\">Planet Type</label>\n    <select bind:value={planetType} id=\"planetType\">\n      <option>random</option>\n      {#each planetTypes as pType}\n        <option>{pType}</option>\n      {/each}\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <h2>{planet.name}</h2>\n\n  <img alt=\"Planet\" id=\"planet-render\" />\n\n  <p>{planet.description}</p>\n\n  <p><strong>Planet Type:</strong> {planet.classification.name}</p>\n  <p><strong>Population:</strong> {planet.populationFriendly}</p>\n  <p><strong>Government:</strong> {planet.government}</p>\n  <p><strong>Culture:</strong> {planet.culture}</p>\n  <p>\n    <strong>Distance from Star:</strong>\n    {new Intl.NumberFormat().format(planet.distance_from_sun)} AU\n  </p>\n  <p>\n    <strong>Mass:</strong>\n    {new Intl.NumberFormat().format(planet.mass)} &times; 10<sup>24</sup> kg ({new Intl.NumberFormat().format(\n      Math.floor((planet.mass / 5.9722) * 100),\n    )}% Earth's mass)\n  </p>\n  <p>\n    <strong>Diameter:</strong>\n    {new Intl.NumberFormat().format(Math.floor(planet.diameter))} km ({new Intl.NumberFormat().format(\n      Math.floor((planet.diameter / 12756) * 100),\n    )}% Earth's diameter)\n  </p>\n  <p>\n    <strong>Gravity:</strong>\n    {new Intl.NumberFormat().format(planet.gravity)} m/s<sup>2</sup>\n    ({new Intl.NumberFormat().format(Math.floor((planet.gravity / 9.81) * 100))}% Earth's gravity)\n  </p>\n  <p>\n    <strong>Orbital Period:</strong>\n    {new Intl.NumberFormat().format(Math.floor(planet.orbital_period))} days\n  </p>\n</section>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/scifi.scss';\n\n  canvas {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n\n  #planet-render {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n</style>\n"],"names":["Classifications.getClassificationNames"],"mappings":";;;;;;;;;;;;AAWM,MAAA,cAAcA;MAEd,OAAO,IAAI,aAAa,EAAE;AAC9B,SAAO,IAAI,WAAW,IAAI,CAAA;MAEtB,kBAAsB,IAAA;AACtB,MAAA,YAAA,IAAgB,gBAAgB,eAAe;AAC/C,MAAA,SAAS,UAAU;;AA8CsB,SAAA,GAAA,SAAA,QAAA,qCAAA,SAAA,QAAA,kDAAA,EAAA,oCAAA,EAAA,ocAAA,cAAA,SAAA,qRAOlC,aAAW,WAAA;AACP,WAAA,UAAA,cAAA,SAAA,oBAAA,KAAK,CAAA;AAAA,qPAQf,OAAO,IAAI,CAIZ,gGAAA,OAAA,OAAO,WAAW,CAAA,sHAAA,OAEY,OAAO,eAAe,IAAI,CAC3B,oHAAA,OAAA,OAAO,kBAAkB,CAAA,qHAAA,OACzB,OAAO,UAAU,CACpB,iHAAA,OAAA,OAAO,OAAO,yIAGrC,KAAK,aAAY,EAAG,OAAO,OAAO,iBAAiB,CAAA,CAAA,kHAAA,OAAA,IAInD,KAAK,aAAY,EAAG,OAAO,OAAO,IAAI,6FAAoC,KAAK,aAAY,EAAG,OACjG,KAAK,MAAO,OAAO,OAAO,SAAU,GAAG,CAKpC,CAAA,CAAA,sIAAA,OAAA,IAAA,KAAK,aAAY,EAAG,OAAO,KAAK,MAAM,OAAO,QAAQ,CAAa,CAAA,CAAA,QAAA,OAAA,IAAA,KAAK,aAAY,EAAG,OACzF,KAAK,MAAO,OAAO,WAAW,QAAS,GAAG,CAKvC,CAAA,CAAA,wIAAA,OAAA,IAAA,KAAK,eAAe,OAAO,OAAO,OAAO,CAAA,CAAA;AAAA,OACxC,OAAA,IAAA,KAAK,aAAe,EAAA,OAAO,KAAK,MAAO,OAAO,UAAU,OAAQ,GAAG,CAIpE,CAAA,CAAA,+IAAA,OAAA,IAAA,KAAK,aAAY,EAAG,OAAO,KAAK,MAAM,OAAO,cAAc,CAAA,CAAA,CAAA;;"}