{"version":3,"file":"_page.svelte.js","sources":["../../../../../../src/routes/planet/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import * as RND from '@ironarachne/rng';\n  import * as Classifications from '$lib/planets/classifications';\n  import * as PlanetRenderer from '$lib/renderers/planets/planet-webgl';\n  import * as THREE from 'three';\n  import * as StarfieldShader from '$lib/renderers/starfields/starfield-webgl';\n  import random from 'random';\n  import seedrandom from 'seedrandom';\n\n  import { onMount } from 'svelte';\n  import PlanetGeneratorConfig from '$lib/planets/generatorconfig';\n  import PlanetGenerator from '$lib/planets/generator';\n\n  let materials: THREE.Material[] = [];\n  let meshes: THREE.Mesh[] = [];\n  let geometries: (THREE.PlaneGeometry|THREE.SphereGeometry)[] = [];\n  let planetTypes = Classifications.getClassificationNames();\n  let planetVertexShader = \"\";\n  let planetFragmentShader = \"\";\n  let planetCloudShader = \"\";\n\n  let seed = RND.randomString(13);\n  random.use(seedrandom(seed));\n  let planetType = 'random';\n  let planetGenConfig = new PlanetGeneratorConfig();\n  let planetGen = new PlanetGenerator(planetGenConfig);\n  let planet = planetGen.generate();\n  let initialized = false;\n  let scene = new THREE.Scene();\n  let camera: THREE.PerspectiveCamera;\n  let canvas;\n  let renderer: THREE.WebGLRenderer;\n\n  function clean() {\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose();\n    }\n    for (let i = 0; i < geometries.length; i++) {\n      geometries[i].dispose();\n    }\n    materials = [];\n    meshes = [];\n    geometries = [];\n    renderer.dispose();\n    initialized = false;\n  }\n\n  function generate() {\n    if (initialized) {\n      // If we already have a scene, destroy it and free up its resources\n      clean();\n    }\n\n    random.use(seedrandom(seed));\n\n    if (planetType == 'random') {\n      planetGen.config.possibleClassifications = Classifications.all();\n    } else {\n      let classification = Classifications.getClassificationByName(planetType);\n      if (classification !== undefined) {\n        planetGen.config.possibleClassifications = [\n        classification,\n      ];\n      }\n    }\n\n    planet = planetGen.generate();\n\n    let shaderData = PlanetRenderer.getShaderData(planet.classification.name);\n    planetFragmentShader = shaderData.generateFragmentShader();\n    planetVertexShader = shaderData.generateVertexShader();\n    planetCloudShader = shaderData.generateCloudShader();\n\n    render();\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  function render() {\n    if (planetType == '') {\n      planetType = 'random';\n    }\n    canvas = document.getElementById('render');\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(65, 600 / 400, 0.1, 100);\n    camera.position.set(0, 10, 20);\n    if (canvas === null) {\n      throw new Error(\"Canvas not found\");\n    }\n    renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });\n    renderer.setSize(600, 400);\n\n    let starfieldGeometry = new THREE.PlaneGeometry(50, 50, 50);\n    geometries.push(starfieldGeometry);\n    let starfieldMaterial = new THREE.ShaderMaterial({\n      fragmentShader: StarfieldShader.generate(),\n    });\n    materials.push(starfieldMaterial);\n    let plane = new THREE.Mesh(starfieldGeometry, starfieldMaterial);\n    meshes.push(plane);\n    scene.add(plane);\n\n    let fragmentShader = planetFragmentShader;\n    let vertexShader = planetVertexShader;\n\n    let uniforms = THREE.UniformsUtils.merge([THREE.UniformsLib['lights']]);\n\n    uniforms.u_resolution = { value: { x: 600, y: 400 } };\n    uniforms.seed = { value: random.float(0, 200.0) };\n\n    let planetSize = PlanetRenderer.translateDiameterToModelSize(planet.diameter);\n\n    let planetGeometry = new THREE.SphereGeometry(planetSize, 32, 32);\n    geometries.push(planetGeometry);\n\n    let planetMaterial = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      fragmentShader: fragmentShader,\n      vertexShader: vertexShader,\n      lights: true,\n    });\n    materials.push(planetMaterial);\n\n    let light = new THREE.HemisphereLight(0xf6e86d, 0x404040, 0.5);\n    scene.add(light);\n\n    let planetMesh = new THREE.Mesh(planetGeometry, planetMaterial);\n    planetMesh.position.set(0, 10, 0);\n    meshes.push(planetMesh);\n\n    scene.add(planetMesh);\n\n    if (planet.has_clouds) {\n      let cloudsShader = planetCloudShader;\n      let planetCloudGeometry = new THREE.SphereGeometry(planetSize + 0.1, 32, 32);\n      geometries.push(planetCloudGeometry);\n      uniforms.numOctaves = { value: 16 };\n      let cloudsMaterial = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        fragmentShader: cloudsShader,\n        vertexShader: vertexShader,\n        transparent: true,\n      });\n      materials.push(cloudsMaterial);\n      let clouds = new THREE.Mesh(planetCloudGeometry, cloudsMaterial);\n      clouds.position.set(0, 10, 0);\n      meshes.push(clouds);\n\n      scene.add(clouds);\n    }\n\n    initialized = true;\n    animate();\n  }\n\n  onMount(() => {\n    newSeed();\n  });\n</script>\n\n<svelte:head>\n  <title>Planet Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"main scifi\">\n  <h1>Planet Generator</h1>\n\n  <p>This lets you generate a planet. It uses WebGL and your graphics card.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"planetType\">Planet Type</label>\n    <select bind:value={planetType} id=\"planetType\">\n      <option>random</option>\n      {#each planetTypes as pType}\n        <option>{pType}</option>\n      {/each}\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <h2>{planet.name}</h2>\n\n  <canvas id=\"render\" />\n\n  <p>{planet.description}</p>\n\n  <p><strong>Planet Type:</strong> {planet.classification.name}</p>\n  <p><strong>Population:</strong> {planet.populationFriendly}</p>\n  <p><strong>Government:</strong> {planet.government}</p>\n  <p><strong>Culture:</strong> {planet.culture}</p>\n  <p>\n    <strong>Distance from Star:</strong>\n    {new Intl.NumberFormat().format(planet.distance_from_sun)} AU\n  </p>\n  <p>\n    <strong>Mass:</strong>\n    {new Intl.NumberFormat().format(planet.mass)} &times; 10<sup>24</sup> kg ({new Intl.NumberFormat().format(\n      Math.floor((planet.mass / 5.9722) * 100),\n    )}% Earth's mass)\n  </p>\n  <p>\n    <strong>Diameter:</strong>\n    {new Intl.NumberFormat().format(Math.floor(planet.diameter))} km ({new Intl.NumberFormat().format(\n      Math.floor((planet.diameter / 12756) * 100),\n    )}% Earth's diameter)\n  </p>\n  <p>\n    <strong>Gravity:</strong>\n    {new Intl.NumberFormat().format(planet.gravity)} m/s<sup>2</sup>\n    ({new Intl.NumberFormat().format(Math.floor((planet.gravity / 9.81) * 100))}% Earth's gravity)\n  </p>\n  <p>\n    <strong>Orbital Period:</strong>\n    {new Intl.NumberFormat().format(Math.floor(planet.orbital_period))} days\n  </p>\n</section>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/scifi.scss';\n\n  canvas {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n</style>\n"],"names":["Classifications.getClassificationNames"],"mappings":";;;;;;;;;;;;;AAgBM,MAAA,cAAcA;MAKd,OAAO,IAAI,aAAa,EAAE;AAC9B,SAAO,IAAI,WAAW,IAAI,CAAA;MAEtB,kBAAsB,IAAA;AACtB,MAAA,YAAA,IAAgB,gBAAgB,eAAe;AAC/C,MAAA,SAAS,UAAU;AAEnB,MAAY,MAAM,MAAA;;AAuJuB,SAAA,GAAA,SAAA,QAAA,qCAAA,SAAA,QAAA,kDAAA,EAAA,oCAAA,EAAA,ocAAA,cAAA,SAAA,qRAOlC,aAAW,WAAA;AACP,WAAA,UAAA,cAAA,SAAA,oBAAA,KAAK,CAAA;AAAA,qPAQf,OAAO,IAAI,CAIZ,wFAAA,OAAA,OAAO,WAAW,CAAA,sHAAA,OAEY,OAAO,eAAe,IAAI,CAC3B,oHAAA,OAAA,OAAO,kBAAkB,CAAA,qHAAA,OACzB,OAAO,UAAU,CACpB,iHAAA,OAAA,OAAO,OAAO,yIAGrC,KAAK,aAAY,EAAG,OAAO,OAAO,iBAAiB,CAAA,CAAA,kHAAA,OAAA,IAInD,KAAK,aAAY,EAAG,OAAO,OAAO,IAAI,6FAAoC,KAAK,aAAY,EAAG,OACjG,KAAK,MAAO,OAAO,OAAO,SAAU,GAAG,CAKpC,CAAA,CAAA,sIAAA,OAAA,IAAA,KAAK,aAAY,EAAG,OAAO,KAAK,MAAM,OAAO,QAAQ,CAAa,CAAA,CAAA,QAAA,OAAA,IAAA,KAAK,aAAY,EAAG,OACzF,KAAK,MAAO,OAAO,WAAW,QAAS,GAAG,CAKvC,CAAA,CAAA,wIAAA,OAAA,IAAA,KAAK,eAAe,OAAO,OAAO,OAAO,CAAA,CAAA;AAAA,OACxC,OAAA,IAAA,KAAK,aAAe,EAAA,OAAO,KAAK,MAAO,OAAO,UAAU,OAAQ,GAAG,CAIpE,CAAA,CAAA,+IAAA,OAAA,IAAA,KAAK,aAAY,EAAG,OAAO,KAAK,MAAM,OAAO,cAAc,CAAA,CAAA,CAAA;;"}