{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../src/lib/characters/family/families.ts","../../../../../../../src/routes/fantasy/family/+page.svelte"],"sourcesContent":["import * as AgeCategories from \"$lib/age/age_categories.js\";\nimport * as Characters from \"$lib/characters/characters.js\";\nimport type Gender from \"$lib/gender/gender.js\";\nimport * as SizeMatrix from \"$lib/size/size_matrix.js\";\nimport human from \"$lib/species/sentient/human.js\";\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport * as RND from \"@ironarachne/rng\";\nimport random from \"random\";\nimport type Character from \"../character\";\nimport type Family from \"./family\";\nimport type FamilyGeneratorConfig from \"./family_generator_config\";\nimport type FamilyMember from \"./family_member\";\n\nexport function generate(config: FamilyGeneratorConfig): Family {\n  let family: Family = {\n    name: \"\",\n    familyNameGenerator: config.rootFamilyNameGenerator,\n    femaleNameGenerator: config.rootFemaleNameGenerator,\n    maleNameGenerator: config.rootMaleNameGenerator,\n    members: [],\n  };\n\n  let genderNames = [];\n  for (let i = 0; i < config.species.genders.length; i++) {\n    genderNames.push(config.species.genders[i].name);\n  }\n\n  let charGenConfig = {\n    speciesOptions: [config.species],\n    ageCategoryNames: [config.species.ageCategories[3].name],\n    familyNameGenerator: family.familyNameGenerator,\n    femaleNameGenerator: family.femaleNameGenerator,\n    maleNameGenerator: family.maleNameGenerator,\n    genderNameOptions: genderNames,\n    useAdaptiveNames: false,\n    physicalTraitOverrides: [],\n  };\n\n  let parent1: FamilyMember = {\n    id: 0,\n    character: Characters.generate(charGenConfig),\n    parents: [],\n    children: [],\n    mate: 0,\n  };\n  parent1.character.age += 5;\n  parent1.character.description = Characters.describe(parent1.character);\n\n  let mateGender = getMateGender(parent1.character.gender, config.species.genders);\n  charGenConfig.genderNameOptions = [mateGender.name];\n  let parent2: FamilyMember = {\n    id: 1,\n    character: Characters.generate(charGenConfig),\n    parents: [],\n    children: [],\n    mate: 0,\n  };\n  parent2.character.age += 5;\n  parent2.character.description = Characters.describe(parent2.character);\n\n  if (parent1.character.gender.name == config.dominantFamilyNameGender.name) {\n    parent2.character.lastName = parent1.character.lastName;\n    family.name = parent1.character.lastName;\n  } else {\n    parent1.character.lastName = parent2.character.lastName;\n    family.name = parent2.character.lastName;\n  }\n\n  parent1.mate = parent2.id;\n  parent2.mate = parent1.id;\n\n  family.members.push(parent1);\n  family.members.push(parent2);\n\n  for (let i = 0; i < config.iterations; i++) {\n    family = iterate(family, config);\n  }\n\n  return family;\n}\n\nexport function getChildren(family: Family, parent: FamilyMember): FamilyMember[] {\n  let children: FamilyMember[] = [];\n  for (let i = 0; i < parent.children.length; i++) {\n    children.push(family.members[parent.children[i]]);\n  }\n\n  return children;\n}\n\nexport function getDefaultConfig(): FamilyGeneratorConfig {\n  let generatorSets = MUN.allSets();\n  let generatorSet = MUN.getSetByName(\"human\", generatorSets);\n  let config = {\n    species: human,\n    iterations: 10,\n    rootFamilyNameGenerator: generatorSet.family,\n    rootFemaleNameGenerator: generatorSet.female,\n    rootMaleNameGenerator: generatorSet.male,\n    dominantFamilyNameGender: human.genders[1],\n  };\n\n  return config;\n}\n\nexport function getMate(family: Family, person: FamilyMember): FamilyMember {\n  return family.members[person.mate];\n}\n\nexport function getParents(family: Family, person: FamilyMember): FamilyMember[] {\n  let parents = [];\n  for (let i = 0; i < person.parents.length; i++) {\n    parents.push(family.members[person.parents[i]]);\n  }\n\n  return parents;\n}\n\nexport function iterate(family: Family, config: FamilyGeneratorConfig): Family {\n  const ageStep = 5;\n\n  for (let i = 0; i < family.members.length; i++) {\n    if (family.members[i].character.status == \"alive\") {\n      family.members[i].character.age += ageStep;\n    }\n\n    if (\n      family.members[i].character.age\n        > AgeCategories.getMaxAge(family.members[i].character.species.ageCategories)\n    ) {\n      // This person died of old age\n      family.members[i].character.status = \"dead\";\n    } else {\n      // This person aged normally\n      let newAgeCategory = AgeCategories.getCategoryFromAge(\n        family.members[i].character.age,\n        family.members[i].character.species.ageCategories,\n      );\n\n      if (newAgeCategory.name != family.members[i].character.ageCategory.name) {\n        // This person aged into a new age category and needs a new height and weight\n        let sizeGeneratorConfig = SizeMatrix.getSizeConfig(\n          family.members[i].character.gender.name,\n          newAgeCategory.name,\n          family.members[i].character.species.sizeGeneratorConfigMatrix,\n        );\n\n        family.members[i].character.height = random.int(sizeGeneratorConfig.minHeight, sizeGeneratorConfig.maxHeight);\n        family.members[i].character.weight = random.int(sizeGeneratorConfig.minWeight, sizeGeneratorConfig.maxWeight);\n      }\n      family.members[i].character.ageCategory = newAgeCategory;\n    }\n\n    family.members[i].character.description = Characters.describe(family.members[i].character);\n\n    if (family.members[i].character.status == \"dead\") {\n      continue;\n    }\n\n    if (RND.simple(100) > 98) {\n      // There's a 2% chance something horrible kills this person\n      family.members[i].character.status = \"dead\";\n      continue;\n    }\n\n    if (needsChildren(family.members[i]) && RND.simple(100) > 30) {\n      let numberOfChildren = random.int(1, 4);\n      for (let j = 0; j < numberOfChildren; j++) {\n        let child = getNewChild(i, family.members[i].mate, family);\n        let newMember: FamilyMember = {\n          id: family.members.length,\n          character: child,\n          children: [],\n          parents: [i, family.members[i].mate],\n          mate: -1,\n        };\n        family.members[i].children.push(newMember.id);\n        family.members[family.members[i].mate].children.push(newMember.id);\n\n        if (\n          family.members[i].character.gender.name == config.dominantFamilyNameGender.name\n        ) {\n          newMember.character.lastName = family.members[i].character.lastName;\n        } else {\n          newMember.character.lastName = family.members[family.members[i].mate].character.lastName;\n        }\n\n        family.members.push(newMember);\n      }\n    }\n\n    if (needsMate(family.members[i]) && RND.simple(100) > 50) {\n      let mate = getNewMate(family.members[i], family);\n      let newMember: FamilyMember = { id: family.members.length, character: mate, children: [], parents: [], mate: i };\n      family.members[i].mate = newMember.id;\n\n      if (family.members[i].character.gender.name == config.dominantFamilyNameGender.name) {\n        newMember.character.lastName = family.members[i].character.lastName;\n      } else {\n        family.members[i].character.lastName = newMember.character.lastName;\n      }\n\n      family.members.push(newMember);\n    }\n  }\n\n  return family;\n}\n\nfunction getNewChild(parent1Index: number, parent2Index: number, family: Family): Character {\n  let parent1 = family.members[parent1Index].character;\n  let parent2 = family.members[parent2Index].character;\n\n  let physicalTraits = parent1.physicalTraits.concat(parent2.physicalTraits);\n  let uniqueNames: string[] = [];\n  let traitOverrides = [];\n  physicalTraits = RND.shuffle(physicalTraits);\n  for (let i = 0; i < physicalTraits.length; i++) {\n    if (!uniqueNames.includes(physicalTraits[i].name)) {\n      traitOverrides.push(physicalTraits[i]);\n      uniqueNames.push(physicalTraits[i].name);\n    }\n  }\n\n  let charConfig = Characters.getDefaultCharacterGeneratorConfig();\n  charConfig.speciesOptions = [parent1.species, parent2.species];\n  charConfig.ageCategoryNames = [\"infant\", \"toddler\"];\n  charConfig.familyNameGenerator = family.familyNameGenerator;\n  charConfig.femaleNameGenerator = family.femaleNameGenerator;\n  charConfig.maleNameGenerator = family.maleNameGenerator;\n  let genderNames = [];\n  for (let i = 0; i < parent1.species.genders.length; i++) {\n    genderNames.push(parent1.species.genders[i].name);\n  }\n  charConfig.genderNameOptions = genderNames;\n  charConfig.physicalTraitOverrides = traitOverrides;\n\n  let child = Characters.generate(charConfig);\n\n  return child;\n}\n\nfunction getNewMate(member: FamilyMember, family: Family): Character {\n  let gender = member.character.gender;\n\n  let charConfig = Characters.getDefaultCharacterGeneratorConfig();\n  charConfig.speciesOptions = [member.character.species];\n  charConfig.ageCategoryNames = [\"adult\"];\n  charConfig.familyNameGenerator = family.familyNameGenerator;\n  charConfig.femaleNameGenerator = family.femaleNameGenerator;\n  charConfig.maleNameGenerator = family.maleNameGenerator;\n  charConfig.genderNameOptions = [getMateGender(gender, member.character.species.genders).name];\n\n  let mate = Characters.generate(charConfig);\n\n  return mate;\n}\n\nfunction getMateGender(gender1: Gender, genders: Gender[]): Gender {\n  for (let i = 0; i < genders.length; i++) {\n    if (genders[i].name != gender1.name) {\n      return genders[i];\n    }\n  }\n\n  return gender1;\n}\n\nfunction needsChildren(member: FamilyMember): boolean {\n  if (\n    member.mate != -1\n    && member.children.length == 0\n    && member.character.ageCategory.name == \"adult\"\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction needsMate(member: FamilyMember): boolean {\n  if (member.character.ageCategory.name == \"adult\" && member.mate == -1) {\n    return true;\n  }\n\n  return false;\n}\n","<script lang=\"ts\">\n  import * as CommonSpecies from '$lib/species/common';\n  import * as RND from \"@ironarachne/rng\";\n  import random from \"random\";\n  import seedrandom from \"seedrandom\";\n  import * as Families from \"$lib/characters/family/families.js\";\n  import * as MUN from \"@ironarachne/made-up-names\";\n  import type Gender from \"$lib/gender/gender\";\n  import type Species from \"$lib/species/species\";\n  import type NameGenerator from '@ironarachne/made-up-names/dist/generator';\n\n  let seed = RND.randomString(13);\n  let availableSpecies = CommonSpecies.sentient();\n  let selectedSpecies = \"any\";\n  let species = CommonSpecies.randomWeighted(availableSpecies);\n  let iterations = 2;\n  const generatorSets = MUN.allSets();\n  let nameGeneratorSet;\n\n  try {\n    nameGeneratorSet = MUN.getSetByName(species.name, generatorSets);\n  } catch (e) {\n    console.debug(e);\n    nameGeneratorSet = MUN.getSetByName(\"fantasy\", generatorSets);\n  }\n\n  let familyNameGen: NameGenerator = nameGeneratorSet.family;\n  let femaleNameGen: NameGenerator = nameGeneratorSet.female;\n  let maleNameGen: NameGenerator = nameGeneratorSet.male;\n  let lastNameTradition = \"male\";\n  let config = Families.getDefaultConfig();\n  config.species = species;\n  config.iterations = iterations;\n  config.rootFamilyNameGenerator = familyNameGen;\n  config.rootFemaleNameGenerator = femaleNameGen;\n  config.rootMaleNameGenerator = maleNameGen;\n  config.dominantFamilyNameGender = getDominantGender();\n\n  let family = Families.generate(config);\n\n  function generate() {\n    random.use(seedrandom(seed));\n    species = getSpecies(selectedSpecies);\n\n    try {\n      nameGeneratorSet = MUN.getSetByName(species.name, generatorSets);\n    } catch (e) {\n      console.debug(e);\n      nameGeneratorSet = MUN.getSetByName(\"fantasy\", generatorSets);\n    }\n\n    familyNameGen = nameGeneratorSet.family;\n    femaleNameGen = nameGeneratorSet.female;\n    maleNameGen = nameGeneratorSet.male;\n    config.species = species;\n    config.iterations = iterations;\n    config.rootFamilyNameGenerator = familyNameGen;\n    config.rootFemaleNameGenerator = femaleNameGen;\n    config.rootMaleNameGenerator = maleNameGen;\n    config.dominantFamilyNameGender = getDominantGender();\n\n    family = Families.generate(config);\n  }\n\n  function getDominantGender(): Gender {\n    for (let i=0;i<species.genders.length;i++) {\n      if (species.genders[i].name == lastNameTradition) {\n        return species.genders[i];\n      }\n    }\n\n    throw new Error(\"Dominant gender not set\");\n  }\n\n  function getSpecies(name: string): Species {\n    if (name == \"any\") {\n      return CommonSpecies.randomWeighted(availableSpecies);\n    }\n\n    for (let i=0;i<availableSpecies.length;i++) {\n      if (availableSpecies[i].name == name) {\n        return availableSpecies[i];\n      }\n    }\n\n    throw new Error(\"Species not found\");\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/fantasy.scss';\n</style>\n\n<svelte:head>\n  <title>Fantasy Family Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"fantasy main\">\n  <h1>Fantasy Family Generator</h1>\n\n  <p>This generator creates a family. Note that more than 10 iterations can be quite slow. More than 30 may or may not crash your browser.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\"/>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"iterations\">Iterations</label>\n    <input type=\"number\" name=\"iterations\" bind:value={iterations} id=\"iterations\" min=\"1\" max=\"10\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"species\">Species</label>\n    <select id=\"species\" bind:value={selectedSpecies}>\n      <option>any</option>\n      {#each availableSpecies as option}\n      <option>{option.name}</option>\n      {/each}\n    </select>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"last-name-tradition\">Last name tradition (gender)</label>\n    <select id=\"last-name-tradition\" bind:value={lastNameTradition}>\n      <option>male</option>\n      <option>female</option>\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <h2>The {family.name} Family</h2>\n\n  {#each family.members as member}\n    <h3>{member.character.firstName} {member.character.lastName}</h3>\n    <p>{member.character.age}-year-old {member.character.species.name} {member.character.ageCategory.noun} {#if member.character.status == \"dead\"}(dead){/if}</p>\n    <p>{member.character.description}</p>\n    {#if member.mate != -1}\n      <p><strong>Mate:</strong> {Families.getMate(family, member).character.firstName} {Families.getMate(family, member).character.lastName}</p>\n    {/if}\n    {#if member.children.length > 0}\n      <h4>Children</h4>\n      <ul>\n        {#each Families.getChildren(family, member) as child}\n          <li>{child.character.firstName} {child.character.lastName}</li>\n        {/each}\n      </ul>\n    {/if}\n    {#if member.parents.length > 0}\n      <h4>Parents</h4>\n      <ul>\n        {#each Families.getParents(family, member) as parent}\n          <li>{parent.character.firstName} {parent.character.lastName}</li>\n        {/each}\n      </ul>\n    {/if}\n  {/each}\n</section>\n"],"names":["Characters.generate","Characters.describe","AgeCategories.getMaxAge","AgeCategories.getCategoryFromAge","SizeMatrix.getSizeConfig","Characters.getDefaultCharacterGeneratorConfig","CommonSpecies.sentient","CommonSpecies.randomWeighted","Families.getDefaultConfig","Families.generate","Families.getMate","Families.getChildren","Families.getParents"],"mappings":"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"}