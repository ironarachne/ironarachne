{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../src/lib/characters/family/generatorconfig.ts","../../../../../../../src/lib/characters/family/familymember.ts","../../../../../../../src/lib/characters/family/family.ts","../../../../../../../src/lib/characters/family/generator.ts","../../../../../../../src/routes/fantasy/family/+page.svelte"],"sourcesContent":["\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport Gender from \"../../gender.js\";\nimport type Species from \"../../species/species.js\";\n\nexport default class FamilyGeneratorConfig {\n  species: Species;\n  iterations: number;\n  rootFamilyNameGenerator: MUN.Generator;\n  rootFemaleNameGenerator: MUN.Generator;\n  rootMaleNameGenerator: MUN.Generator;\n  dominantFamilyNameGender: Gender;\n\n  constructor(\n    species: Species,\n    iterations: number,\n    nameGenFamily: MUN.Generator,\n    nameGenFemale: MUN.Generator,\n    nameGenMale: MUN.Generator,\n    dominantFamilyNameGender: Gender,\n  ) {\n    this.species = species;\n    this.iterations = iterations;\n    this.rootFamilyNameGenerator = nameGenFamily;\n    this.rootFemaleNameGenerator = nameGenFemale;\n    this.rootMaleNameGenerator = nameGenMale;\n    this.dominantFamilyNameGender = dominantFamilyNameGender;\n  }\n}\n","\"use strict\";\n\nimport Character from \"../character.js\";\n\nexport default class FamilyMember {\n  id: number;\n  character: Character;\n  children: number[];\n  parents: number[];\n  mate: number;\n\n  constructor(id: number) {\n    this.id = id;\n    this.children = [];\n    this.parents = [];\n    this.mate = -1;\n  }\n}\n","\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport FamilyMember from \"./familymember.js\";\n\nexport default class Family {\n  name: string;\n  members: FamilyMember[];\n  familyNameGenerator: MUN.Generator;\n  femaleNameGenerator: MUN.Generator;\n  maleNameGenerator: MUN.Generator;\n\n  constructor() {\n    this.name = \"\";\n    this.members = [];\n  }\n\n  getChildren(parent: FamilyMember): FamilyMember[] {\n    let children = [];\n    for (let i = 0; i < parent.children.length; i++) {\n      children.push(this.members[parent.children[i]]);\n    }\n\n    return children;\n  }\n\n  getMate(person: FamilyMember): FamilyMember {\n    return this.members[person.mate];\n  }\n\n  getParents(person: FamilyMember): FamilyMember[] {\n    let parents = [];\n    for (let i = 0; i < person.parents.length; i++) {\n      parents.push(this.members[person.parents[i]]);\n    }\n\n    return parents;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport random from \"random\";\nimport * as AgeCategories from \"../../age/agecategories.js\";\nimport Gender from \"../../gender.js\";\nimport Character from \"../character.js\";\nimport CharacterGenerator from \"../generator.js\";\nimport CharacterGeneratorConfig from \"../generatorconfig.js\";\nimport Family from \"./family.js\";\nimport FamilyMember from \"./familymember.js\";\nimport FamilyGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class FamilyGenerator {\n  config: FamilyGeneratorConfig;\n\n  constructor(config: FamilyGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Family {\n    let family = new Family();\n    family.familyNameGenerator = this.config.rootFamilyNameGenerator;\n    family.femaleNameGenerator = this.config.rootFemaleNameGenerator;\n    family.maleNameGenerator = this.config.rootMaleNameGenerator;\n\n    let charGenConfig = new CharacterGeneratorConfig();\n    charGenConfig.speciesOptions = [this.config.species];\n    charGenConfig.ageCategories = [\"young adult\"];\n    charGenConfig.familyNameGenerator = family.familyNameGenerator;\n    charGenConfig.femaleNameGenerator = family.femaleNameGenerator;\n    charGenConfig.maleNameGenerator = family.maleNameGenerator;\n\n    let genderNames = [];\n    for (let i = 0; i < this.config.species.genders.length; i++) {\n      genderNames.push(this.config.species.genders[i].name);\n    }\n    charGenConfig.genderNameOptions = genderNames;\n\n    let charGen = new CharacterGenerator(charGenConfig);\n\n    let parent1 = new FamilyMember(0);\n    parent1.character = charGen.generate();\n    parent1.character.age += 5;\n    parent1.character.description = charGen.describe(parent1.character);\n\n    let mateGender = getMateGender(parent1.character.gender, this.config.species.genders);\n    charGen.config.genderNameOptions = [mateGender.name];\n    let parent2 = new FamilyMember(1);\n    parent2.character = charGen.generate();\n    parent2.character.age += 5;\n    parent2.character.description = charGen.describe(parent2.character);\n\n    if (parent1.character.gender.name == this.config.dominantFamilyNameGender.name) {\n      parent2.character.lastName = parent1.character.lastName;\n      family.name = parent1.character.lastName;\n    } else {\n      parent1.character.lastName = parent2.character.lastName;\n      family.name = parent2.character.lastName;\n    }\n\n    parent1.mate = parent2.id;\n    parent2.mate = parent1.id;\n\n    family.members.push(parent1);\n    family.members.push(parent2);\n\n    for (let i = 0; i < this.config.iterations; i++) {\n      family = this.iterate(family);\n    }\n\n    return family;\n  }\n\n  iterate(family: Family): Family {\n    const ageStep = 5;\n    let charGenConfig = new CharacterGeneratorConfig();\n    const charGen = new CharacterGenerator(charGenConfig);\n\n    for (let i = 0; i < family.members.length; i++) {\n      if (family.members[i].character.status == \"alive\") {\n        family.members[i].character.age += ageStep;\n      }\n\n      if (\n        family.members[i].character.age\n          > AgeCategories.getMaxAge(family.members[i].character.gender.ageCategories)\n      ) {\n        family.members[i].character.status = \"dead\";\n      } else {\n        let newAgeCategory = AgeCategories.getCategoryFromAge(\n          family.members[i].character.age,\n          family.members[i].character.gender.ageCategories,\n        );\n        if (newAgeCategory.name != family.members[i].character.ageCategory.name) {\n          family.members[i].character.height = newAgeCategory.randomHeight();\n          family.members[i].character.weight = newAgeCategory.randomWeight();\n        }\n        family.members[i].character.ageCategory = newAgeCategory;\n      }\n\n      family.members[i].character.description = charGen.describe(family.members[i].character);\n\n      if (family.members[i].character.status == \"dead\") {\n        continue;\n      }\n\n      if (RND.simple(100) > 98) {\n        // There's a 2% chance something horrible kills this person\n        family.members[i].character.status = \"dead\";\n        continue;\n      }\n\n      if (needsChildren(family.members[i]) && RND.simple(100) > 30) {\n        let numberOfChildren = random.int(1, 4);\n        for (let j = 0; j < numberOfChildren; j++) {\n          let child = getNewChild(i, family.members[i].mate, family);\n          let newMember = new FamilyMember(family.members.length);\n          newMember.character = child;\n          newMember.parents = [i, family.members[i].mate];\n          family.members[i].children.push(newMember.id);\n          family.members[family.members[i].mate].children.push(newMember.id);\n\n          if (\n            family.members[i].character.gender.name == this.config.dominantFamilyNameGender.name\n          ) {\n            newMember.character.lastName = family.members[i].character.lastName;\n          } else {\n            newMember.character.lastName = family.members[family.members[i].mate].character.lastName;\n          }\n\n          family.members.push(newMember);\n        }\n      }\n\n      if (needsMate(family.members[i]) && RND.simple(100) > 50) {\n        let mate = getNewMate(family.members[i], family);\n        let newMember = new FamilyMember(family.members.length);\n        newMember.character = mate;\n        newMember.mate = i;\n        family.members[i].mate = newMember.id;\n\n        if (family.members[i].character.gender.name == this.config.dominantFamilyNameGender.name) {\n          newMember.character.lastName = family.members[i].character.lastName;\n        } else {\n          family.members[i].character.lastName = newMember.character.lastName;\n        }\n\n        family.members.push(newMember);\n      }\n    }\n\n    return family;\n  }\n}\n\nfunction getNewChild(parent1Index: number, parent2Index: number, family: Family): Character {\n  let parent1 = family.members[parent1Index].character;\n  let parent2 = family.members[parent2Index].character;\n\n  let physicalTraits = parent1.physicalTraits.concat(parent2.physicalTraits);\n  let uniqueNames: string[] = [];\n  let traitOverrides = [];\n  physicalTraits = RND.shuffle(physicalTraits);\n  for (let i = 0; i < physicalTraits.length; i++) {\n    if (!uniqueNames.includes(physicalTraits[i].name)) {\n      traitOverrides.push(physicalTraits[i]);\n      uniqueNames.push(physicalTraits[i].name);\n    }\n  }\n\n  let charConfig = new CharacterGeneratorConfig();\n  charConfig.speciesOptions = [parent1.species, parent2.species];\n  charConfig.ageCategories = [\"infant\", \"toddler\"];\n  charConfig.familyNameGenerator = family.familyNameGenerator;\n  charConfig.femaleNameGenerator = family.femaleNameGenerator;\n  charConfig.maleNameGenerator = family.maleNameGenerator;\n  let genderNames = [];\n  for (let i = 0; i < parent1.species.genders.length; i++) {\n    genderNames.push(parent1.species.genders[i].name);\n  }\n  charConfig.genderNameOptions = genderNames;\n  charConfig.physicalTraitOverrides = traitOverrides;\n\n  let charGen = new CharacterGenerator(charConfig);\n\n  let child = charGen.generate();\n\n  return child;\n}\n\nfunction getNewMate(member: FamilyMember, family: Family): Character {\n  let gender = member.character.gender;\n\n  let charConfig = new CharacterGeneratorConfig();\n  charConfig.speciesOptions = [member.character.species];\n  charConfig.ageCategories = [\"adult\"];\n  charConfig.familyNameGenerator = family.familyNameGenerator;\n  charConfig.femaleNameGenerator = family.femaleNameGenerator;\n  charConfig.maleNameGenerator = family.maleNameGenerator;\n  charConfig.genderNameOptions = [getMateGender(gender, member.character.species.genders).name];\n\n  let charGen = new CharacterGenerator(charConfig);\n\n  let mate = charGen.generate();\n\n  return mate;\n}\n\nfunction getMateGender(gender1: Gender, genders: Gender[]): Gender {\n  for (let i = 0; i < genders.length; i++) {\n    if (genders[i].name != gender1.name) {\n      return genders[i];\n    }\n  }\n\n  return gender1;\n}\n\nfunction needsChildren(member: FamilyMember): boolean {\n  if (\n    member.mate != -1\n    && member.children.length == 0\n    && member.character.ageCategory.name == \"adult\"\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction needsMate(member: FamilyMember): boolean {\n  if (member.character.ageCategory.name == \"adult\" && member.mate == -1) {\n    return true;\n  }\n\n  return false;\n}\n","<script lang=\"ts\">\n  import * as CommonSpecies from '$lib/species/common';\n  import * as FantasySpecies from \"$lib/species/fantasy\";\n  import * as RND from \"@ironarachne/rng\";\n  import random from \"random\";\n  import seedrandom from \"seedrandom\";\n  import FamilyGeneratorConfig from \"$lib/characters/family/generatorconfig\";\n  import FamilyGenerator from \"$lib/characters/family/generator\";\n  import type Gender from \"$lib/gender\";\n  import type Species from \"$lib/species/species\";\n  import type NameGenerator from '@ironarachne/made-up-names/dist/generator';\n\n  let seed = RND.randomString(13);\n  let availableSpecies = FantasySpecies.all();\n  let selectedSpecies = \"any\";\n  let species = CommonSpecies.randomWeighted(availableSpecies);\n  let iterations = 2;\n  if (species.nameGeneratorSet.family === null) {\n    throw new Error(\"Species does not have a family name generator.\")\n  }\n  if (species.nameGeneratorSet.female === null) {\n    throw new Error(\"Species does not have a female name generator.\")\n  }\n  if (species.nameGeneratorSet.male === null) {\n    throw new Error(\"Species does not have a male name generator.\")\n  }\n  let familyNameGen: NameGenerator = species.nameGeneratorSet.family;\n  let femaleNameGen: NameGenerator = species.nameGeneratorSet.female;\n  let maleNameGen: NameGenerator = species.nameGeneratorSet.male;\n  let lastNameTradition = \"male\";\n  let config = new FamilyGeneratorConfig(species, iterations, familyNameGen, femaleNameGen, maleNameGen, getDominantGender());\n  let generator = new FamilyGenerator(config);\n  let family = generator.generate();\n\n  function generate() {\n    random.use(seedrandom(seed));\n    species = getSpecies(selectedSpecies);\n    if (species.nameGeneratorSet.family === null) {\n      throw new Error(\"Species does not have a family name generator.\")\n    }\n    if (species.nameGeneratorSet.female === null) {\n      throw new Error(\"Species does not have a female name generator.\")\n    }\n    if (species.nameGeneratorSet.male === null) {\n      throw new Error(\"Species does not have a male name generator.\")\n    }\n    familyNameGen = species.nameGeneratorSet.family;\n    femaleNameGen = species.nameGeneratorSet.female;\n    maleNameGen = species.nameGeneratorSet.male;\n    config = new FamilyGeneratorConfig(species, iterations, familyNameGen, femaleNameGen, maleNameGen, getDominantGender());\n    generator.config = config;\n    family = generator.generate();\n  }\n\n  function getDominantGender(): Gender {\n    for (let i=0;i<species.genders.length;i++) {\n      if (species.genders[i].name == lastNameTradition) {\n        return species.genders[i];\n      }\n    }\n\n    throw new Error(\"Dominant gender not set\");\n  }\n\n  function getSpecies(name: string): Species {\n    if (name == \"any\") {\n      return CommonSpecies.randomWeighted(availableSpecies);\n    }\n\n    for (let i=0;i<availableSpecies.length;i++) {\n      if (availableSpecies[i].name == name) {\n        return availableSpecies[i];\n      }\n    }\n\n    throw new Error(\"Species not found\");\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/fantasy.scss';\n</style>\n\n<svelte:head>\n  <title>Fantasy Family Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"fantasy main\">\n  <h1>Fantasy Family Generator</h1>\n\n  <p>This generator creates a family. Note that more than 10 iterations can be quite slow. More than 30 may or may not crash your browser.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\"/>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"iterations\">Iterations</label>\n    <input type=\"number\" name=\"iterations\" bind:value={iterations} id=\"iterations\" min=\"1\" max=\"10\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"species\">Species</label>\n    <select id=\"species\" bind:value={selectedSpecies}>\n      <option>any</option>\n      {#each availableSpecies as option}\n      <option>{option.name}</option>\n      {/each}\n    </select>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"last-name-tradition\">Last name tradition (gender)</label>\n    <select id=\"last-name-tradition\" bind:value={lastNameTradition}>\n      <option>male</option>\n      <option>female</option>\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <h2>The {family.name} Family</h2>\n\n  {#each family.members as member}\n    <h3>{member.character.firstName} {member.character.lastName}</h3>\n    <p>{member.character.age}-year-old {member.character.species.name} {member.character.ageCategory.noun} {#if member.character.status == \"dead\"}(dead){/if}</p>\n    <p>{member.character.description}</p>\n    {#if member.mate != -1}\n      <p><strong>Mate:</strong> {family.getMate(member).character.firstName} {family.getMate(member).character.lastName}</p>\n    {/if}\n    {#if member.children.length > 0}\n      <h4>Children</h4>\n      <ul>\n        {#each family.getChildren(member) as child}\n          <li>{child.character.firstName} {child.character.lastName}</li>\n        {/each}\n      </ul>\n    {/if}\n    {#if member.parents.length > 0}\n      <h4>Parents</h4>\n      <ul>\n        {#each family.getParents(member) as parent}\n          <li>{parent.character.firstName} {parent.character.lastName}</li>\n        {/each}\n      </ul>\n    {/if}\n  {/each}\n</section>\n"],"names":["AgeCategories.getMaxAge","AgeCategories.getCategoryFromAge","FantasySpecies.all","CommonSpecies.randomWeighted"],"mappings":"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"}