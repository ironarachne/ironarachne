{"version":3,"file":"agecategories.js","sources":["../../../../src/lib/measurements.ts","../../../../src/lib/age/agecategory.ts","../../../../src/lib/age/agecategories.ts"],"sourcesContent":["\"use strict\";\n\nexport function cmToInches(cm: number): number {\n  return cm * 0.3937;\n}\n\nexport function kgToPounds(kg: number): number {\n  return kg * 2.2046;\n}\n\nexport function metersToFeet(meters: number): number {\n  return meters * 3.2808;\n}\n\nexport function inchesToCM(inches: number): number {\n  return inches * 2.54;\n}\n\nexport function poundsToKG(pounds: number): number {\n  return pounds * 0.4536;\n}\n\nexport function inchesToFeetExpression(inches: number): string {\n  let expression = \"\";\n\n  const feet = Math.floor(inches / 12);\n\n  const remainder = Math.floor(inches % 12);\n\n  expression += feet + \"'\" + remainder + \"\\\"\";\n\n  return expression;\n}\n","\"use strict\";\n\nimport random from \"random\";\nimport * as Dice from \"../dice.js\";\nimport * as Measurements from \"../measurements.js\";\n\nexport default class AgeCategory {\n  name: string;\n  noun: string;\n  minAge: number;\n  maxAge: number;\n  minHeight: number; // in cm\n  maxHeight: number; // in cm\n  minWeight: number; // in kg\n  maxWeight: number; // in kg\n\n  constructor(\n    name: string,\n    noun: string,\n    minAge: number,\n    maxAge: number,\n    minHeight: number,\n    minWeight: number,\n  ) {\n    this.name = name;\n    this.noun = noun;\n    this.minAge = minAge;\n    this.maxAge = maxAge;\n    this.minHeight = minHeight;\n    this.maxHeight = Math.floor(minHeight * 1.05);\n    this.minWeight = minWeight;\n    this.maxWeight = Math.floor(minWeight * 1.05);\n  }\n\n  getDescription(): string {\n    return `Name: ${this.name}, Noun: ${this.noun}, Age: ${this.minAge} - ${this.maxAge}, Height: ${this.minHeight} - ${this.maxHeight}, Weight: ${this.minWeight} - ${this.maxWeight}`;\n  }\n\n  getHeightRange(): string {\n    const metricHeightModifier = Math.max(this.maxHeight - this.minHeight, 4);\n    const metric = this.minHeight\n      + \" + \"\n      + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(metricHeightModifier)))\n      + \" cm\";\n    const imperialHeightModifier = Math.max(\n      Measurements.cmToInches(this.maxHeight - this.minHeight),\n      4,\n    );\n    const imperial = Measurements.inchesToFeetExpression(Measurements.cmToInches(this.minHeight))\n      + \" + \"\n      + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(imperialHeightModifier)))\n      + \" in.\";\n\n    return `${metric} (${imperial})`;\n  }\n\n  getWeightRange(): string {\n    const metricWeightModifier = Math.max(this.maxWeight - this.minWeight, 4);\n    const metric = this.minWeight\n      + \" + \"\n      + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(metricWeightModifier)))\n      + \" kg\";\n    const imperialWeightModifier = Math.max(\n      Math.round(Measurements.kgToPounds(this.maxWeight - this.minWeight)),\n      4,\n    );\n    const imperial = Math.round(Measurements.kgToPounds(this.minWeight))\n      + \" + \"\n      + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(imperialWeightModifier)))\n      + \" lb.\";\n\n    return `${metric} (${imperial})`;\n  }\n\n  randomAge(): number {\n    return random.int(this.minAge, this.maxAge);\n  }\n\n  randomHeight(): number {\n    return random.int(this.minHeight, this.maxHeight);\n  }\n\n  randomWeight(): number {\n    return random.int(this.minWeight, this.maxWeight);\n  }\n}\n","\"use strict\";\n\nimport AgeCategory from \"./agecategory.js\";\n\nexport function getCategoryList(): string[] {\n  const categories = humanStandardFemale();\n\n  let results = [];\n\n  for (let i = 0; i < categories.length; i++) {\n    results.push(categories[i].name);\n  }\n\n  return results;\n}\n\nexport function getCategoryFromAge(age: number, categories: AgeCategory[]): AgeCategory {\n  for (let i = 0; i < categories.length; i++) {\n    if (categories[i].minAge <= age && categories[i].maxAge >= age) {\n      return categories[i];\n    }\n  }\n\n  throw new Error(`Failed to find age category for age ${age}`);\n}\n\nexport function getCategoryFromName(name: string, ageGroups: AgeCategory[]): AgeCategory {\n  for (let i = 0; i < ageGroups.length; i++) {\n    if (ageGroups[i].name == name) {\n      return ageGroups[i];\n    }\n  }\n\n  throw new Error(`Failed to find age category for name ${name}`);\n}\n\nexport function getHumanVariant(\n  ageModifier: number,\n  weightModifier: number,\n  heightModifier: number,\n  gender: string,\n): AgeCategory[] {\n  let categories = humanStandardFemale();\n\n  if (gender == \"male\") {\n    categories = humanStandardMale();\n  }\n\n  for (let i = 0; i < categories.length; i++) {\n    if (i > 0) {\n      categories[i].minAge = categories[i - 1].maxAge + 1;\n    }\n    categories[i].maxAge = Math.ceil(categories[i].maxAge * ageModifier);\n    categories[i].minHeight = Math.ceil(categories[i].minHeight * heightModifier);\n    categories[i].maxHeight = Math.ceil(categories[i].maxHeight * heightModifier);\n    categories[i].minWeight = Math.ceil(categories[i].minWeight * weightModifier);\n    categories[i].maxWeight = Math.ceil(categories[i].maxWeight * weightModifier);\n  }\n\n  return categories;\n}\n\nexport function getMaxAge(categories: AgeCategory[]): number {\n  let maxAge = 0;\n\n  for (let i = 0; i < categories.length; i++) {\n    if (maxAge < categories[i].maxAge) {\n      maxAge = categories[i].maxAge;\n    }\n  }\n\n  return maxAge;\n}\n\nexport function humanStandardFemale(): AgeCategory[] {\n  return [\n    new AgeCategory(\"infant\", \"baby girl\", 0, 1, 49, 2),\n    new AgeCategory(\"toddler\", \"toddler\", 2, 3, 80, 14),\n    new AgeCategory(\"young child\", \"young girl\", 4, 6, 115, 19),\n    new AgeCategory(\"child\", \"girl\", 7, 12, 149, 20),\n    new AgeCategory(\"young adult\", \"young woman\", 13, 19, 158, 57),\n    new AgeCategory(\"adult\", \"woman\", 20, 60, 160, 64),\n    new AgeCategory(\"elderly\", \"woman\", 61, 100, 155, 60),\n  ];\n}\n\nexport function humanStandardMale(): AgeCategory[] {\n  return [\n    new AgeCategory(\"infant\", \"baby boy\", 0, 1, 50, 2),\n    new AgeCategory(\"toddler\", \"toddler\", 2, 3, 85, 14),\n    new AgeCategory(\"young child\", \"young boy\", 4, 6, 115, 20),\n    new AgeCategory(\"child\", \"boy\", 7, 12, 145, 36),\n    new AgeCategory(\"young adult\", \"young man\", 13, 19, 170, 68),\n    new AgeCategory(\"adult\", \"man\", 20, 60, 175, 70),\n    new AgeCategory(\"elderly\", \"man\", 61, 100, 170, 65),\n  ];\n}\n"],"names":["Dice.describeDice","Dice.simplify","Dice.rangeToDiceExpression","Measurements.cmToInches","Measurements.inchesToFeetExpression","Measurements.kgToPounds"],"mappings":"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"}