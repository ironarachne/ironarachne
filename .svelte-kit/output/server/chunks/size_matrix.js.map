{"version":3,"file":"size_matrix.js","sources":["../../../../src/lib/age/age_categories.ts","../../../../src/lib/measurements.ts","../../../../src/lib/size/sizes.ts","../../../../src/lib/size/size_matrix.ts"],"sourcesContent":["import * as RND from \"@ironarachne/rng\";\nimport type AgeCategory from \"./age_category\";\n\nexport function getCategoryList(): string[] {\n  const categories = humanStandard();\n\n  let results = [];\n\n  for (let i = 0; i < categories.length; i++) {\n    results.push(categories[i].name);\n  }\n\n  return results;\n}\n\nexport function getCategoryFromAge(age: number, categories: AgeCategory[]): AgeCategory {\n  for (let i = 0; i < categories.length; i++) {\n    if (categories[i].minAge <= age && categories[i].maxAge >= age) {\n      return categories[i];\n    }\n  }\n\n  throw new Error(`Failed to find age category for age ${age}`);\n}\n\nexport function getCategoryFromName(name: string, ageGroups: AgeCategory[]): AgeCategory {\n  for (let i = 0; i < ageGroups.length; i++) {\n    if (ageGroups[i].name == name) {\n      return ageGroups[i];\n    }\n  }\n\n  throw new Error(`Failed to find age category for name ${name}`);\n}\n\nexport function getDescription(ageCategory: AgeCategory): string {\n  return `Name: ${ageCategory.name}, Noun: ${ageCategory.noun}, Age: ${ageCategory.minAge} - ${ageCategory.maxAge}`;\n}\n\nexport function getHumanVariant(\n  ageModifier: number,\n): AgeCategory[] {\n  let categories = humanStandard();\n\n  return getVariant(ageModifier, categories);\n}\n\nexport function getMaxAge(categories: AgeCategory[]): number {\n  let maxAge = 0;\n\n  for (let i = 0; i < categories.length; i++) {\n    if (maxAge < categories[i].maxAge) {\n      maxAge = categories[i].maxAge;\n    }\n  }\n\n  return maxAge;\n}\n\nexport function getVariant(\n  ageModifier: number,\n  categories: AgeCategory[],\n): AgeCategory[] {\n  for (let i = 0; i < categories.length; i++) {\n    if (i > 0) {\n      categories[i].minAge = categories[i - 1].maxAge + 1;\n    }\n    categories[i].maxAge = Math.ceil(categories[i].maxAge * ageModifier);\n\n    // Since \"teenager\" would be inappropriate if the ages aren't in the teenaged years, we'll change it to \"young adult\".\n    if (categories[i].name == \"teenager\") {\n      categories[i].name = \"young adult\";\n      categories[i].noun = \"young adult\";\n      categories[i].genderedNoun = [\"young woman\", \"young man\", \"young adult\"];\n    }\n  }\n\n  return categories;\n}\n\nexport function humanStandard(): AgeCategory[] {\n  return [\n    {\n      name: \"infant\",\n      noun: \"baby\",\n      minAge: 0,\n      maxAge: 1,\n      genderedNoun: [\"baby girl\", \"baby boy\", \"baby\"],\n      commonality: 1,\n    },\n    {\n      name: \"toddler\",\n      noun: \"toddler\",\n      minAge: 2,\n      maxAge: 3,\n      genderedNoun: [\"toddler\", \"toddler\", \"toddler\"],\n      commonality: 1,\n    },\n    {\n      name: \"young child\",\n      noun: \"young child\",\n      minAge: 4,\n      maxAge: 6,\n      genderedNoun: [\"young girl\", \"young boy\", \"young child\"],\n      commonality: 2,\n    },\n    { name: \"child\", noun: \"child\", minAge: 7, maxAge: 12, genderedNoun: [\"girl\", \"boy\", \"child\"], commonality: 2 },\n    {\n      name: \"teenager\",\n      noun: \"teenager\",\n      minAge: 13,\n      maxAge: 19,\n      genderedNoun: [\"teen girl\", \"teen boy\", \"teenager\"],\n      commonality: 8,\n    },\n    { name: \"adult\", noun: \"adult\", minAge: 20, maxAge: 60, genderedNoun: [\"woman\", \"man\", \"adult\"], commonality: 20 },\n    {\n      name: \"elderly\",\n      noun: \"elder\",\n      minAge: 61,\n      maxAge: 100,\n      genderedNoun: [\"old woman\", \"old man\", \"elder\"],\n      commonality: 3,\n    },\n  ];\n}\n\nexport function randomWeighted(names: string[], options: AgeCategory[]): AgeCategory {\n  let possibleAgeCategories: AgeCategory[] = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (names.includes(options[i].name)) {\n      possibleAgeCategories.push(options[i]);\n    }\n  }\n\n  const ageCategory: AgeCategory = RND.weighted(possibleAgeCategories);\n\n  return ageCategory;\n}\n","export function cmToInches(cm: number): number {\n  return cm * 0.3937;\n}\n\nexport function kgToPounds(kg: number): number {\n  return kg * 2.2046;\n}\n\nexport function metersToFeet(meters: number): number {\n  return meters * 3.2808;\n}\n\nexport function inchesToCM(inches: number): number {\n  return inches * 2.54;\n}\n\nexport function poundsToKG(pounds: number): number {\n  return pounds * 0.4536;\n}\n\nexport function inchesToFeetExpression(inches: number): string {\n  let expression = \"\";\n\n  const feet = Math.floor(inches / 12);\n\n  const remainder = Math.floor(inches % 12);\n\n  expression += feet + \"'\" + remainder + \"\\\"\";\n\n  return expression;\n}\n","import * as Dice from \"$lib/dice\";\nimport * as Measurements from \"$lib/measurements\";\nimport random from \"random\";\nimport type Size from \"./size\";\nimport type SizeGeneratorConfig from \"./size_generator_config\";\nimport type { SizeMatrix, SizeMatrixRow } from \"./size_matrix\";\n\nexport function generate(config: SizeGeneratorConfig): Size {\n  const height = random.int(config.minHeight, config.maxHeight);\n  const weight = random.int(config.minWeight, config.maxWeight);\n  const length = random.int(config.minLength, config.maxLength);\n  const mass = random.int(config.minMass, config.maxMass);\n\n  return {\n    height,\n    weight,\n    length,\n    mass,\n  };\n}\n\nexport function getHeightRange(config: SizeGeneratorConfig): string {\n  const metricHeightModifier = Math.max(config.maxHeight - config.minHeight, 4);\n  const metric = config.minHeight\n    + \" + \"\n    + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(metricHeightModifier)))\n    + \" cm\";\n  const imperialHeightModifier = Math.max(\n    Measurements.cmToInches(config.maxHeight - config.minHeight),\n    4,\n  );\n  const imperial = Measurements.inchesToFeetExpression(Measurements.cmToInches(config.minHeight))\n    + \" + \"\n    + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(imperialHeightModifier)))\n    + \" in.\";\n\n  return `${metric} (${imperial})`;\n}\n\nexport function getHumanVariant(weightModifier: number, heightModifier: number): SizeMatrix {\n  const standard: SizeMatrix = humanStandard();\n  let variant: SizeMatrix = [];\n\n  for (let i = 0; i < standard.length; i++) {\n    let row: SizeMatrixRow = { gender: standard[i].gender, entries: [] };\n    for (let j = 0; j < standard[i].entries.length; j++) {\n      let entry = standard[i].entries[j];\n      let config: SizeGeneratorConfig = {\n        minHeight: Math.round(entry.sizeGeneratorConfig.minHeight * heightModifier),\n        maxHeight: Math.round(entry.sizeGeneratorConfig.maxHeight * heightModifier),\n        minWeight: Math.round(entry.sizeGeneratorConfig.minWeight * weightModifier),\n        maxWeight: Math.round(entry.sizeGeneratorConfig.maxWeight * weightModifier),\n        minLength: entry.sizeGeneratorConfig.minLength,\n        maxLength: entry.sizeGeneratorConfig.maxLength,\n        minMass: entry.sizeGeneratorConfig.minMass,\n        maxMass: entry.sizeGeneratorConfig.maxMass,\n      };\n      let name = entry.ageCategoryName;\n      if (entry.ageCategoryName == \"teenager\") {\n        name = \"young adult\";\n      }\n      row.entries.push({ ageCategoryName: name, sizeGeneratorConfig: config });\n    }\n    variant.push(row);\n  }\n\n  return variant;\n}\n\nexport function getWeightRange(config: SizeGeneratorConfig): string {\n  const metricWeightModifier = Math.max(config.maxWeight - config.minWeight, 4);\n  const metric = config.minWeight\n    + \" + \"\n    + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(metricWeightModifier)))\n    + \" kg\";\n  const imperialWeightModifier = Math.max(\n    Math.round(Measurements.kgToPounds(config.maxWeight - config.minWeight)),\n    4,\n  );\n  const imperial = Math.round(Measurements.kgToPounds(config.minWeight))\n    + \" + \"\n    + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(imperialWeightModifier)))\n    + \" lb.\";\n\n  return `${metric} (${imperial})`;\n}\n\nexport function humanStandard(): SizeMatrix {\n  return [\n    {\n      gender: \"female\",\n      entries: [\n        {\n          ageCategoryName: \"infant\",\n          sizeGeneratorConfig: {\n            minHeight: 49,\n            maxHeight: Math.floor(49 * 1.05),\n            minWeight: 2,\n            maxWeight: Math.floor(2 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"toddler\",\n          sizeGeneratorConfig: {\n            minHeight: 80,\n            maxHeight: Math.floor(80 * 1.05),\n            minWeight: 14,\n            maxWeight: Math.floor(14 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"young child\",\n          sizeGeneratorConfig: {\n            minHeight: 115,\n            maxHeight: Math.floor(115 * 1.05),\n            minWeight: 19,\n            maxWeight: Math.floor(19 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"child\",\n          sizeGeneratorConfig: {\n            minHeight: 149,\n            maxHeight: Math.floor(149 * 1.05),\n            minWeight: 20,\n            maxWeight: Math.floor(20 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"teenager\",\n          sizeGeneratorConfig: {\n            minHeight: 158,\n            maxHeight: Math.floor(158 * 1.05),\n            minWeight: 57,\n            maxWeight: Math.floor(57 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"adult\",\n          sizeGeneratorConfig: {\n            minHeight: 160,\n            maxHeight: Math.floor(160 * 1.05),\n            minWeight: 64,\n            maxWeight: Math.floor(64 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"elderly\",\n          sizeGeneratorConfig: {\n            minHeight: 155,\n            maxHeight: Math.floor(155 * 1.05),\n            minWeight: 60,\n            maxWeight: Math.floor(60 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n      ],\n    },\n    {\n      gender: \"male\",\n      entries: [\n        {\n          ageCategoryName: \"infant\",\n          sizeGeneratorConfig: {\n            minHeight: 50,\n            maxHeight: Math.floor(50 * 1.05),\n            minWeight: 2,\n            maxWeight: Math.floor(2 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"toddler\",\n          sizeGeneratorConfig: {\n            minHeight: 85,\n            maxHeight: Math.floor(85 * 1.05),\n            minWeight: 14,\n            maxWeight: Math.floor(14 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"young child\",\n          sizeGeneratorConfig: {\n            minHeight: 115,\n            maxHeight: Math.floor(115 * 1.05),\n            minWeight: 20,\n            maxWeight: Math.floor(20 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"child\",\n          sizeGeneratorConfig: {\n            minHeight: 145,\n            maxHeight: Math.floor(145 * 1.05),\n            minWeight: 36,\n            maxWeight: Math.floor(36 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"teenager\",\n          sizeGeneratorConfig: {\n            minHeight: 170,\n            maxHeight: Math.floor(170 * 1.05),\n            minWeight: 68,\n            maxWeight: Math.floor(68 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"adult\",\n          sizeGeneratorConfig: {\n            minHeight: 175,\n            maxHeight: Math.floor(175 * 1.05),\n            minWeight: 70,\n            maxWeight: Math.floor(70 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"elderly\",\n          sizeGeneratorConfig: {\n            minHeight: 170,\n            maxHeight: Math.floor(170 * 1.05),\n            minWeight: 65,\n            maxWeight: Math.floor(65 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n      ],\n    },\n  ];\n}\n","import type AgeCategory from \"$lib/age/age_category\";\nimport type SizeGeneratorConfig from \"./size_generator_config\";\nimport * as Sizes from \"./sizes\";\n\nexport type SizeMatrix = SizeMatrixRow[];\n\nexport type SizeMatrixRow = {\n  gender: string;\n  entries: SizeMatrixEntry[];\n};\n\nexport type SizeMatrixEntry = {\n  ageCategoryName: string;\n  sizeGeneratorConfig: SizeGeneratorConfig;\n};\n\nexport type SizeAgeSummary = {\n  genderName: string;\n  ageCategoryName: string;\n  minAge: number;\n  maxAge: number;\n  minHeight: number;\n  maxHeight: number;\n  heightRange: string;\n  minWeight: number;\n  maxWeight: number;\n  weightRange: string;\n};\n\nexport function convertMatrixToSummary(\n  matrix: SizeMatrix,\n  ageCategories: AgeCategory[],\n  gender: string,\n): SizeAgeSummary[] {\n  let result = [];\n\n  for (let i = 0; i < matrix.length; i++) {\n    if (matrix[i].gender == gender) {\n      for (let j = 0; j < matrix[i].entries.length; j++) {\n        let minAge;\n        let maxAge;\n\n        for (let x = 0; x < ageCategories.length; x++) {\n          if (ageCategories[x].name == matrix[i].entries[j].ageCategoryName) {\n            minAge = ageCategories[x].minAge;\n            maxAge = ageCategories[x].maxAge;\n          }\n        }\n        result.push({\n          genderName: gender,\n          ageCategoryName: matrix[i].entries[j].ageCategoryName,\n          minAge: minAge || 0,\n          maxAge: maxAge || 0,\n          minHeight: matrix[i].entries[j].sizeGeneratorConfig.minHeight,\n          maxHeight: matrix[i].entries[j].sizeGeneratorConfig.maxHeight,\n          heightRange: Sizes.getHeightRange(matrix[i].entries[j].sizeGeneratorConfig),\n          minWeight: matrix[i].entries[j].sizeGeneratorConfig.minWeight,\n          maxWeight: matrix[i].entries[j].sizeGeneratorConfig.maxWeight,\n          weightRange: Sizes.getWeightRange(matrix[i].entries[j].sizeGeneratorConfig),\n        });\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function getSizeConfig(gender: string, ageCategory: string, sizeMatrix: SizeMatrix): SizeGeneratorConfig {\n  for (let i = 0; i < sizeMatrix.length; i++) {\n    if (sizeMatrix[i].gender == gender) {\n      for (let j = 0; j < sizeMatrix[i].entries.length; j++) {\n        if (sizeMatrix[i].entries[j].ageCategoryName == ageCategory) {\n          return sizeMatrix[i].entries[j].sizeGeneratorConfig;\n        }\n      }\n    }\n  }\n\n  throw new Error(`Failed to find size config for ${gender} and ${ageCategory}`);\n}\n"],"names":["getHumanVariant","humanStandard","Dice.describeDice","Dice.simplify","Dice.rangeToDiceExpression","Measurements.cmToInches","Measurements.inchesToFeetExpression","Measurements.kgToPounds","Sizes.getHeightRange","Sizes.getWeightRange"],"mappings":"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"}