{"version":3,"file":"star-svg.js","sources":["../../../../src/lib/stars/star.ts","../../../../src/lib/starsystem/starsystem.ts","../../../../src/lib/stars/classification.ts","../../../../src/lib/stars/classifications.ts","../../../../src/lib/stars/generatorconfig.ts","../../../../src/lib/stars/generator.ts","../../../../src/lib/starsystem/generatorconfig.ts","../../../../src/lib/starsystem/generator.ts","../../../../src/lib/renderers/starfields/starfield-svg.ts","../../../../src/lib/renderers/planets/planet-svg.ts","../../../../src/lib/renderers/stars/star-svg.ts"],"sourcesContent":["export default class Star {\n  name: string;\n  color: string;\n  description: string;\n  classification: string;\n  radius: number; // in km\n  mass: number; // in 10^30 kg\n  temperature: number; // in K\n  luminosity: number; // in 10^26 W\n\n  constructor() {\n    this.name = \"\";\n    this.color = \"\";\n    this.description = \"\";\n    this.classification = \"\";\n    this.radius = 0;\n    this.mass = 0;\n    this.temperature = 0;\n    this.luminosity = 0;\n  }\n\n  getColorFromTemperature() {\n    if (this.temperature < 3700) {\n      return \"red\";\n    } else if (this.temperature < 5200) {\n      return \"orange\";\n    } else if (this.temperature < 6000) {\n      return \"yellow\";\n    } else if (this.temperature < 7500) {\n      return \"yellow-white\";\n    } else if (this.temperature < 10000) {\n      return \"white\";\n    } else if (this.temperature < 30000) {\n      return \"blue-white\";\n    }\n\n    return \"blue\";\n  }\n}\n","import Planet from \"../planets/planet.js\";\nimport Star from \"../stars/star.js\";\n\nexport default class StarSystem {\n  name: string;\n  description: string;\n  stars: Star[];\n  planets: Planet[];\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.stars = [];\n    this.planets = [];\n  }\n}\n","export default class StarClassification {\n  name: string;\n  radius_min: number; // relative to the sun\n  radius_max: number; // relative to the sun\n  mass_min: number; // relative to the sun\n  mass_max: number; // relative to the sun\n  temperature_min: number; // in K\n  temperature_max: number; // in K\n  luminosity_min: number; // relative to the sun\n  luminosity_max: number; // relative to the sun\n  commonality: number; // commonality in the universe\n\n  constructor(\n    name: string,\n    radius_min: number,\n    radius_max: number,\n    mass_min: number,\n    mass_max: number,\n    temperature_min: number,\n    temperature_max: number,\n    luminosity_min: number,\n    luminosity_max: number,\n    commonality: number,\n  ) {\n    this.name = name;\n    this.radius_min = radius_min;\n    this.radius_max = radius_max;\n    this.mass_min = mass_min;\n    this.mass_max = mass_max;\n    this.temperature_min = temperature_min;\n    this.temperature_max = temperature_max;\n    this.luminosity_min = luminosity_min;\n    this.luminosity_max = luminosity_max;\n    this.commonality = commonality;\n  }\n}\n","import StarClassification from \"./classification.js\";\n\nexport function all() {\n  return [\n    new StarClassification(\"main sequence\", 0.1, 0.5, 0.1, 0.5, 2000, 4000, 0.01, 0.05, 40),\n    new StarClassification(\"main sequence\", 0.6, 0.9, 0.6, 0.8, 4000, 5000, 0.1, 0.8, 45),\n    new StarClassification(\"main sequence\", 0.9, 1.1, 0.8, 1.3, 5000, 6000, 0.8, 3.0, 60),\n    new StarClassification(\"main sequence\", 1.1, 1.5, 1.3, 1.8, 6000, 8000, 3.0, 8.0, 30),\n    new StarClassification(\"main sequence\", 1.5, 4.0, 1.8, 5.0, 8000, 15000, 15.0, 25.0, 10),\n    new StarClassification(\"main sequence\", 4.0, 6.0, 8.0, 12.0, 15000, 25000, 900.0, 1100.0, 5),\n    new StarClassification(\n      \"main sequence\",\n      8.0,\n      12.0,\n      45.0,\n      55.0,\n      35000,\n      45000,\n      90000.0,\n      110000.0,\n      1,\n    ),\n    new StarClassification(\"giant\", 10.0, 50.0, 1.0, 5.0, 3000, 10000, 50.0, 1000.0, 2),\n    new StarClassification(\n      \"supergiant\",\n      30.0,\n      500.0,\n      10.0,\n      70.0,\n      4000,\n      40000,\n      30000.0,\n      1000000.0,\n      1,\n    ),\n  ];\n}\n","import StarClassification from \"./classification.js\";\nimport * as Classifications from \"./classifications.js\";\n\nexport default class StarGeneratorConfig {\n  possibleClassifications: StarClassification[];\n\n  constructor() {\n    this.possibleClassifications = Classifications.all();\n  }\n}\n","import * as MUN from \"@ironarachne/made-up-names\";\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport StarGeneratorConfig from \"./generatorconfig.js\";\n\nimport random from \"random\";\nimport Star from \"./star.js\";\n\nexport default class StarGenerator {\n  config: StarGeneratorConfig;\n\n  constructor(config: StarGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate() {\n    const classification = RND.weighted(this.config.possibleClassifications);\n\n    const star = new Star();\n\n    star.classification = classification.name;\n    star.radius = random.float(classification.radius_min, classification.radius_max) * 695508;\n    star.mass = random.float(classification.mass_min, classification.mass_max) * 1.989;\n    star.temperature = random.int(classification.temperature_min, classification.temperature_max);\n    star.luminosity = random.float(classification.luminosity_min, classification.luminosity_max) * 3.828;\n    star.color = star.getColorFromTemperature();\n\n    const article = Words.article(star.color);\n    star.description = `This is ${article} ${star.color} ${star.classification} star.`;\n    star.name = MUN.star();\n\n    return star;\n  }\n}\n","export default class StarSystemGeneratorConfig {\n  minPlanets: number;\n  maxPlanets: number;\n\n  constructor() {\n    this.minPlanets = 3;\n    this.maxPlanets = 12;\n  }\n}\n","import * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport PlanetGenerator from \"../planets/generator.js\";\nimport PlanetGeneratorConfig from \"../planets/generatorconfig.js\";\nimport StarGenerator from \"../stars/generator.js\";\nimport StarGeneratorConfig from \"../stars/generatorconfig.js\";\nimport StarSystemGeneratorConfig from \"./generatorconfig.js\";\nimport StarSystem from \"./starsystem.js\";\n\nexport default class StarSystemGenerator {\n  config: StarSystemGeneratorConfig;\n\n  constructor(config: StarSystemGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate() {\n    let starsystem = new StarSystem();\n\n    let starGenConfig = new StarGeneratorConfig();\n    let starGen = new StarGenerator(starGenConfig);\n\n    const star = starGen.generate();\n\n    starsystem.name = star.name;\n\n    starsystem.stars.push(star);\n\n    // TODO: binary and trinary systems\n\n    const numberOfPlanets = random.int(this.config.minPlanets, this.config.maxPlanets);\n\n    let planetGenConfig = new PlanetGeneratorConfig();\n    let planetGenerator = new PlanetGenerator(planetGenConfig);\n\n    for (let i = 0; i < numberOfPlanets; i++) {\n      const planet = planetGenerator.generate();\n      starsystem.planets.push(planet);\n    }\n\n    starsystem.planets.sort(function(x, y) {\n      if (x.distance_from_sun < y.distance_from_sun) {\n        return -1;\n      }\n      if (x.distance_from_sun > y.distance_from_sun) {\n        return 1;\n      }\n      return 0;\n    });\n\n    for (let i = 0; i < starsystem.planets.length; i++) {\n      if (!starsystem.planets[i].is_inhabited) {\n        starsystem.planets[i].name = starsystem.name + \" \" + Words.romanize(i + 1);\n      }\n    }\n\n    starsystem.description = `The ${starsystem.name} system has ${numberOfPlanets} planets`;\n\n    const asteroidBeltChance = random.int(1, 100);\n\n    if (asteroidBeltChance > 70) {\n      starsystem.description += \" and an asteroid belt.\";\n    } else {\n      starsystem.description += \".\";\n    }\n\n    return starsystem;\n  }\n}\n","import random from \"random\";\n\nexport default class SVGStarfieldRenderer {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  render(): string {\n    let svg = \"<svg width=\\\"\"\n      + this.width\n      + \"\\\" height=\\\"\"\n      + this.height\n      + \"\\\" viewBox=\\\"0 0 \"\n      + this.width\n      + \" \"\n      + this.height\n      + \"\\\">\";\n\n    svg += \"<rect width=\\\"\" + this.width + \"\\\" height=\\\"\" + this.height + \"\\\" fill=\\\"black\\\" />\";\n\n    const numberOfStars = Math.floor(this.width * this.height * 0.005);\n\n    for (let i = 0; i < numberOfStars; i++) {\n      const x = random.int(0, this.width);\n      const y = random.int(0, this.height);\n\n      svg += \"<rect x=\\\"\"\n        + x\n        + \"\\\" y=\\\"\"\n        + y\n        + \"\\\" width=\\\"1\\\" height=\\\"1\\\" fill=\\\"\"\n        + randomStarColor()\n        + \"\\\" />\";\n    }\n\n    svg += \"</svg>\";\n\n    return svg;\n  }\n}\n\nfunction randomStarColor() {\n  const colorBase = random.int(80, 180);\n\n  let r = colorBase;\n  let g = colorBase;\n  let b = colorBase;\n\n  let tweaked = false;\n\n  const tweakBlueChance = random.int(1, 100);\n  if (tweakBlueChance > 70 && tweaked === false) {\n    b += random.int(10, 20);\n    tweaked = true;\n  }\n\n  const tweakRedChance = random.int(1, 100);\n  if (tweakRedChance > 70 && tweaked == false) {\n    r += random.int(10, 20);\n    tweaked = true;\n  }\n\n  const tweakGreenChance = random.int(1, 100);\n  if (tweakGreenChance > 70 && tweaked == false) {\n    g += random.int(10, 20);\n    tweaked = true;\n  }\n\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n}\n","import * as RND from \"@ironarachne/rng\";\nimport Planet from \"../../planets/planet.js\";\nimport SVGStarfieldRenderer from \"../starfields/starfield-svg.js\";\n\nimport random from \"random\";\n\nexport default class SVGPlanetRenderer {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.height = height;\n    this.width = width;\n  }\n\n  render(planet: Planet): string {\n    const textureRenderer = getPlanetRenderer(planet.classification.name);\n    const texture = textureRenderer.renderSVG();\n\n    let sizeClass = \"medium\";\n\n    if (planet.diameter < 8000) {\n      sizeClass = \"small\";\n    } else if (planet.diameter > 19000) {\n      sizeClass = \"large\";\n    }\n\n    const midX = Math.floor(this.width / 2);\n    const midY = Math.floor(this.height / 2);\n\n    const planetId = random.int(0, 1000);\n\n    const min = Math.min(this.width, this.height);\n\n    let radius = 0.0;\n    const planetDiameterModifier = (planet.diameter - planet.classification.diameter_min)\n      / (planet.classification.diameter_max - planet.classification.diameter_min);\n    let rangeMin = 0.8;\n    let rangeMax = 0.9;\n\n    if (sizeClass === \"small\") {\n      rangeMin = 0.2;\n      rangeMax = 0.4;\n    } else if (sizeClass === \"medium\") {\n      rangeMin = 0.5;\n      rangeMax = 0.7;\n    }\n\n    let size = (rangeMax - rangeMin) * planetDiameterModifier + rangeMin;\n    radius = (Math.floor(min) * size) / 2;\n\n    const atmosphereRadius = Math.floor(radius * 1.1);\n\n    let starfieldRenderer = new SVGStarfieldRenderer(this.width, this.height);\n    const background = starfieldRenderer.render();\n\n    let svg = \"<svg width=\\\"\"\n      + this.width\n      + \"\\\" height=\\\"\"\n      + this.height\n      + \"\\\" viewBox=\\\"0 0 \"\n      + this.width\n      + \" \"\n      + this.height\n      + \"\\\">\";\n\n    svg += \"<defs>\";\n\n    svg += \"<radialGradient id=\\\"atmosphere-\"\n      + planetId\n      + \"\\\"><stop offset=\\\"95%\\\" stop-color=\\\"\"\n      + textureRenderer.atmosphereColor\n      + \"\\\" stop-opacity=\\\"0.8\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(255,255,255)\\\" stop-opacity=\\\"0\\\" /></radialGradient>\";\n\n    svg +=\n      \"<radialGradient id=\\\"planetShadow\\\" cx=\\\"0.5\\\" cy=\\\"0.5\\\" r=\\\"0.75\\\" fx=\\\"0.275\\\" fy=\\\"0.275\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(0,0,0)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"80%\\\" stop-color=\\\"rgb(0,0,70)\\\" stop-opacity=\\\"0.8\\\" /><stop offset=\\\"90%\\\" stop-color=\\\"rgb(0,0,0)\\\" stop-opacity=\\\"0.8\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(0,00,40)\\\" stop-opacity=\\\"0.6\\\" /></radialGradient>\";\n\n    svg += \"<pattern id=\\\"planetTexture-\"\n      + planetId\n      + \"\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"1\\\" height=\\\"1\\\">\"\n      + texture\n      + \"</pattern>\";\n\n    svg += \"</defs>\";\n\n    svg += background;\n\n    if (planet.has_atmosphere) {\n      svg += \"<circle cx=\\\"\"\n        + midX\n        + \"\\\" cy=\\\"\"\n        + midY\n        + \"\\\" r=\\\"\"\n        + atmosphereRadius\n        + \"\\\" fill=\\\"url(#atmosphere-\"\n        + planetId\n        + \")\\\" />\";\n    }\n\n    svg += \"<circle cx=\\\"\"\n      + midX\n      + \"\\\" cy=\\\"\"\n      + midY\n      + \"\\\" r=\\\"\"\n      + radius\n      + \"\\\" fill=\\\"url(#planetTexture-\"\n      + planetId\n      + \")\\\" />\";\n\n    svg += \"<circle cx=\\\"\" + midX + \"\\\" cy=\\\"\" + midY + \"\\\" r=\\\"\" + radius + \"\\\" fill=\\\"url(#planetShadow)\\\" />\";\n\n    return svg;\n  }\n}\n\nfunction getPlanetRenderer(planetType: string) {\n  const planetTypes = [\n    {\n      name: \"barren\",\n      hasAtmosphere: false,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n        svg += \"<radialGradient id=\\\"craterTrough\"\n          + hash\n          + \"\\\" cx=\\\"0.6\\\" cy=\\\"0.6\\\" fx=\\\"0.4\\\" fy=\\\"0.4\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(170,170,170)\\\" /><stop offset=\\\"5%\\\" stop-color=\\\"rgb(150,150,150)\\\" /><stop offset=\\\"95%\\\" stop-color=\\\"rgb(150,150,150)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(110,110,110)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"barrenTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(150,150,150)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(110, 170);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + amount\n            + \", \"\n            + amount\n            + \", \"\n            + amount\n            + \")\\\" filter=\\\"url(#barrenTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfCraters = random.int(55, 80);\n\n        for (let i = 0; i < numberOfCraters; i++) {\n          const x = random.int(20, 200);\n          const y = random.int(20, 200);\n          const r = random.int(3, 8);\n          const crater = \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#craterTrough\"\n            + hash\n            + \")\\\" />\";\n          svg += crater;\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"arid\",\n      hasAtmosphere: true,\n      atmosphereColor: \"rgb(170,224,211)\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n        svg += \"<radialGradient id=\\\"aridCrater\"\n          + hash\n          + \"\\\" cx=\\\"0.6\\\" cy=\\\"0.6\\\" fx=\\\"0.4\\\" fy=\\\"0.4\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(237,220,151)\\\" /><stop offset=\\\"5%\\\" stop-color=\\\"rgb(227,210,141)\\\" /><stop offset=\\\"95%\\\" stop-color=\\\"rgb(217,200,131)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(197,190,121)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"aridTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(227,210,141)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (227 + amount)\n            + \", \"\n            + (210 + amount)\n            + \", \"\n            + (141 + amount)\n            + \")\\\" filter=\\\"url(#aridTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfCraters = random.int(25, 30);\n\n        for (let i = 0; i < numberOfCraters; i++) {\n          const x = random.int(20, 200);\n          const y = random.int(20, 200);\n          const r = random.int(3, 8);\n          const crater = \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#aridCrater\"\n            + hash\n            + \")\\\" />\";\n          svg += crater;\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"garden\",\n      hasAtmosphere: true,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<radialGradient id=\\\"gardenContinentGradient\"\n          + hash\n          + \"\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(130,181,91)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(120,153,55)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"gardenTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"<filter id=\\\"cloudTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.45\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\" /><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"30\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /><feGaussianBlur stdDeviation=\\\"0.2\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(36,27,161)\\\" />\";\n\n        const numberOfContinents = random.int(7, 18);\n\n        for (let i = 0; i < numberOfContinents; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(5, 30);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#gardenContinentGradient\"\n            + hash\n            + \")\\\" filter=\\\"url(#gardenTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfClouds = random.int(20, 30);\n\n        for (let i = 0; i < numberOfClouds; i++) {\n          const x = random.int(15, 100);\n          const y = random.int(15, 100);\n          const rx = random.int(5, 13);\n          const ry = random.int(5, 9);\n\n          svg += \"<ellipse cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" rx=\\\"\"\n            + rx\n            + \"\\\" ry=\\\"\"\n            + ry\n            + \"\\\" fill=\\\"white\\\" filter=\\\"url(#cloudTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"jungle\",\n      hasAtmosphere: true,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<linearGradient id=\\\"jungleLakeGradient\"\n          + hash\n          + \"\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(17,109,128)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(7,99,118)\\\" /></linearGradient>\";\n\n        svg += \"<filter id=\\\"jungleTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"<filter id=\\\"cloudTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.2\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\" /><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"30\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /><feGaussianBlur stdDeviation=\\\"0.1\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(8,94,40)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (10 + amount)\n            + \", \"\n            + (96 + amount)\n            + \", \"\n            + (42 + amount)\n            + \")\\\" filter=\\\"url(#jungleTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfOceans = random.int(4, 7);\n\n        for (let i = 0; i < numberOfOceans; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(5, 10);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#jungleLakeGradient\"\n            + hash\n            + \")\\\" filter=\\\"url(#jungleTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfClouds = random.int(40, 60);\n\n        for (let i = 0; i < numberOfClouds; i++) {\n          const x = random.int(15, 100);\n          const y = random.int(15, 100);\n          const rx = random.int(5, 9);\n          const ry = random.int(5, 9);\n\n          svg += \"<ellipse cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" rx=\\\"\"\n            + rx\n            + \"\\\" ry=\\\"\"\n            + ry\n            + \"\\\" fill=\\\"white\\\" filter=\\\"url(#cloudTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"swamp\",\n      hasAtmosphere: true,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<linearGradient id=\\\"swampLakeGradient\"\n          + hash\n          + \"\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(17,109,128)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(7,99,118)\\\" /></linearGradient>\";\n\n        svg += \"<filter id=\\\"swampTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"<filter id=\\\"cloudTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.2\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\" /><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"30\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /><feGaussianBlur stdDeviation=\\\"0.1\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(8,94,40)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (10 + amount)\n            + \", \"\n            + (96 + amount)\n            + \", \"\n            + (42 + amount)\n            + \")\\\" filter=\\\"url(#swampTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfOceans = random.int(4, 7);\n\n        for (let i = 0; i < numberOfOceans; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(5, 10);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#swampLakeGradient\"\n            + hash\n            + \")\\\" filter=\\\"url(#swampTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfClouds = random.int(40, 60);\n\n        for (let i = 0; i < numberOfClouds; i++) {\n          const x = random.int(15, 100);\n          const y = random.int(15, 100);\n          const rx = random.int(5, 9);\n          const ry = random.int(5, 9);\n\n          svg += \"<ellipse cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" rx=\\\"\"\n            + rx\n            + \"\\\" ry=\\\"\"\n            + ry\n            + \"\\\" fill=\\\"white\\\" filter=\\\"url(#cloudTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"volcanic\",\n      hasAtmosphere: true,\n      atmosphereColor: \"rgb(224,153,47)\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n        svg += \"<radialGradient id=\\\"volcanicCrater\"\n          + hash\n          + \"\\\" cx=\\\"0.6\\\" cy=\\\"0.6\\\" fx=\\\"0.4\\\" fy=\\\"0.4\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(67,50,45)\\\" /><stop offset=\\\"5%\\\" stop-color=\\\"rgb(57,40,35)\\\" /><stop offset=\\\"95%\\\" stop-color=\\\"rgb(47,30,25)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(37,20,15)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"volcanicTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(57,40,35)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (57 + amount)\n            + \", \"\n            + (40 + amount)\n            + \", \"\n            + (35 + amount)\n            + \")\\\" filter=\\\"url(#volcanicTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfLavaLakes = random.int(26, 30);\n\n        for (let i = 0; i < numberOfLavaLakes; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(1, 4);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (235 + amount)\n            + \", \"\n            + (132 + amount)\n            + \", \"\n            + (5 + amount)\n            + \")\\\" filter=\\\"url(#volcanicTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"gas giant\",\n      hasAtmosphere: false,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<filter id=\\\"bandFilter\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n\n        const numberOfBands = random.int(10, 16);\n\n        let remainingHeight = 256;\n\n        const baseR = random.int(60, 255);\n        const baseG = random.int(60, 255);\n        const baseB = random.int(60, 255);\n\n        const baseColor = \"rgb(\" + baseR + \",\" + baseG + \",\" + baseB + \")\";\n\n        let bandsSVG = \"\";\n\n        for (let i = 0; i < numberOfBands; i++) {\n          const bandOffset = random.int(0, 5);\n          const bandHeight = random.int(3, 15);\n\n          const y = 256 - remainingHeight + bandHeight + bandOffset;\n\n          const r = baseR + random.int(-30, 30);\n          const g = baseG + random.int(-30, 30);\n          const b = baseB + random.int(-30, 30);\n\n          const bandSVG = \"<rect x=\\\"0\\\" y=\\\"\"\n            + y\n            + \"\\\" width=\\\"256\\\" height=\\\"\"\n            + bandHeight\n            + \"\\\" fill=\\\"rgb(\"\n            + r\n            + \", \"\n            + g\n            + \", \"\n            + b\n            + \")\\\" filter=\\\"url(#bandFilter\"\n            + hash\n            + \")\\\" />\";\n\n          bandsSVG += bandSVG;\n\n          remainingHeight -= bandHeight - bandOffset;\n        }\n\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"\" + baseColor + \"\\\" />\";\n\n        svg += bandsSVG;\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"toxic\",\n      hasAtmosphere: true,\n      atmosphereColor: \"rgb(171,224,45)\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<linearGradient id=\\\"toxicLakeGradient\"\n          + hash\n          + \"\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(152,222,52)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(172,232,67)\\\" /></linearGradient>\";\n\n        svg += \"<filter id=\\\"toxicTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(168,155,39)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (168 + amount)\n            + \", \"\n            + (155 + amount)\n            + \", \"\n            + (39 + amount)\n            + \")\\\" filter=\\\"url(#toxicTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfToxicOceans = random.int(4, 7);\n\n        for (let i = 0; i < numberOfToxicOceans; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#toxicLakeGradient\"\n            + hash\n            + \")\\\" filter=\\\"url(#toxicTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"ice\",\n      hasAtmosphere: true,\n      atmosphereColor: \"rgb(125,229,255)\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n        svg += \"<radialGradient id=\\\"iceCrater\"\n          + hash\n          + \"\\\" cx=\\\"0.6\\\" cy=\\\"0.6\\\" fx=\\\"0.4\\\" fy=\\\"0.4\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(234,255,255)\\\" /><stop offset=\\\"5%\\\" stop-color=\\\"rgb(224,250,255)\\\" /><stop offset=\\\"95%\\\" stop-color=\\\"rgb(214,240,245)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(204,230,235)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"iceTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(224,250,255)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(0, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (210 + amount)\n            + \", \"\n            + (230 + amount)\n            + \", \"\n            + (235 + amount)\n            + \")\\\" filter=\\\"url(#iceTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"ocean\",\n      hasAtmosphere: true,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<radialGradient id=\\\"oceanGradient\"\n          + hash\n          + \"\\\" cx=\\\"0.5\\\" cy=\\\"0.5\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(45,14,201)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(95,117,227)\\\" />\";\n\n        svg += \"<filter id=\\\"cloudTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.2\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\" /><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"30\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /><feGaussianBlur stdDeviation=\\\"0.1\\\" /></filter>\";\n\n        svg += \"</defs>\";\n\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"url(#oceanGradient\" + hash + \")\\\" />\";\n\n        svg += \"</svg>\";\n\n        const numberOfClouds = random.int(20, 30);\n\n        for (let i = 0; i < numberOfClouds; i++) {\n          const x = random.int(15, 100);\n          const y = random.int(15, 100);\n          const rx = random.int(5, 9);\n          const ry = random.int(5, 9);\n\n          svg += \"<ellipse cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" rx=\\\"\"\n            + rx\n            + \"\\\" ry=\\\"\"\n            + ry\n            + \"\\\" fill=\\\"white\\\" filter=\\\"url(#cloudTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        return svg;\n      },\n    },\n  ];\n\n  for (let i = 0; i < planetTypes.length; i++) {\n    if (planetTypes[i].name == planetType) {\n      return planetTypes[i];\n    }\n  }\n\n  return planetTypes[0];\n}\n","import random from \"random\";\nimport Star from \"../../stars/star.js\";\nimport SVGStarfieldRenderer from \"../starfields/starfield-svg.js\";\n\nexport default class SVGStarRenderer {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  render(star: Star): string {\n    let starColor = \"\";\n\n    if (star.color == \"red\") {\n      starColor = \"rgb(255,43,10)\";\n    } else if (star.color == \"orange\") {\n      starColor = \"rgb(255,146,20)\";\n    } else if (star.color == \"yellow\") {\n      starColor = \"rgb(255,223,18)\";\n    } else if (star.color == \"yellow-white\") {\n      starColor = \"rgb(251, 255, 168)\";\n    } else if (star.color == \"white\") {\n      starColor = \"rgb(255,255,255)\";\n    } else if (star.color == \"blue-white\") {\n      starColor = \"rgb(198, 243, 247)\";\n    } else if (star.color == \"blue\") {\n      starColor = \"rgb(59,118,255)\";\n    }\n\n    const midX = Math.floor(this.width / 2);\n    const midY = Math.floor(this.height / 2);\n\n    const min = Math.min(this.width, this.height);\n    let radius = (Math.floor(min) * random.float(0.2, 0.4)) / 2;\n\n    if (star.classification == \"main sequence\") {\n      radius = (Math.floor(min) * random.float(0.6, 0.7)) / 2;\n    } else if (star.classification == \"giant\") {\n      radius = (Math.floor(min) * random.float(0.8, 0.9)) / 2;\n    } else if (star.classification == \"supergiant\") {\n      radius = (Math.floor(min) * random.float(0.9, 1.1)) / 2;\n    }\n\n    const glowRadius = Math.floor(radius * 1.4);\n\n    let starfieldRenderer = new SVGStarfieldRenderer(this.width, this.height);\n    const background = starfieldRenderer.render();\n\n    let svg = \"<svg width=\\\"\"\n      + this.width\n      + \"\\\" height=\\\"\"\n      + this.height\n      + \"\\\" viewBox=\\\"0 0 \"\n      + this.width\n      + \" \"\n      + this.height\n      + \"\\\">\";\n\n    svg += \"<defs><radialGradient id=\\\"starglow\\\"><stop offset=\\\"60%\\\" stop-color=\\\"\"\n      + starColor\n      + \"\\\" stop-opacity=\\\"0.8\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(255,255,255)\\\" stop-opacity=\\\"0\\\" /></radialGradient></defs>\";\n\n    svg += \"<filter id=\\\"starSurface\\\">\";\n    svg += \"<feFlood x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" flood-color=\\\"\"\n      + starColor\n      + \"\\\" result=\\\"base\\\" />\";\n    svg += \"<feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"noise\\\" />\";\n    svg += \"<feBlend in2=\\\"base\\\" in=\\\"noise\\\" mode=\\\"multiply\\\" />\";\n    svg += \"</filter>\";\n\n    svg += `<mask id=\"starMask\"><circle cx=\"${midX}\" cy=\"${midY}\" r=\"${radius}\" fill=\"white\" /></mask>`;\n\n    svg += background;\n\n    svg += \"<circle cx=\\\"\" + midX + \"\\\" cy=\\\"\" + midY + \"\\\" r=\\\"\" + glowRadius + \"\\\" fill=\\\"url(#starglow)\\\" />\";\n\n    svg += \"<circle cx=\\\"\"\n      + midX\n      + \"\\\" cy=\\\"\"\n      + midY\n      + \"\\\" r=\\\"\"\n      + radius\n      + \"\\\" fill=\\\"\"\n      + starColor\n      + \"\\\" filter=\\\"url(#starSurface)\\\" mask=\\\"url(#starMask)\\\" />\";\n\n    svg += \"</svg>\";\n\n    return svg;\n  }\n}\n"],"names":["Classifications.all"],"mappings":"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"}