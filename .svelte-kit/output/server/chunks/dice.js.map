{"version":3,"file":"dice.js","sources":["../../../../src/lib/dice.ts"],"sourcesContent":["import random from \"random\";\n\nexport class DicePool {\n  d4: number;\n  d6: number;\n  d8: number;\n  d10: number;\n  d12: number;\n  d20: number;\n  d100: number;\n  modifier: number;\n  modifierType: string;\n\n  constructor() {\n    this.d4 = 0;\n    this.d6 = 0;\n    this.d8 = 0;\n    this.d10 = 0;\n    this.d12 = 0;\n    this.d20 = 0;\n    this.d100 = 0;\n    this.modifier = 0;\n    this.modifierType = \"+\";\n  }\n\n  getAverageResult(): number {\n    let result = this.getMinResult() + this.getMaxResult();\n\n    result = Math.floor(result / 2);\n\n    return result;\n  }\n\n  getMaxResult(): number {\n    let result = 0;\n    result += this.d4 * 4;\n    result += this.d6 * 6;\n    result += this.d8 * 8;\n    result += this.d10 * 10;\n    result += this.d12 * 12;\n    result += this.d20 * 20;\n    result += this.d100 * 100;\n\n    if (this.modifierType == \"*\") {\n      result *= this.modifier;\n    } else if (this.modifierType == \"+\") {\n      result += this.modifier;\n    } else {\n      result -= this.modifier;\n    }\n\n    return result;\n  }\n\n  getMinResult(): number {\n    let result = 0;\n    result += this.d4;\n    result += this.d6;\n    result += this.d8;\n    result += this.d10;\n    result += this.d12;\n    result += this.d20;\n    result += this.d100;\n\n    if (this.modifierType == \"*\") {\n      result *= this.modifier;\n    } else if (this.modifierType == \"+\") {\n      result += this.modifier;\n    } else {\n      result -= this.modifier;\n    }\n\n    return result;\n  }\n}\n\nexport function toDicePool(expression: string): DicePool {\n  let numDice = 0;\n  let numSides = 0;\n  let modifier = 0;\n  let modifierType = \"+\";\n  let parts = [];\n  let modParts = [];\n\n  let dicePool = new DicePool();\n\n  if (expression.includes(\"-\")) {\n    modifierType = \"-\";\n    modParts = expression.split(\"-\");\n    modifier = Number(modParts[1]);\n  } else if (expression.includes(\"x\")) {\n    modifierType = \"*\";\n    modParts = expression.split(\"x\");\n    modifier = Number(modParts[1]);\n  } else if (expression.includes(\"+\")) {\n    modParts = expression.split(\"+\");\n    modifier = Number(modParts[1]);\n  } else {\n    modParts = expression.split(\"+\"); // no modifier\n  }\n\n  dicePool.modifier = modifier;\n  dicePool.modifierType = modifierType;\n\n  parts = modParts[0].split(\"d\");\n\n  numDice = Number(parts[0]);\n  numSides = Number(parts[1]);\n\n  if (numSides == 4) {\n    dicePool.d4 = numDice;\n  } else if (numSides == 6) {\n    dicePool.d6 = numDice;\n  } else if (numSides == 8) {\n    dicePool.d8 = numDice;\n  } else if (numSides == 10) {\n    dicePool.d10 = numDice;\n  } else if (numSides == 12) {\n    dicePool.d12 = numDice;\n  } else if (numSides == 20) {\n    dicePool.d20 = numDice;\n  } else if (numSides == 100) {\n    dicePool.d100 = numDice;\n  }\n\n  return dicePool;\n}\n\nexport function describeDice(dice: DicePool) {\n  let diceExpression = \"\";\n\n  if (dice.d100 > 0) {\n    if (diceExpression !== \"\") {\n      diceExpression += \"+\";\n    }\n    diceExpression += dice.d100 + \"d100\";\n  }\n\n  if (dice.d20 > 0) {\n    if (diceExpression !== \"\") {\n      diceExpression += \"+\";\n    }\n    diceExpression += dice.d20 + \"d20\";\n  }\n\n  if (dice.d12 > 0) {\n    if (diceExpression !== \"\") {\n      diceExpression += \"+\";\n    }\n    diceExpression += dice.d12 + \"d12\";\n  }\n\n  if (dice.d10 > 0) {\n    if (diceExpression !== \"\") {\n      diceExpression += \"+\";\n    }\n    diceExpression += dice.d10 + \"d10\";\n  }\n\n  if (dice.d8 > 0) {\n    if (diceExpression !== \"\") {\n      diceExpression += \"+\";\n    }\n    diceExpression += dice.d8 + \"d8\";\n  }\n\n  if (dice.d6 > 0) {\n    if (diceExpression !== \"\") {\n      diceExpression += \"+\";\n    }\n    diceExpression += dice.d6 + \"d6\";\n  }\n\n  if (dice.d4 > 0) {\n    if (diceExpression !== \"\") {\n      diceExpression += \"+\";\n    }\n    diceExpression += dice.d4 + \"d4\";\n  }\n\n  if (dice.modifier > 0) {\n    if (diceExpression !== \"\") {\n      diceExpression += \"+\";\n    }\n    diceExpression += dice.modifier;\n  }\n\n  return diceExpression;\n}\n\nexport function rangeToDiceExpression(range: number) {\n  let remains = range;\n\n  const dice = new DicePool();\n\n  while (remains >= 100 && remains > 0) {\n    remains -= 100;\n    dice.d100++;\n  }\n  while (remains >= 20 && remains > 0) {\n    remains -= 20;\n    dice.d20++;\n  }\n  while (remains >= 12 && remains > 0) {\n    remains -= 12;\n    dice.d12++;\n  }\n  while (remains >= 10 && remains > 0) {\n    remains -= 10;\n    dice.d10++;\n  }\n  while (remains >= 8 && remains > 0) {\n    remains -= 8;\n    dice.d8++;\n  }\n  while (remains >= 6 && remains > 0) {\n    remains -= 6;\n    dice.d6++;\n  }\n  while (remains >= 4 && remains > 0) {\n    remains -= 4;\n    dice.d4++;\n  }\n\n  dice.modifier = remains;\n\n  return dice;\n}\n\nexport function roll(expression: string): number {\n  let phrases: string[] = [];\n  let expressionType = \"straight\";\n  let parts = [];\n  let useModifier = true;\n  let modValue = 0;\n\n  if (expression.includes(\"+\")) {\n    phrases = expression.split(\"+\");\n    expressionType = \"added\";\n  } else if (expression.includes(\"-\")) {\n    phrases = expression.split(\"-\");\n    expressionType = \"subtracted\";\n  } else if (expression.includes(\"x\")) {\n    phrases = expression.split(\"x\");\n    expressionType = \"multiplied\";\n  } else {\n    useModifier = false;\n  }\n\n  if (useModifier) {\n    for (let i = 1; i < phrases.length; i++) {\n      let modParts = phrases[i].split(\"d\");\n\n      if (modParts.length > 1) {\n        let n = Number(modParts[0]);\n        let s = Number(modParts[1]);\n        modValue += rollSimple(n, s);\n      } else {\n        modValue += Number(phrases[i]);\n      }\n    }\n    parts = phrases[0].split(\"d\");\n  } else {\n    parts = expression.split(\"d\");\n  }\n\n  let roll = rollSimple(Number(parts[0]), Number(parts[1]));\n\n  if (expressionType == \"added\") {\n    roll += modValue;\n  } else if (expressionType == \"subtracted\") {\n    roll -= modValue;\n  } else if (expressionType == \"multiplied\") {\n    roll *= modValue;\n  }\n\n  return roll;\n}\n\nfunction rollSimple(n: number, s: number): number {\n  let result = 0;\n\n  for (let i = 0; i < n; i++) {\n    result += random.int(1, s);\n  }\n\n  return result;\n}\n\nexport function simplify(dice: DicePool): DicePool {\n  // This function takes a set of dice and simplifies them to a single die type, dropping everything else\n  const result = new DicePool();\n\n  if (dice.d100 > 0) {\n    result.d100 = dice.d100;\n    return result;\n  }\n\n  if (dice.d20 > 0) {\n    result.d20 = dice.d20;\n    return result;\n  }\n\n  if (dice.d12 > 0) {\n    result.d12 = dice.d12;\n    return result;\n  }\n\n  if (dice.d10 > 0) {\n    result.d10 = dice.d10;\n    return result;\n  }\n\n  if (dice.d8 > 0) {\n    result.d8 = dice.d8;\n    return result;\n  }\n\n  if (dice.d6 > 0) {\n    result.d6 = dice.d6;\n    return result;\n  }\n\n  if (dice.d4 > 0) {\n    result.d4 = dice.d4;\n    return result;\n  }\n\n  if (dice.modifier > 0) {\n    result.modifier = dice.modifier;\n    return result;\n  }\n\n  return result;\n}\n"],"names":[],"mappings":"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"}