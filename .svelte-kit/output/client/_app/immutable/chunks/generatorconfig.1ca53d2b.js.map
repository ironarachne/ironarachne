{"version":3,"file":"generatorconfig.1ca53d2b.js","sources":["../../../../../../src/lib/relationships/relationship.ts","../../../../../../src/lib/relationships/generator.ts","../../../../../../src/lib/religion/domains/domainset.ts","../../../../../../src/lib/religion/realms/realm.ts","../../../../../../src/lib/religion/deities/deity.ts","../../../../../../src/lib/religion/deities/deities.ts","../../../../../../src/lib/religion/deities/generator.ts","../../../../../../src/lib/religion/deities/generatorconfig.ts","../../../../../../src/lib/religion/domains/generator.ts","../../../../../../src/lib/religion/domains/generatorconfig.ts","../../../../../../src/lib/religion/pantheons/pantheon.ts","../../../../../../src/lib/religion/pantheons/pantheonmember.ts","../../../../../../src/lib/religion/pantheons/generator.ts","../../../../../../src/lib/religion/pantheons/generatorconfig.ts","../../../../../../src/lib/appearance/traits.ts","../../../../../../src/lib/religion/appearancetraits.ts","../../../../../../src/lib/religion/realms/realmconcept.ts","../../../../../../src/lib/religion/realms/realmconcepts.ts","../../../../../../src/lib/religion/realms/realms.ts","../../../../../../src/lib/religion/realms/generator.ts","../../../../../../src/lib/religion/realms/generatorconfig.ts","../../../../../../src/lib/religion/religion.ts","../../../../../../src/lib/religion/generator.ts","../../../../../../src/lib/religion/categories/category.ts","../../../../../../src/lib/religion/categories/monotheism.ts","../../../../../../src/lib/religion/categories/polytheism.ts","../../../../../../src/lib/religion/categories/shamanism.ts","../../../../../../src/lib/religion/categories/categories.ts","../../../../../../src/lib/religion/generatorconfig.ts"],"sourcesContent":["export default class Relationship {\n  noun: string;\n  target: number;\n  verb: string;\n  strength: number;\n\n  constructor(noun: string, verb: string, target: number, strength: number) {\n    this.noun = noun;\n    this.verb = verb;\n    this.target = target;\n    this.strength = strength;\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport Relationship from \"./relationship.js\";\n\nexport default class RelationshipGenerator {\n  strength: number;\n\n  constructor(strength: number) {\n    this.strength = strength;\n  }\n\n  generate(): Relationship {\n    let verb = \"\";\n    let noun = \"\";\n\n    if (this.strength == -1) {\n      verb = RND.item([\"dislikes\", \"distrusts\", \"mistrusts\", \"is annoyed by\"]);\n      noun = \"enemy\";\n    } else if (this.strength == -2) {\n      verb = RND.item([\"fears\", \"hates\", \"loathes\", \"can't stand\"]);\n      noun = \"enemy\";\n    } else if (this.strength == 0) {\n      verb = RND.item([\n        \"is intrigued by\",\n        \"is ambivalent towards\",\n        \"is neutral towards\",\n        \"is suspicious of\",\n      ]);\n      noun = \"acquaintance\";\n    } else if (this.strength == 1) {\n      verb = RND.item([\"likes\", \"is amused by\", \"enjoys the company of\", \"enjoys\", \"trusts\"]);\n      noun = \"friend\";\n    } else {\n      verb = RND.item([\"loves\", \"deeply trusts\", \"adores\"]);\n      noun = \"friend\";\n    }\n\n    return new Relationship(noun, verb, 0, this.strength);\n  }\n}\n","import Domain from \"./domain.js\";\n\nexport default class DomainSet {\n  primary: Domain;\n  secondaries: Domain[];\n\n  constructor() {\n    this.primary = new Domain();\n    this.secondaries = [];\n  }\n}\n","import type AppearanceTrait from \"$lib/appearance/trait\";\n\nexport default class Realm {\n  name: string;\n  description: string;\n  personalityTraits: string[];\n  appearanceTraits: AppearanceTrait[];\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.personalityTraits = [];\n    this.appearanceTraits = [];\n  }\n}\n","import type AgeCategory from \"$lib/age/age_category.js\";\nimport type PersonalityTrait from \"$lib/characters/personality/personality_trait.js\";\nimport type Gender from \"$lib/gender/gender.js\";\nimport Human from \"$lib/species/sentient/human.js\";\nimport type Species from \"$lib/species/species.js\";\nimport * as Words from \"@ironarachne/words\";\nimport DomainSet from \"../domains/domainset.js\";\nimport Realm from \"../realms/realm.js\";\n\nexport default class Deity {\n  name: string;\n  species: Species;\n  gender: Gender;\n  ageCategory: AgeCategory;\n  domains: DomainSet;\n  titles: string[];\n  realm: Realm;\n  description: string;\n  personalityTraits: PersonalityTrait[];\n  personality: string;\n  appearance: string;\n  holyItem: string;\n  holySymbol: string;\n  isAlive: boolean;\n\n  constructor() {\n    this.name = \"\";\n    this.species = Human;\n    this.gender = Human.genders[0];\n    this.ageCategory = Human.ageCategories[0];\n    this.domains = new DomainSet();\n    this.titles = [];\n    this.realm = new Realm();\n    this.description = \"\";\n    this.personality = \"\";\n    this.personalityTraits = [];\n    this.appearance = \"\";\n    this.holyItem = \"\";\n    this.holySymbol = \"\";\n    this.isAlive = true;\n  }\n\n  describe(): string {\n    const speciesAdj = this.species.adjective;\n    const subjectivePronoun = this.gender.pronouns.subjective;\n    let noun = \"god\";\n    const domainNames = [];\n\n    domainNames.push(this.domains.primary.name);\n\n    for (let i = 0; i < this.domains.secondaries.length; i++) {\n      domainNames.push(this.domains.secondaries[i].name);\n    }\n\n    if (this.gender.name === \"female\") {\n      noun = \"goddess\";\n    }\n\n    let description = `${this.name} appears as ${Words.article(speciesAdj)} ${speciesAdj} ${this.ageCategory.noun}.`;\n    description += ` ${Words.capitalize(subjectivePronoun)} has ${this.appearance}. ${this.personality}.`;\n    description += ` ${this.name} is the ${noun} of ${Words.arrayToPhrase(domainNames)}.`;\n    description += ` ${Words.capitalize(subjectivePronoun)} resides in ${\n      Words.uncapitalize(\n        this.realm.name,\n      )\n    }.`;\n\n    return description;\n  }\n}\n","import type AgeCategory from \"$lib/age/age_category\";\nimport type Gender from \"$lib/gender/gender\";\nimport type Species from \"$lib/species/species\";\nimport type DomainSet from \"../domains/domainset\";\nimport type Realm from \"../realms/realm\";\nimport Deity from \"./deity\";\n\nexport function newDeity(\n  name: string,\n  species: Species,\n  gender: Gender,\n  ageCategory: AgeCategory,\n  realm: Realm,\n  domains: DomainSet,\n) {\n  let deity = new Deity();\n\n  deity.name = name;\n  deity.species = species;\n  deity.gender = gender;\n  deity.ageCategory = ageCategory;\n  deity.domains = domains;\n  deity.realm = realm;\n\n  return deity;\n}\n","import * as Characters from \"$lib/characters/characters.js\";\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport * as Deities from \"./deities.js\";\nimport type Deity from \"./deity.js\";\nimport type DeityGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class DeityGenerator {\n  config: DeityGeneratorConfig;\n\n  constructor(config: DeityGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Deity {\n    let possibleHolyItems: string[] = [];\n    let possibleHolySymbols: string[] = [];\n\n    const characterDetails = Characters.generate(this.config.characterGeneratorConfig);\n\n    if (this.config.maleNameGenerator === null) {\n      throw new Error(\"male name generator not set\");\n    } else if (this.config.femaleNameGenerator === null) {\n      throw new Error(\"female name generator not set\");\n    }\n    let deityName = this.config.femaleNameGenerator.generate(1)[0];\n    if (characterDetails.gender.name == \"male\") {\n      deityName = this.config.maleNameGenerator.generate(1)[0];\n    }\n\n    let realm = RND.item(this.config.realms);\n    if (realm === undefined) {\n      throw new Error(\"realm is undefined\");\n    }\n\n    let deity = Deities.newDeity(\n      deityName,\n      characterDetails.species,\n      characterDetails.gender,\n      characterDetails.ageCategory,\n      realm,\n      this.config.domainSet,\n    );\n\n    possibleHolyItems = this.config.domainSet.primary.holyItems;\n    possibleHolySymbols = this.config.domainSet.primary.holySymbols;\n\n    deity.holyItem = RND.item(possibleHolyItems);\n    deity.holySymbol = RND.item(possibleHolySymbols);\n\n    const chanceOfRealmTrait = RND.simple(100);\n\n    const physicalTraits = characterDetails.physicalTraits;\n    let appearanceTraits = [];\n\n    for (let i = 0; i < physicalTraits.length; i++) {\n      appearanceTraits.push(physicalTraits[i].description);\n    }\n\n    if (chanceOfRealmTrait > 80) {\n      let realmTrait = RND.item(deity.realm.appearanceTraits);\n      if (realmTrait === undefined) {\n        console.log(JSON.stringify(deity.realm));\n        throw new Error(\"realm appearance trait is undefined\");\n      }\n      appearanceTraits.push(realmTrait.phrase);\n    }\n\n    deity.personalityTraits = characterDetails.personalityTraits;\n    deity.personality = describePersonality(deity);\n    deity.appearance = Words.arrayToPhrase(appearanceTraits);\n    deity.description = deity.describe();\n\n    return deity;\n  }\n}\n\nfunction describePersonality(deity: Deity): string {\n  let traits = [];\n\n  for (let i = 0; i < deity.personalityTraits.length; i++) {\n    traits.push(deity.personalityTraits[i].descriptor);\n  }\n\n  return Words.capitalize(deity.gender.pronouns.subjective) + \" is \" + Words.arrayToPhrase(traits);\n}\n","import type CharacterGeneratorConfig from \"$lib/characters/character_generator_config.js\";\nimport * as PremadeConfigs from \"$lib/characters/premade_configs.js\";\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport DomainSet from \"../domains/domainset.js\";\nimport type Realm from \"../realms/realm.js\";\n\nexport default class DeityGeneratorConfig {\n  domainSet: DomainSet;\n  realms: Realm[];\n  characterGeneratorConfig: CharacterGeneratorConfig;\n  femaleNameGenerator: MUN.Generator | null;\n  maleNameGenerator: MUN.Generator | null;\n\n  constructor() {\n    let charGenConfig = PremadeConfigs.getFantasy();\n\n    this.realms = [];\n    this.domainSet = new DomainSet();\n    this.characterGeneratorConfig = charGenConfig;\n\n    let genSet = MUN.getSetByName(\"human\", MUN.fantasyRaceSets());\n\n    this.femaleNameGenerator = genSet.female;\n    this.maleNameGenerator = genSet.male;\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport DomainSet from \"./domainset.js\";\nimport type DomainGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class DomainGenerator {\n  config: DomainGeneratorConfig;\n\n  constructor(config: DomainGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): DomainSet {\n    let domainSet = new DomainSet();\n\n    this.config.domains = RND.shuffle(this.config.domains);\n\n    if (this.config.domains.length < this.config.numberOfDomains) {\n      throw new Error(\"Not enough domains in domain generator config for the requested number of domains.\");\n    }\n\n    let primary = this.config.domains.pop();\n    if (primary !== undefined) {\n      domainSet.primary = primary;\n    } else {\n      throw new Error(\"No primary domain found.\");\n    }\n\n    for (let i = 0; i < this.config.numberOfDomains; i++) {\n      const d = this.config.domains.pop();\n      if (d === undefined) {\n        throw new Error(\"No secondary domain found.\");\n      }\n\n      domainSet.secondaries.push(d);\n    }\n\n    return domainSet;\n  }\n}\n","import type Domain from \"./domain.js\";\nimport * as Domains from \"./domains.js\";\n\nexport default class DomainGeneratorConfig {\n  numberOfDomains: number;\n  domains: Domain[];\n\n  constructor() {\n    this.numberOfDomains = 1;\n    this.domains = JSON.parse(JSON.stringify(Domains.allDomains));\n  }\n}\n","import type PantheonMember from \"./pantheonmember.js\";\n\nexport default class Pantheon {\n  name: string;\n  description: string;\n  members: PantheonMember[];\n  leader: number;\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.members = [];\n    this.leader = -1;\n  }\n}\n","import type Relationship from \"../../relationships/relationship.js\";\nimport Deity from \"../deities/deity.js\";\n\nexport default class PantheonMember {\n  deity: Deity;\n  relationships: Relationship[];\n\n  constructor() {\n    this.deity = new Deity();\n    this.relationships = [];\n  }\n}\n","import RelationshipGenerator from \"$lib/relationships/generator.js\";\nimport type Relationship from \"$lib/relationships/relationship.js\";\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport DeityGenerator from \"../deities/generator.js\";\nimport DeityGeneratorConfig from \"../deities/generatorconfig.js\";\nimport type DomainSet from \"../domains/domainset.js\";\nimport DomainGenerator from \"../domains/generator.js\";\nimport DomainGeneratorConfig from \"../domains/generatorconfig.js\";\nimport type PantheonGeneratorConfig from \"./generatorconfig.js\";\nimport Pantheon from \"./pantheon.js\";\nimport PantheonMember from \"./pantheonmember.js\";\n\nexport default class PantheonGenerator {\n  config: PantheonGeneratorConfig;\n\n  constructor(config: PantheonGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Pantheon {\n    let pantheon = new Pantheon();\n\n    let deityGenConfig = new DeityGeneratorConfig();\n    deityGenConfig.characterGeneratorConfig.speciesOptions = this.config.speciesOptions;\n    deityGenConfig.realms = this.config.realms;\n    deityGenConfig.femaleNameGenerator = this.config.femaleNameGenerator;\n    deityGenConfig.maleNameGenerator = this.config.maleNameGenerator;\n\n    const numberOfDeities = random.int(this.config.minDeities, this.config.maxDeities);\n\n    const domainSets = randomDomainSets(numberOfDeities);\n\n    for (let i = 0; i < domainSets.length; i++) {\n      let member = new PantheonMember();\n      deityGenConfig.domainSet = domainSets[i];\n      let deityGen = new DeityGenerator(deityGenConfig);\n\n      let deity = deityGen.generate();\n      member.deity = deity;\n\n      pantheon.members.push(member);\n    }\n\n    let relationshipGenerator = new RelationshipGenerator(0);\n    let numberOfRelationships = random.int(1, 3);\n\n    for (let j = 0; j < numberOfRelationships; j++) {\n      for (let i = 0; i < pantheon.members.length; i++) {\n        relationshipGenerator.strength = random.int(-2, 2);\n        const target = random.int(0, pantheon.members.length - 1);\n        if (target != i) {\n          let alreadyExists = false;\n          for (let k = 0; k < pantheon.members[i].relationships.length; k++) {\n            if (pantheon.members[i].relationships[k].target == target) {\n              alreadyExists = true;\n            }\n          }\n          if (!alreadyExists) {\n            let outward = relationshipGenerator.generate();\n            outward.target = target;\n            pantheon.members[i].relationships.push(outward);\n\n            let inward = relationshipGenerator.generate();\n            inward.target = i;\n            pantheon.members[target].relationships.push(inward);\n          }\n        }\n      }\n    }\n\n    if (pantheon.members.length > 1) {\n      for (let i = 0; i < pantheon.members.length; i++) {\n        let relationships = [];\n\n        for (let x = 0; x < pantheon.members[i].relationships.length; x++) {\n          relationships.push(\n            getRelationshipPhrase(\n              pantheon.members[i].relationships[x],\n              pantheon.members[pantheon.members[i].relationships[x].target].deity.name,\n            ),\n          );\n        }\n\n        const relationshipDescription = \" \" + pantheon.members[i].deity.name + \" \" + Words.arrayToPhrase(relationships)\n          + \".\";\n\n        pantheon.members[i].deity.description += relationshipDescription;\n      }\n    }\n\n    return pantheon;\n  }\n}\n\nfunction getRelationshipPhrase(relationship: Relationship, targetName: string): string {\n  return RND.item([`${relationship.verb} ${targetName}`]);\n}\n\nfunction randomDomainSets(numberOfSets: number): DomainSet[] {\n  let domainGenConfig = new DomainGeneratorConfig();\n  let domainGen = new DomainGenerator(domainGenConfig);\n\n  let sets = [];\n  let allDomains = RND.shuffle(JSON.parse(JSON.stringify(domainGenConfig.domains)));\n\n  for (let i = 0; i < numberOfSets; i++) {\n    let domains = [];\n\n    for (let j = 0; j < domainGen.config.numberOfDomains + 1; j++) {\n      domains.push(allDomains.pop());\n    }\n\n    domainGen.config.domains = domains;\n\n    let domainSet = domainGen.generate();\n\n    sets.push(domainSet);\n  }\n\n  return sets;\n}\n","import Human from \"$lib/species/sentient/human.js\";\nimport type Species from \"$lib/species/species.js\";\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport type Domain from \"../domains/domain.js\";\nimport * as Domains from \"../domains/domains.js\";\nimport type Realm from \"../realms/realm.js\";\n\nexport default class PantheonGeneratorConfig {\n  domains: Domain[];\n  realms: Realm[];\n  minDeities: number;\n  maxDeities: number;\n  speciesOptions: Species[];\n  femaleNameGenerator: MUN.Generator;\n  maleNameGenerator: MUN.Generator;\n\n  constructor() {\n    this.domains = JSON.parse(JSON.stringify(Domains.allDomains));\n    this.realms = [];\n    this.speciesOptions = [Human];\n    this.minDeities = 1;\n    this.maxDeities = 16;\n\n    let genSet = MUN.getSetByName(\"fantasy\", MUN.cultureSets());\n\n    this.femaleNameGenerator = genSet.female;\n    this.maleNameGenerator = genSet.male;\n  }\n}\n","import type AppearanceTrait from \"./trait\";\n\nexport function byBodyPart(traits: AppearanceTrait[], bodyPart: string): AppearanceTrait[] {\n  const results: AppearanceTrait[] = [];\n\n  for (let i = 0; i < traits.length; i++) {\n    if (traits[i].bodyPart == bodyPart) {\n      results.push(traits[i]);\n    }\n  }\n\n  return results;\n}\n\nexport function byAnyTag(traits: AppearanceTrait[], tags: string[]): AppearanceTrait[] {\n  const results: AppearanceTrait[] = [];\n\n  for (let i = 0; i < traits.length; i++) {\n    for (let j = 0; j < tags.length; j++) {\n      if (traits[i].tags.includes(tags[j])) {\n        results.push(traits[i]);\n      }\n    }\n  }\n\n  return results;\n}\n\nexport function byTag(traits: AppearanceTrait[], tag: string): AppearanceTrait[] {\n  const results: AppearanceTrait[] = [];\n\n  for (let i = 0; i < traits.length; i++) {\n    if (traits[i].tags.includes(tag)) {\n      results.push(traits[i]);\n    }\n  }\n\n  return results;\n}\n","import type AppearanceTrait from \"$lib/appearance/trait.js\";\nimport * as AppearanceTraits from \"$lib/appearance/traits.js\";\nimport type RealmConcept from \"./realms/realmconcept.js\";\n\nexport const allTraits = [\n  { phrase: \"six feathered wings\", bodyPart: \"wings\", tags: [\"sky\"] },\n  { phrase: \"four feathered wings\", bodyPart: \"wings\", tags: [\"sky\"] },\n  { phrase: \"two large feathered wings\", bodyPart: \"wings\", tags: [\"sky\", \"dreamlike\"] },\n  { phrase: \"large leathery wings\", bodyPart: \"wings\", tags: [\"sky\", \"death\"] },\n  { phrase: \"a lion's tail'\", bodyPart: \"tail\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"a whip-like tail\", bodyPart: \"tail\", tags: [\"earth\", \"death\"] },\n  { phrase: \"two tails\", bodyPart: \"tail\", tags: [\"alien\"] },\n  { phrase: \"the horns of a goat\", bodyPart: \"horns\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"the horns of a ram\", bodyPart: \"horns\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"the antlers of a stag\", bodyPart: \"horns\", tags: [\"forest\"] },\n  { phrase: \"the antlers of a deer\", bodyPart: \"horns\", tags: [\"forest\", \"surreal\"] },\n  { phrase: \"short, pointed horns\", bodyPart: \"horns\", tags: [\"earth\", \"death\"] },\n  { phrase: \"tall, straight horns\", bodyPart: \"horns\", tags: [\"earth\", \"death\"] },\n  { phrase: \"glowing blue eyes\", bodyPart: \"eyes\", tags: [\"water\"] },\n  { phrase: \"glowing yellow eyes\", bodyPart: \"eyes\", tags: [\"sky\", \"water\"] },\n  { phrase: \"glowing red eyes\", bodyPart: \"eyes\", tags: [\"earth\", \"death\", \"alien\"] },\n  { phrase: \"glowing orange eyes\", bodyPart: \"eyes\", tags: [\"earth\", \"sky\"] },\n  { phrase: \"glowing green eyes\", bodyPart: \"eyes\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"glowing purple eyes\", bodyPart: \"eyes\", tags: [\"death\", \"alien\"] },\n  { phrase: \"eyes that burn with an inner fire\", bodyPart: \"eyes\", tags: [\"sky\"] },\n  { phrase: \"four eyes\", bodyPart: \"eyes\", tags: [\"alien\"] },\n  { phrase: \"six eyes\", bodyPart: \"eyes\", tags: [\"alien\"] },\n  { phrase: \"eight eyes\", bodyPart: \"eyes\", tags: [\"alien\"] },\n  { phrase: \"no eyes\", bodyPart: \"eyes\", tags: [\"death\", \"alien\"] },\n  { phrase: \"reptilian eyes\", bodyPart: \"eyes\", tags: [\"forest\", \"earth\"] },\n  { phrase: \"scales instead of skin\", bodyPart: \"skin\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"skin that glows faintly\", bodyPart: \"skin\", tags: [\"sky\"] },\n  { phrase: \"skin made of living rock\", bodyPart: \"skin\", tags: [\"earth\"] },\n  { phrase: \"blue skin\", bodyPart: \"skin\", tags: [\"water\"] },\n  { phrase: \"green skin\", bodyPart: \"skin\", tags: [\"water\"] },\n  { phrase: \"crystalline skin\", bodyPart: \"skin\", tags: [\"earth\"] },\n  { phrase: \"translucent grey skin\", bodyPart: \"skin\", tags: [\"death\"] },\n  { phrase: \"dull grey skin\", bodyPart: \"skin\", tags: [\"death\"] },\n  { phrase: \"skin covered in leaves\", bodyPart: \"skin\", tags: [\"forest\"] },\n  { phrase: \"skin made of star-lit blackness\", bodyPart: \"skin\", tags: [\"alien\"] },\n  { phrase: \"iridescent skin\", bodyPart: \"skin\", tags: [\"alien\", \"surreal\"] },\n  { phrase: \"eight tentacles\", bodyPart: \"tentacles\", tags: [\"alien\"] },\n  { phrase: \"six tentacles\", bodyPart: \"tentacles\", tags: [\"alien\"] },\n  { phrase: \"four tentacles\", bodyPart: \"tentacles\", tags: [\"alien\"] },\n  { phrase: \"the head of a lion\", bodyPart: \"head\", tags: [\"forest\"] },\n  { phrase: \"the head of a bear\", bodyPart: \"head\", tags: [\"forest\"] },\n  { phrase: \"the head of a dragon\", bodyPart: \"head\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"the head of a swan\", bodyPart: \"head\", tags: [\"sky\", \"water\"] },\n  { phrase: \"the head of a deer\", bodyPart: \"head\", tags: [\"forest\"] },\n  { phrase: \"the head of a cat\", bodyPart: \"head\", tags: [\"earth\", \"desert\"] },\n  { phrase: \"the head of a wolf\", bodyPart: \"head\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"twelve feathered wings\", bodyPart: \"wings\", tags: [\"sky\", \"dreamlike\"] },\n  { phrase: \"bat-like wings\", bodyPart: \"wings\", tags: [\"night\", \"moon\"] },\n  { phrase: \"insect-like wings\", bodyPart: \"wings\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"crystal-clear wings\", bodyPart: \"wings\", tags: [\"sky\", \"surreal\"] },\n  { phrase: \"feathered wings that shimmer\", bodyPart: \"wings\", tags: [\"sky\", \"water\"] },\n  { phrase: \"a serpent's tail\", bodyPart: \"tail\", tags: [\"earth\", \"water\"] },\n  { phrase: \"a tail with a bioluminescent tip\", bodyPart: \"tail\", tags: [\"water\", \"surreal\"] },\n  { phrase: \"three tails\", bodyPart: \"tail\", tags: [\"surreal\"] },\n  { phrase: \"twisted horns with glowing runes\", bodyPart: \"horns\", tags: [\"magic\", \"surreal\"] },\n  { phrase: \"curved horns with gemstone inlays\", bodyPart: \"horns\", tags: [\"earth\", \"wealth\"] },\n  { phrase: \"feathery antlers with ethereal wisps\", bodyPart: \"horns\", tags: [\"forest\", \"dreamlike\"] },\n  { phrase: \"horns that emit a haunting melody\", bodyPart: \"horns\", tags: [\"earth\", \"music\"] },\n  { phrase: \"pearlescent eyes that change colors\", bodyPart: \"eyes\", tags: [\"sky\", \"water\"] },\n  { phrase: \"eyes with galaxies swirling within\", bodyPart: \"eyes\", tags: [\"sky\", \"cosmic\"] },\n  { phrase: \"eyes that see into other dimensions\", bodyPart: \"eyes\", tags: [\"surreal\", \"alien\"] },\n  { phrase: \"eyes with a mesmerizing hypnotic gaze\", bodyPart: \"eyes\", tags: [\"magic\", \"surreal\"] },\n  { phrase: \"eyes that mirror the emotions of others\", bodyPart: \"eyes\", tags: [\"empathy\", \"surreal\"] },\n  { phrase: \"eyes that emit sparks of lightning\", bodyPart: \"eyes\", tags: [\"storm\", \"electricity\"] },\n  { phrase: \"eyes on flexible stalks\", bodyPart: \"eyes\", tags: [\"alien\", \"surreal\"] },\n  { phrase: \"molten lava-like skin\", bodyPart: \"skin\", tags: [\"volcano\", \"fire\"] },\n  { phrase: \"shimmering opalescent skin\", bodyPart: \"skin\", tags: [\"sky\", \"water\"] },\n  { phrase: \"butterfly wings with shifting patterns\", bodyPart: \"wings\", tags: [\"dream\", \"surreal\"] },\n  { phrase: \"floating ethereal wings of light\", bodyPart: \"wings\", tags: [\"dream\", \"surreal\"] },\n  { phrase: \"wings made of iridescent mist\", bodyPart: \"wings\", tags: [\"dream\", \"surreal\"] },\n  { phrase: \"feathers that change color with emotions\", bodyPart: \"wings\", tags: [\"dream\", \"empathy\"] },\n  { phrase: \"a tail of shimmering stardust\", bodyPart: \"tail\", tags: [\"dream\", \"cosmic\"] },\n  { phrase: \"tail that trails rainbows as you move\", bodyPart: \"tail\", tags: [\"dream\", \"surreal\"] },\n  { phrase: \"a tail with glowing constellations\", bodyPart: \"tail\", tags: [\"dream\", \"cosmic\"] },\n  { phrase: \"horns that emit soft, soothing melodies\", bodyPart: \"horns\", tags: [\"dream\", \"music\"] },\n  { phrase: \"horns adorned with floating gemstones\", bodyPart: \"horns\", tags: [\"dream\", \"surreal\"] },\n  { phrase: \"horns that sparkle like starlight\", bodyPart: \"horns\", tags: [\"dream\", \"cosmic\"] },\n  { phrase: \"eyes that reflect the landscapes of dreams\", bodyPart: \"eyes\", tags: [\"dream\", \"surreal\"] },\n  { phrase: \"eyes with ever-changing patterns of light\", bodyPart: \"eyes\", tags: [\"dream\", \"surreal\"] },\n  { phrase: \"eyes that shimmer like enchanted pools\", bodyPart: \"eyes\", tags: [\"dream\", \"water\"] },\n  { phrase: \"skin that shifts like flowing watercolors\", bodyPart: \"skin\", tags: [\"dream\", \"surreal\"] },\n  { phrase: \"skin that glows softly with inner thoughts\", bodyPart: \"skin\", tags: [\"dream\", \"empathy\"] },\n  { phrase: \"skin covered in delicate, luminescent vines\", bodyPart: \"skin\", tags: [\"dream\", \"forest\"] },\n  { phrase: \"skin that shimmers like a mirage\", bodyPart: \"skin\", tags: [\"dream\", \"desert\"] },\n  { phrase: \"skin that resembles the surface of a nebula\", bodyPart: \"skin\", tags: [\"dream\", \"cosmic\"] },\n  { phrase: \"skin that changes texture with emotions\", bodyPart: \"skin\", tags: [\"dream\", \"empathy\"] },\n  { phrase: \"a head crowned with floating ethereal flames\", bodyPart: \"head\", tags: [\"dream\", \"fire\"] },\n  { phrase: \"a head with a halo of radiant energy\", bodyPart: \"head\", tags: [\"dream\", \"surreal\"] },\n  { phrase: \"fiery wings with ember-like feathers\", bodyPart: \"wings\", tags: [\"fire\", \"heat\"] },\n  { phrase: \"wings that resemble molten lava flows\", bodyPart: \"wings\", tags: [\"fire\", \"earth\"] },\n  { phrase: \"smoldering wings that leave trails of sparks\", bodyPart: \"wings\", tags: [\"fire\", \"surreal\"] },\n  { phrase: \"earthen wings with intricate rock formations\", bodyPart: \"wings\", tags: [\"earth\", \"mountain\"] },\n  { phrase: \"wings made of intertwined vines and roots\", bodyPart: \"wings\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"crystalline wings that shimmer like gemstones\", bodyPart: \"wings\", tags: [\"earth\", \"jewel\"] },\n  { phrase: \"a tail with a fiery, flickering tip\", bodyPart: \"tail\", tags: [\"fire\", \"surreal\"] },\n  { phrase: \"tail adorned with rugged, earthy textures\", bodyPart: \"tail\", tags: [\"earth\", \"mountain\"] },\n  { phrase: \"tail with geode-like patterns and colors\", bodyPart: \"tail\", tags: [\"earth\", \"jewel\"] },\n  { phrase: \"horns that resemble twisting flames\", bodyPart: \"horns\", tags: [\"fire\", \"heat\"] },\n  { phrase: \"horns made of sturdy, petrified wood\", bodyPart: \"horns\", tags: [\"earth\", \"forest\"] },\n  { phrase: \"horns with patterns reminiscent of ancient runes\", bodyPart: \"horns\", tags: [\"earth\", \"magic\"] },\n  { phrase: \"eyes that flicker like burning embers\", bodyPart: \"eyes\", tags: [\"fire\", \"heat\"] },\n  { phrase: \"eyes with deep, earthy hues like rich soil\", bodyPart: \"eyes\", tags: [\"earth\", \"nature\"] },\n  { phrase: \"eyes that reflect the molten core of the earth\", bodyPart: \"eyes\", tags: [\"earth\", \"cosmic\"] },\n  { phrase: \"skin that glows with inner fire\", bodyPart: \"skin\", tags: [\"fire\", \"surreal\"] },\n  { phrase: \"skin with a texture resembling cracked earth\", bodyPart: \"skin\", tags: [\"earth\", \"desert\"] },\n  { phrase: \"skin covered in intricate, glowing tribal patterns\", bodyPart: \"skin\", tags: [\"earth\", \"magic\"] },\n  { phrase: \"a head crowned with blazing, fiery tendrils\", bodyPart: \"head\", tags: [\"fire\", \"surreal\"] },\n  { phrase: \"a head with rugged, stone-like features\", bodyPart: \"head\", tags: [\"earth\", \"mountain\"] },\n  { phrase: \"a head adorned with gemstone-encrusted horns\", bodyPart: \"head\", tags: [\"earth\", \"jewel\"] },\n];\n\nexport function byRealmConcept(concept: RealmConcept): AppearanceTrait[] {\n  return AppearanceTraits.byAnyTag(allTraits, concept.appearanceTags);\n}\n","export default class RealmConcept {\n  name: string;\n  nameOptions: string[];\n  appearanceTags: string[];\n  personalityTags: string[];\n  descriptionOptions: string[];\n\n  constructor(\n    name: string,\n    nameOptions: string[],\n    appearanceTags: string[],\n    personalityTags: string[],\n    descriptionOptions: string[],\n  ) {\n    this.name = name;\n    this.nameOptions = nameOptions;\n    this.appearanceTags = appearanceTags;\n    this.personalityTags = personalityTags;\n    this.descriptionOptions = descriptionOptions;\n  }\n}\n","import RealmConcept from \"./realmconcept.js\";\n\nexport const realmConcepts = [\n  new RealmConcept(\n    \"sky\",\n    [\n      \"The Eternal Heavens\",\n      \"The Heavens Above\",\n      \"Heaven\",\n      \"The Sky\",\n      \"The Heavens\",\n      \"The Celestial Realm\",\n      \"The Empyrean\",\n      \"The Firmament\",\n    ],\n    [\"sky\", \"clouds\", \"sun\", \"moon\", \"stars\", \"rainbows\", \"light\"],\n    [\"mercurial\", \"caring\", \"wise\", \"flexible\", \"majestic\", \"powerful\", \"graceful\", \"serene\"],\n    [\n      \"Far above the mortal world, {name} is a realm of light and splendor.\",\n      \"{name} is a realm of light and beauty, where celestial beings roam.\",\n      \"The skies of {name} are awash with vibrant colors and shimmering stars.\",\n    ],\n  ),\n  new RealmConcept(\n    \"earth\",\n    [\n      \"The Earth\",\n      \"The Mortal Realm\",\n      \"The Material Plane\",\n      \"The Mundane World\",\n      \"The Physical Plane\",\n      \"The Human World\",\n    ],\n    [\"earth\", \"mountains\", \"rivers\", \"forests\", \"deserts\", \"oceans\", \"caves\", \"valleys\"],\n    [\"stable\", \"stubborn\", \"physical\", \"grounded\", \"tenacious\", \"reliable\", \"practical\"],\n    [\n      \"{name} is where mortals reside, going about their daily lives.\",\n      \"{name} is the home of all mortal beings, full of bustling cities and quiet countryside.\",\n    ],\n  ),\n  new RealmConcept(\n    \"forest\",\n    [\n      \"The Forest\",\n      \"The Eternal Forest\",\n      \"The Divine Forest\",\n      \"The Sylvan Realm\",\n      \"The Verdant Wilds\",\n      \"The Green Domain\",\n    ],\n    [\"forest\", \"trees\", \"plants\", \"animals\", \"rivers\", \"mountains\"],\n    [\"caring\", \"stable\", \"peaceful\", \"graceful\", \"majestic\", \"wise\", \"mystical\"],\n    [\n      \"Hidden far from the mortal world, {name} is deep and mysterious, full of secrets and ancient magic.\",\n      \"{name} is an infinite forest of beauty and mystery, where the spirits of the wild roam free.\",\n      \"The forests of {name} are alive with the sound of birdsong and rustling leaves.\",\n    ],\n  ),\n  new RealmConcept(\n    \"underworld\",\n    [\n      \"The Underworld\",\n      \"The Afterlife\",\n      \"The Kingdom of Death\",\n      \"The Great Beyond\",\n      \"The Netherworld\",\n      \"The Land of the Dead\",\n    ],\n    [\"death\", \"shadow\", \"bones\", \"ghosts\", \"souls\", \"void\"],\n    [\"angry\", \"brooding\", \"peaceful\", \"wise\", \"merciful\", \"judgmental\", \"powerful\"],\n    [\n      \"{name} is where souls go to rest after death, guided by the spirits of the departed.\",\n      \"{name} is a realm of perpetual darkness where the dead rest forever, watched over by the reapers of the underworld.\",\n      \"The halls of {name} are filled with the whispers of the dead, their spirits forever lingering in the shadows.\",\n    ],\n  ),\n  new RealmConcept(\n    \"ocean\",\n    [\n      \"The Vast Sea\",\n      \"The Sea\",\n      \"The Endless Ocean\",\n      \"The Divine Sea\",\n      \"The Ever-Changing Tides\",\n      \"The Fathomless Depths\",\n      \"The Coral Kingdom\",\n      \"The Ocean of Storms\",\n    ],\n    [\"water\", \"salt\", \"waves\", \"foam\", \"currents\", \"whirlpools\", \"tides\", \"depths\"],\n    [\"mercurial\", \"aloof\", \"cruel\", \"flexible\", \"violent\", \"majestic\", \"mysterious\"],\n    [\n      \"{name} is a realm apart from mortal seas, full of life and infinitely deep.\",\n      \"The deep and restless waters of {name} hide many secrets.\",\n      \"Beneath the surface of {name} lies a kingdom of wonder and terror.\",\n    ],\n  ),\n  new RealmConcept(\n    \"mountain\",\n    [\n      \"The Great Mountain\",\n      \"The Mountain\",\n      \"The Divine Mountain\",\n      \"The Endless Peak\",\n      \"The Celestial Summit\",\n      \"The Sky-Splitting Colossus\",\n      \"The Stone Sentinel\",\n      \"The Cradle of the Gods\",\n    ],\n    [\"earth\", \"rock\", \"stone\", \"ice\", \"snow\", \"summit\", \"peak\", \"valley\"],\n    [\"aloof\", \"wise\", \"physical\", \"stable\", \"majestic\", \"immovable\", \"mysterious\"],\n    [\n      \"{name} is far larger than any mountain of the mortal world.\",\n      \"{name} is covered in lush forests and cascading waterfalls, a towering paradise.\",\n      \"Beneath the peaks and valleys of {name} lies a realm of fire and darkness.\",\n    ],\n  ),\n  new RealmConcept(\n    \"void\",\n    [\n      \"The Nameless Void\",\n      \"The Endless Void\",\n      \"The Void\",\n      \"The Dark Beyond\",\n      \"The Endless Dark\",\n      \"The Abyss\",\n      \"The Great Emptiness\",\n      \"The Eternal Nothingness\",\n    ],\n    [\"alien\", \"darkness\", \"emptiness\", \"silence\", \"cold\", \"nothingness\", \"absence\"],\n    [\"alien\", \"clever\", \"unknowable\", \"silent\", \"watchful\", \"impenetrable\"],\n    [\n      \"{name} is home to things unknowable and alien.\",\n      \"There are mysteries in {name} that no mortal can hope to perceive, let alone understand.\",\n      \"{name} is a realm of eternal darkness and emptiness, where the very fabric of reality is twisted and distorted.\",\n    ],\n  ),\n  new RealmConcept(\n    \"dream\",\n    [\n      \"The Realm of Dreams\",\n      \"The Dreamlands\",\n      \"The Land of Nod\",\n      \"The Ethereal Plane\",\n      \"The Realm of Imagination\",\n      \"The World of Sleep\",\n    ],\n    [\"ethereal\", \"fantastical\", \"dreamlike\", \"otherworldly\", \"surreal\", \"shimmering\"],\n    [\"mysterious\", \"whimsical\", \"fickle\", \"curious\", \"enigmatic\", \"playful\"],\n    [\n      \"{name} is a place where the impossible becomes reality and where the line between dreams and waking life is blurred.\",\n      \"The ethereal beauty of {name} is home to creatures born of pure imagination and fantasy.\",\n      \"In {name}, the landscape constantly shifts and changes, shaped by the whims of the dreamers who call it home.\",\n      \"The dreamscape of {name} is a realm of infinite possibilities, where anything can happen and nothing is truly impossible.\",\n      \"{name} is a place where the innermost thoughts and desires of mortals manifest into reality, for better or for worse.\",\n      \"Those who journey into {name} often find themselves caught in a never-ending cycle of dreams and nightmares.\",\n    ],\n  ),\n];\n","import type AppearanceTrait from \"$lib/appearance/trait\";\nimport Realm from \"./realm\";\n\nexport function newRealm(\n  name: string,\n  description: string,\n  personalityTraits: string[],\n  appearanceTraits: AppearanceTrait[],\n): Realm {\n  let realm = new Realm();\n  realm.name = name;\n  realm.description = description;\n  realm.personalityTraits = personalityTraits;\n  realm.appearanceTraits = appearanceTraits;\n\n  return realm;\n}\n","import * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport * as AppearanceTraits from \"../appearancetraits.js\";\nimport type RealmGeneratorConfig from \"./generatorconfig.js\";\nimport type Realm from \"./realm.js\";\nimport type RealmConcept from \"./realmconcept.js\";\nimport * as RealmConcepts from \"./realmconcepts.js\";\nimport * as Realms from \"./realms.js\";\n\nexport default class RealmGenerator {\n  config: RealmGeneratorConfig;\n\n  constructor(config: RealmGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Realm[] {\n    const realms = [];\n\n    const numberOfRealms = this.config.numberOfRealms;\n\n    let allConcepts: RealmConcept[] = JSON.parse(JSON.stringify(RealmConcepts.realmConcepts));\n    allConcepts = RND.shuffle(allConcepts);\n\n    for (let i = 0; i < numberOfRealms; i++) {\n      const concept = allConcepts.pop();\n\n      if (typeof concept == \"object\") {\n        const realmName = RND.item(concept.nameOptions);\n\n        const appearanceTraits = AppearanceTraits.byRealmConcept(concept);\n\n        if (appearanceTraits.length < 1) {\n          throw new Error(`No appearance traits found for realm concept ${concept.name}.`);\n        }\n\n        let description = RND.item(concept.descriptionOptions).replace(\n          \"{name}\",\n          Words.uncapitalize(realmName),\n        );\n        description = Words.capitalize(description);\n\n        const realm = Realms.newRealm(realmName, description, [], appearanceTraits);\n\n        realms.push(realm);\n      }\n    }\n\n    return realms;\n  }\n}\n","export default class RealmGeneratorConfig {\n  numberOfRealms: number;\n  requireDualistic: boolean;\n\n  constructor() {\n    this.numberOfRealms = 2;\n    this.requireDualistic = false;\n  }\n}\n","import type Pantheon from \"./pantheons/pantheon.js\";\nimport type Realm from \"./realms/realm.js\";\n\nexport default class Religion {\n  name: string;\n  description: string;\n  realms: Realm[];\n  pantheon: Pantheon | null;\n\n  constructor(name: string) {\n    this.name = name;\n    this.description = \"\";\n    this.realms = [];\n    this.pantheon = null;\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport type ReligionGeneratorConfig from \"./generatorconfig.js\";\nimport PantheonGenerator from \"./pantheons/generator.js\";\nimport PantheonGeneratorConfig from \"./pantheons/generatorconfig.js\";\nimport RealmGenerator from \"./realms/generator.js\";\nimport RealmGeneratorConfig from \"./realms/generatorconfig.js\";\nimport Religion from \"./religion.js\";\n\nexport default class ReligionGenerator {\n  config: ReligionGeneratorConfig;\n\n  constructor(config: ReligionGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Religion {\n    let realmGenConfig = new RealmGeneratorConfig();\n    let realmGen = new RealmGenerator(realmGenConfig);\n    const realms = realmGen.generate();\n\n    const category = RND.item(this.config.categories);\n\n    const religion = new Religion(this.config.nameGenerator.generate(1)[0]);\n    religion.realms = realms;\n\n    if (category.hasDeities) {\n      let pantheonGenConfig = new PantheonGeneratorConfig();\n      pantheonGenConfig.realms = realms;\n      pantheonGenConfig.speciesOptions = this.config.deitySpeciesOptions;\n      pantheonGenConfig.minDeities = category.minDeities;\n      pantheonGenConfig.maxDeities = category.maxDeities;\n      pantheonGenConfig.femaleNameGenerator = this.config.femaleNameGenerator;\n      pantheonGenConfig.maleNameGenerator = this.config.maleNameGenerator;\n      let pantheonGen = new PantheonGenerator(pantheonGenConfig);\n      let pantheon = pantheonGen.generate();\n      pantheon.description = category.description;\n      religion.pantheon = pantheon;\n\n      if (category.hasLeader) {\n        religion.pantheon.leader = random.int(0, religion.pantheon.members.length - 1);\n\n        let leaderTitle = \"Queen of the Gods\";\n        if (religion.pantheon.members[religion.pantheon.leader].deity.gender.name === \"male\") {\n          leaderTitle = \"King of the Gods\";\n        }\n\n        religion.pantheon.members[religion.pantheon.leader].deity.titles.push(leaderTitle);\n        religion.pantheon.description += ` ${\n          religion.pantheon.members[religion.pantheon.leader].deity.name\n        } is the ${leaderTitle}.`;\n      }\n    }\n\n    if (religion.pantheon !== null) {\n      religion.description = religion.pantheon.description\n        + \" \"\n        + randomGatheringTimes()\n        + \" \"\n        + Words.capitalize(randomGatheringPlace())\n        + \".\";\n    } else {\n      religion.description = category.description + \" \" + randomGatheringTimes()\n        + \" \"\n        + Words.capitalize(randomGatheringPlace())\n        + \".\";\n    }\n\n    return religion;\n  }\n}\n\nfunction randomGatheringPlace(): string {\n  let description = RND.item([\n    \"{follower} gather in {place} for {service}\",\n    \"{follower} congregate in {place} to be led in {service} by {leader}\",\n    \"{follower} meet in {place} to engage in {service} and hear from {leader}\",\n    \"At {place}, {follower} come together for {service} led by {leader}\",\n    \"Join {follower} at {place} for {service} and fellowship with {leader}\",\n    \"{follower} assemble in {place} to participate in {service} and share with {leader}\",\n    \"{follower} unite at {place} for {service} and to learn from {leader}\",\n    \"At {place}, {follower} come together to seek guidance and wisdom from {leader} through {service}\",\n  ]);\n\n  const follower = RND.item([\n    \"adherents\",\n    \"believers\",\n    \"disciples\",\n    \"devotees\",\n    \"faithful\",\n    \"followers\",\n    \"pilgrims\",\n    \"worshippers\",\n    \"zealots\",\n  ]);\n\n  const place = RND.item([\n    \"temples\",\n    \"churches\",\n    \"mosques\",\n    \"synagogues\",\n    \"chapels\",\n    \"shrines\",\n    \"sanctuaries\",\n    \"meeting halls\",\n    \"community centers\",\n    \"outdoor arenas\",\n  ]);\n\n  const service = RND.item([\n    \"silent meditation\",\n    \"guided meditation\",\n    \"chanting\",\n    \"prayer\",\n    \"sacrament\",\n    \"communion\",\n    \"worship\",\n    \"ritual dance\",\n    \"ritual music\",\n    \"structured recitation\",\n    \"spontaneous sharing\",\n    \"teachings and discussions\",\n    \"ritual sacrifice\",\n  ]);\n\n  const leader = RND.item([\n    \"priest\",\n    \"priestess\",\n    \"minister\",\n    \"shaman\",\n    \"spiritual guide\",\n    \"community leader\",\n    \"wise elder\",\n    \"prophet\",\n    \"guru\",\n    \"ascended master\",\n    \"enlightened one\",\n    \"mystic\",\n    \"oracle\",\n  ]);\n\n  description = description\n    .replace(\"{follower}\", follower)\n    .replace(\"{place}\", place)\n    .replace(\"{service}\", service)\n    .replace(\"{leader}\", Words.article(leader) + \" \" + leader);\n\n  return description;\n}\n\nfunction randomGatheringTimes(): string {\n  let description = RND.item([\n    \"Regular gatherings happen once a week.\",\n    \"Regular gatherings happen daily.\",\n    \"Regular gatherings happen once a month.\",\n    \"Weekly gatherings take place every {weekday}.\",\n    \"They come together every {weekday} for a time of {service}.\",\n    \"Their community meets {frequency} for {service} at {time}.\",\n    \"Their gatherings occur {frequency}, bringing {follower} together for {service}.\",\n    \"They gather {frequency} at {place} for {service} and {activity}.\",\n    \"Every {weekday} they gather for {service}, followed by {activity}.\",\n    \"Their gatherings happen {frequency} at {place} and feature {service}, {activity}, and food/drink.\",\n    \"People are invited to the {occasion} gathering, where they partake in {service} and {activity}.\",\n  ]);\n\n  description = description\n    .replace(\n      \"{weekday}\",\n      RND.item([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]),\n    )\n    .replace(\"{frequency}\", RND.item([\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"annually\"]))\n    .replace(\n      \"{follower}\",\n      RND.item([\"worshipers\", \"devotees\", \"believers\", \"faithful\", \"followers\", \"pilgrims\"]),\n    )\n    .replace(\n      \"{service}\",\n      RND.item([\"prayer\", \"worship\", \"meditation\", \"reflection\", \"ritual\", \"sermon\", \"teaching\"]),\n    )\n    .replace(\"{time}\", RND.item([\"sunrise\", \"midday\", \"sunset\", \"evening\", \"night\"]))\n    .replace(\n      \"{place}\",\n      RND.item([\n        \"the temple\",\n        \"the church\",\n        \"the mosque\",\n        \"the synagogue\",\n        \"the chapel\",\n        \"the shrine\",\n        \"the sanctuary\",\n        \"the meeting hall\",\n      ]),\n    )\n    .replace(\n      \"{activity}\",\n      RND.item([\n        \"fellowship\",\n        \"conversation\",\n        \"sharing\",\n        \"food and drink\",\n        \"community service\",\n        \"study\",\n      ]),\n    )\n    .replace(\"{occasion}\", RND.item([\"special\", \"holiday\", \"festive\", \"solemn\"]));\n\n  return description;\n}\n","export default class ReligionCategory {\n  name: string;\n  description: string;\n  hasDeities: boolean;\n  hasLeader: boolean;\n  minDeities: number;\n  maxDeities: number;\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.hasDeities = false;\n    this.hasLeader = false;\n    this.minDeities = 0;\n    this.maxDeities = 0;\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport ReligionCategory from \"./category.js\";\n\nexport default class Monotheism extends ReligionCategory {\n  constructor() {\n    super();\n    this.name = \"monotheism\";\n    this.description = \"This religion \" + RND.item([\"has a single all-powerful god\", \"is monotheistic\"]) + \".\";\n    this.hasDeities = true;\n    this.minDeities = 1;\n    this.maxDeities = 1;\n  }\n}\n","import * as RND from \"@ironarachne/rng\";\nimport ReligionCategory from \"./category.js\";\n\nexport default class Polytheism extends ReligionCategory {\n  constructor() {\n    super();\n    this.name = \"polytheism\";\n    this.description = \"This religion \" + RND.item([\"has several gods\", \"is polytheistic\"]) + \".\";\n    this.hasDeities = true;\n    this.hasLeader = true;\n    this.minDeities = 2;\n    this.maxDeities = 16;\n  }\n}\n","import ReligionCategory from \"./category.js\";\n\nexport default class Shamanism extends ReligionCategory {\n  constructor() {\n    super();\n    this.name = \"shamanism\";\n    this.description = \"This religion is shamanistic.\";\n  }\n}\n","import type ReligionCategory from \"./category.js\";\nimport Monotheism from \"./monotheism.js\";\nimport Polytheism from \"./polytheism.js\";\nimport Shamanism from \"./shamanism.js\";\n\nexport function all(): ReligionCategory[] {\n  return [new Monotheism(), new Polytheism(), new Shamanism()];\n}\n\nexport function byName(name: string, categories: ReligionCategory[]): ReligionCategory {\n  for (let i = 0; i < categories.length; i++) {\n    if (categories[i].name === name) {\n      return categories[i];\n    }\n  }\n\n  throw new Error(`No religion category found with name ${name}.`);\n}\n","import Human from \"$lib/species/sentient/human.js\";\nimport type Species from \"$lib/species/species.js\";\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport * as Categories from \"./categories/categories.js\";\nimport type ReligionCategory from \"./categories/category.js\";\n\nexport default class ReligionGeneratorConfig {\n  categories: ReligionCategory[];\n  deitySpeciesOptions: Species[];\n  nameGenerator: MUN.Generator;\n  femaleNameGenerator: MUN.Generator;\n  maleNameGenerator: MUN.Generator;\n\n  constructor() {\n    this.categories = Categories.all();\n    this.deitySpeciesOptions = [Human];\n\n    let genSet = MUN.getSetByName(\"human\", MUN.fantasyRaceSets());\n\n    this.nameGenerator = genSet.family;\n    this.femaleNameGenerator = genSet.female;\n    this.maleNameGenerator = genSet.male;\n  }\n}\n"],"names":["Relationship","noun","verb","target","strength","__publicField","RelationshipGenerator","RND.item","DomainSet","Domain","Realm","Deity","Human","speciesAdj","subjectivePronoun","domainNames","i","description","Words.article","Words.capitalize","Words.arrayToPhrase","Words.uncapitalize","newDeity","name","species","gender","ageCategory","realm","domains","deity","DeityGenerator","config","possibleHolyItems","possibleHolySymbols","characterDetails","Characters.generate","deityName","Deities.newDeity","chanceOfRealmTrait","RND.simple","physicalTraits","appearanceTraits","realmTrait","describePersonality","traits","DeityGeneratorConfig","charGenConfig","PremadeConfigs.getFantasy","genSet","MUN.getSetByName","MUN.fantasyRaceSets","DomainGenerator","domainSet","RND.shuffle","primary","d","DomainGeneratorConfig","Domains.allDomains","Pantheon","PantheonMember","PantheonGenerator","pantheon","deityGenConfig","numberOfDeities","random","domainSets","randomDomainSets","member","relationshipGenerator","numberOfRelationships","j","alreadyExists","k","outward","inward","relationships","x","getRelationshipPhrase","relationshipDescription","relationship","targetName","numberOfSets","domainGenConfig","domainGen","sets","allDomains","PantheonGeneratorConfig","MUN.cultureSets","byAnyTag","tags","results","allTraits","byRealmConcept","concept","AppearanceTraits.byAnyTag","RealmConcept","nameOptions","appearanceTags","personalityTags","descriptionOptions","realmConcepts","newRealm","personalityTraits","RealmGenerator","realms","numberOfRealms","allConcepts","RealmConcepts.realmConcepts","realmName","AppearanceTraits.byRealmConcept","Realms.newRealm","RealmGeneratorConfig","Religion","ReligionGenerator","realmGenConfig","category","religion","pantheonGenConfig","leaderTitle","randomGatheringTimes","randomGatheringPlace","follower","place","service","leader","ReligionCategory","Monotheism","Polytheism","Shamanism","all","byName","categories","ReligionGeneratorConfig","Categories.all"],"mappings":"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"}