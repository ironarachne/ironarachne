{"version":3,"file":"star-svg.4c2e200b.js","sources":["../../../../../../node_modules/@ironarachne/made-up-names/dist/stars.js","../../../../../../src/lib/stars/star.ts","../../../../../../src/lib/starsystem/starsystem.ts","../../../../../../src/lib/stars/classification.ts","../../../../../../src/lib/stars/classifications.ts","../../../../../../src/lib/stars/generatorconfig.ts","../../../../../../src/lib/stars/generator.ts","../../../../../../src/lib/starsystem/generatorconfig.ts","../../../../../../src/lib/starsystem/generator.ts","../../../../../../src/lib/renderers/starfields/starfield-svg.ts","../../../../../../src/lib/renderers/planets/planet-svg.ts","../../../../../../src/lib/renderers/stars/star-svg.ts"],"sourcesContent":["\"use strict\";\nimport * as Invented from \"./invented.js\";\nexport function generate() {\n    const patterns = [\n        \"pvn\",\n        \"pvnvn\",\n        \"pvnvv\",\n        \"slvnvn\",\n        \"lvfv\",\n        \"lvfvn\",\n        \"tvtv\",\n        \"pvtv+n\",\n        \"pvtv+\",\n        \"pv+c+v\",\n        \"tv+c+v\",\n        \"slv+c+vv\",\n        \"pvnvlv\",\n        \"pvnvlvnv\",\n        \"svnvlvnv\",\n        \"pv+llvlv\",\n        \"pvpvpv+n\",\n        \"slv+c+v+n\",\n        \"slvc+vn\",\n        \"slvc+vnv\",\n        \"slvpvpv\",\n        \"slvpv+pv\",\n    ];\n    return Invented.generate(patterns);\n}\n","export default class Star {\n  name: string;\n  color: string;\n  description: string;\n  classification: string;\n  radius: number; // in km\n  mass: number; // in 10^30 kg\n  temperature: number; // in K\n  luminosity: number; // in 10^26 W\n\n  constructor() {\n    this.name = \"\";\n    this.color = \"\";\n    this.description = \"\";\n    this.classification = \"\";\n    this.radius = 0;\n    this.mass = 0;\n    this.temperature = 0;\n    this.luminosity = 0;\n  }\n\n  getColorFromTemperature() {\n    if (this.temperature < 3700) {\n      return \"red\";\n    } else if (this.temperature < 5200) {\n      return \"orange\";\n    } else if (this.temperature < 6000) {\n      return \"yellow\";\n    } else if (this.temperature < 7500) {\n      return \"yellow-white\";\n    } else if (this.temperature < 10000) {\n      return \"white\";\n    } else if (this.temperature < 30000) {\n      return \"blue-white\";\n    }\n\n    return \"blue\";\n  }\n}\n","import Planet from \"../planets/planet.js\";\nimport Star from \"../stars/star.js\";\n\nexport default class StarSystem {\n  name: string;\n  description: string;\n  stars: Star[];\n  planets: Planet[];\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.stars = [];\n    this.planets = [];\n  }\n}\n","export default class StarClassification {\n  name: string;\n  radius_min: number; // relative to the sun\n  radius_max: number; // relative to the sun\n  mass_min: number; // relative to the sun\n  mass_max: number; // relative to the sun\n  temperature_min: number; // in K\n  temperature_max: number; // in K\n  luminosity_min: number; // relative to the sun\n  luminosity_max: number; // relative to the sun\n  commonality: number; // commonality in the universe\n\n  constructor(\n    name: string,\n    radius_min: number,\n    radius_max: number,\n    mass_min: number,\n    mass_max: number,\n    temperature_min: number,\n    temperature_max: number,\n    luminosity_min: number,\n    luminosity_max: number,\n    commonality: number,\n  ) {\n    this.name = name;\n    this.radius_min = radius_min;\n    this.radius_max = radius_max;\n    this.mass_min = mass_min;\n    this.mass_max = mass_max;\n    this.temperature_min = temperature_min;\n    this.temperature_max = temperature_max;\n    this.luminosity_min = luminosity_min;\n    this.luminosity_max = luminosity_max;\n    this.commonality = commonality;\n  }\n}\n","import StarClassification from \"./classification.js\";\n\nexport function all() {\n  return [\n    new StarClassification(\"main sequence\", 0.1, 0.5, 0.1, 0.5, 2000, 4000, 0.01, 0.05, 40),\n    new StarClassification(\"main sequence\", 0.6, 0.9, 0.6, 0.8, 4000, 5000, 0.1, 0.8, 45),\n    new StarClassification(\"main sequence\", 0.9, 1.1, 0.8, 1.3, 5000, 6000, 0.8, 3.0, 60),\n    new StarClassification(\"main sequence\", 1.1, 1.5, 1.3, 1.8, 6000, 8000, 3.0, 8.0, 30),\n    new StarClassification(\"main sequence\", 1.5, 4.0, 1.8, 5.0, 8000, 15000, 15.0, 25.0, 10),\n    new StarClassification(\"main sequence\", 4.0, 6.0, 8.0, 12.0, 15000, 25000, 900.0, 1100.0, 5),\n    new StarClassification(\n      \"main sequence\",\n      8.0,\n      12.0,\n      45.0,\n      55.0,\n      35000,\n      45000,\n      90000.0,\n      110000.0,\n      1,\n    ),\n    new StarClassification(\"giant\", 10.0, 50.0, 1.0, 5.0, 3000, 10000, 50.0, 1000.0, 2),\n    new StarClassification(\n      \"supergiant\",\n      30.0,\n      500.0,\n      10.0,\n      70.0,\n      4000,\n      40000,\n      30000.0,\n      1000000.0,\n      1,\n    ),\n  ];\n}\n","import StarClassification from \"./classification.js\";\nimport * as Classifications from \"./classifications.js\";\n\nexport default class StarGeneratorConfig {\n  possibleClassifications: StarClassification[];\n\n  constructor() {\n    this.possibleClassifications = Classifications.all();\n  }\n}\n","import * as MUN from \"@ironarachne/made-up-names\";\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport StarGeneratorConfig from \"./generatorconfig.js\";\n\nimport random from \"random\";\nimport Star from \"./star.js\";\n\nexport default class StarGenerator {\n  config: StarGeneratorConfig;\n\n  constructor(config: StarGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate() {\n    const classification = RND.weighted(this.config.possibleClassifications);\n\n    const star = new Star();\n\n    star.classification = classification.name;\n    star.radius = random.float(classification.radius_min, classification.radius_max) * 695508;\n    star.mass = random.float(classification.mass_min, classification.mass_max) * 1.989;\n    star.temperature = random.int(classification.temperature_min, classification.temperature_max);\n    star.luminosity = random.float(classification.luminosity_min, classification.luminosity_max) * 3.828;\n    star.color = star.getColorFromTemperature();\n\n    const article = Words.article(star.color);\n    star.description = `This is ${article} ${star.color} ${star.classification} star.`;\n    star.name = MUN.star();\n\n    return star;\n  }\n}\n","export default class StarSystemGeneratorConfig {\n  minPlanets: number;\n  maxPlanets: number;\n\n  constructor() {\n    this.minPlanets = 3;\n    this.maxPlanets = 12;\n  }\n}\n","import * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport PlanetGenerator from \"../planets/generator.js\";\nimport PlanetGeneratorConfig from \"../planets/generatorconfig.js\";\nimport StarGenerator from \"../stars/generator.js\";\nimport StarGeneratorConfig from \"../stars/generatorconfig.js\";\nimport StarSystemGeneratorConfig from \"./generatorconfig.js\";\nimport StarSystem from \"./starsystem.js\";\n\nexport default class StarSystemGenerator {\n  config: StarSystemGeneratorConfig;\n\n  constructor(config: StarSystemGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate() {\n    let starsystem = new StarSystem();\n\n    let starGenConfig = new StarGeneratorConfig();\n    let starGen = new StarGenerator(starGenConfig);\n\n    const star = starGen.generate();\n\n    starsystem.name = star.name;\n\n    starsystem.stars.push(star);\n\n    // TODO: binary and trinary systems\n\n    const numberOfPlanets = random.int(this.config.minPlanets, this.config.maxPlanets);\n\n    let planetGenConfig = new PlanetGeneratorConfig();\n    let planetGenerator = new PlanetGenerator(planetGenConfig);\n\n    for (let i = 0; i < numberOfPlanets; i++) {\n      const planet = planetGenerator.generate();\n      starsystem.planets.push(planet);\n    }\n\n    starsystem.planets.sort(function(x, y) {\n      if (x.distance_from_sun < y.distance_from_sun) {\n        return -1;\n      }\n      if (x.distance_from_sun > y.distance_from_sun) {\n        return 1;\n      }\n      return 0;\n    });\n\n    for (let i = 0; i < starsystem.planets.length; i++) {\n      if (!starsystem.planets[i].is_inhabited) {\n        starsystem.planets[i].name = starsystem.name + \" \" + Words.romanize(i + 1);\n      }\n    }\n\n    starsystem.description = `The ${starsystem.name} system has ${numberOfPlanets} planets`;\n\n    const asteroidBeltChance = random.int(1, 100);\n\n    if (asteroidBeltChance > 70) {\n      starsystem.description += \" and an asteroid belt.\";\n    } else {\n      starsystem.description += \".\";\n    }\n\n    return starsystem;\n  }\n}\n","import random from \"random\";\n\nexport default class SVGStarfieldRenderer {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  render(): string {\n    let svg = \"<svg width=\\\"\"\n      + this.width\n      + \"\\\" height=\\\"\"\n      + this.height\n      + \"\\\" viewBox=\\\"0 0 \"\n      + this.width\n      + \" \"\n      + this.height\n      + \"\\\">\";\n\n    svg += \"<rect width=\\\"\" + this.width + \"\\\" height=\\\"\" + this.height + \"\\\" fill=\\\"black\\\" />\";\n\n    const numberOfStars = Math.floor(this.width * this.height * 0.005);\n\n    for (let i = 0; i < numberOfStars; i++) {\n      const x = random.int(0, this.width);\n      const y = random.int(0, this.height);\n\n      svg += \"<rect x=\\\"\"\n        + x\n        + \"\\\" y=\\\"\"\n        + y\n        + \"\\\" width=\\\"1\\\" height=\\\"1\\\" fill=\\\"\"\n        + randomStarColor()\n        + \"\\\" />\";\n    }\n\n    svg += \"</svg>\";\n\n    return svg;\n  }\n}\n\nfunction randomStarColor() {\n  const colorBase = random.int(80, 180);\n\n  let r = colorBase;\n  let g = colorBase;\n  let b = colorBase;\n\n  let tweaked = false;\n\n  const tweakBlueChance = random.int(1, 100);\n  if (tweakBlueChance > 70 && tweaked === false) {\n    b += random.int(10, 20);\n    tweaked = true;\n  }\n\n  const tweakRedChance = random.int(1, 100);\n  if (tweakRedChance > 70 && tweaked == false) {\n    r += random.int(10, 20);\n    tweaked = true;\n  }\n\n  const tweakGreenChance = random.int(1, 100);\n  if (tweakGreenChance > 70 && tweaked == false) {\n    g += random.int(10, 20);\n    tweaked = true;\n  }\n\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n}\n","import * as RND from \"@ironarachne/rng\";\nimport Planet from \"../../planets/planet.js\";\nimport SVGStarfieldRenderer from \"../starfields/starfield-svg.js\";\n\nimport random from \"random\";\n\nexport default class SVGPlanetRenderer {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.height = height;\n    this.width = width;\n  }\n\n  render(planet: Planet): string {\n    const textureRenderer = getPlanetRenderer(planet.classification.name);\n    const texture = textureRenderer.renderSVG();\n\n    let sizeClass = \"medium\";\n\n    if (planet.diameter < 8000) {\n      sizeClass = \"small\";\n    } else if (planet.diameter > 19000) {\n      sizeClass = \"large\";\n    }\n\n    const midX = Math.floor(this.width / 2);\n    const midY = Math.floor(this.height / 2);\n\n    const planetId = random.int(0, 1000);\n\n    const min = Math.min(this.width, this.height);\n\n    let radius = 0.0;\n    const planetDiameterModifier = (planet.diameter - planet.classification.diameter_min)\n      / (planet.classification.diameter_max - planet.classification.diameter_min);\n    let rangeMin = 0.8;\n    let rangeMax = 0.9;\n\n    if (sizeClass === \"small\") {\n      rangeMin = 0.2;\n      rangeMax = 0.4;\n    } else if (sizeClass === \"medium\") {\n      rangeMin = 0.5;\n      rangeMax = 0.7;\n    }\n\n    let size = (rangeMax - rangeMin) * planetDiameterModifier + rangeMin;\n    radius = (Math.floor(min) * size) / 2;\n\n    const atmosphereRadius = Math.floor(radius * 1.1);\n\n    let starfieldRenderer = new SVGStarfieldRenderer(this.width, this.height);\n    const background = starfieldRenderer.render();\n\n    let svg = \"<svg width=\\\"\"\n      + this.width\n      + \"\\\" height=\\\"\"\n      + this.height\n      + \"\\\" viewBox=\\\"0 0 \"\n      + this.width\n      + \" \"\n      + this.height\n      + \"\\\">\";\n\n    svg += \"<defs>\";\n\n    svg += \"<radialGradient id=\\\"atmosphere-\"\n      + planetId\n      + \"\\\"><stop offset=\\\"95%\\\" stop-color=\\\"\"\n      + textureRenderer.atmosphereColor\n      + \"\\\" stop-opacity=\\\"0.8\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(255,255,255)\\\" stop-opacity=\\\"0\\\" /></radialGradient>\";\n\n    svg +=\n      \"<radialGradient id=\\\"planetShadow\\\" cx=\\\"0.5\\\" cy=\\\"0.5\\\" r=\\\"0.75\\\" fx=\\\"0.275\\\" fy=\\\"0.275\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(0,0,0)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"80%\\\" stop-color=\\\"rgb(0,0,70)\\\" stop-opacity=\\\"0.8\\\" /><stop offset=\\\"90%\\\" stop-color=\\\"rgb(0,0,0)\\\" stop-opacity=\\\"0.8\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(0,00,40)\\\" stop-opacity=\\\"0.6\\\" /></radialGradient>\";\n\n    svg += \"<pattern id=\\\"planetTexture-\"\n      + planetId\n      + \"\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"1\\\" height=\\\"1\\\">\"\n      + texture\n      + \"</pattern>\";\n\n    svg += \"</defs>\";\n\n    svg += background;\n\n    if (planet.has_atmosphere) {\n      svg += \"<circle cx=\\\"\"\n        + midX\n        + \"\\\" cy=\\\"\"\n        + midY\n        + \"\\\" r=\\\"\"\n        + atmosphereRadius\n        + \"\\\" fill=\\\"url(#atmosphere-\"\n        + planetId\n        + \")\\\" />\";\n    }\n\n    svg += \"<circle cx=\\\"\"\n      + midX\n      + \"\\\" cy=\\\"\"\n      + midY\n      + \"\\\" r=\\\"\"\n      + radius\n      + \"\\\" fill=\\\"url(#planetTexture-\"\n      + planetId\n      + \")\\\" />\";\n\n    svg += \"<circle cx=\\\"\" + midX + \"\\\" cy=\\\"\" + midY + \"\\\" r=\\\"\" + radius + \"\\\" fill=\\\"url(#planetShadow)\\\" />\";\n\n    return svg;\n  }\n}\n\nfunction getPlanetRenderer(planetType: string) {\n  const planetTypes = [\n    {\n      name: \"barren\",\n      hasAtmosphere: false,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n        svg += \"<radialGradient id=\\\"craterTrough\"\n          + hash\n          + \"\\\" cx=\\\"0.6\\\" cy=\\\"0.6\\\" fx=\\\"0.4\\\" fy=\\\"0.4\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(170,170,170)\\\" /><stop offset=\\\"5%\\\" stop-color=\\\"rgb(150,150,150)\\\" /><stop offset=\\\"95%\\\" stop-color=\\\"rgb(150,150,150)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(110,110,110)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"barrenTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(150,150,150)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(110, 170);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + amount\n            + \", \"\n            + amount\n            + \", \"\n            + amount\n            + \")\\\" filter=\\\"url(#barrenTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfCraters = random.int(55, 80);\n\n        for (let i = 0; i < numberOfCraters; i++) {\n          const x = random.int(20, 200);\n          const y = random.int(20, 200);\n          const r = random.int(3, 8);\n          const crater = \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#craterTrough\"\n            + hash\n            + \")\\\" />\";\n          svg += crater;\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"arid\",\n      hasAtmosphere: true,\n      atmosphereColor: \"rgb(170,224,211)\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n        svg += \"<radialGradient id=\\\"aridCrater\"\n          + hash\n          + \"\\\" cx=\\\"0.6\\\" cy=\\\"0.6\\\" fx=\\\"0.4\\\" fy=\\\"0.4\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(237,220,151)\\\" /><stop offset=\\\"5%\\\" stop-color=\\\"rgb(227,210,141)\\\" /><stop offset=\\\"95%\\\" stop-color=\\\"rgb(217,200,131)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(197,190,121)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"aridTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(227,210,141)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (227 + amount)\n            + \", \"\n            + (210 + amount)\n            + \", \"\n            + (141 + amount)\n            + \")\\\" filter=\\\"url(#aridTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfCraters = random.int(25, 30);\n\n        for (let i = 0; i < numberOfCraters; i++) {\n          const x = random.int(20, 200);\n          const y = random.int(20, 200);\n          const r = random.int(3, 8);\n          const crater = \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#aridCrater\"\n            + hash\n            + \")\\\" />\";\n          svg += crater;\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"garden\",\n      hasAtmosphere: true,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<radialGradient id=\\\"gardenContinentGradient\"\n          + hash\n          + \"\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(130,181,91)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(120,153,55)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"gardenTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"<filter id=\\\"cloudTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.45\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\" /><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"30\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /><feGaussianBlur stdDeviation=\\\"0.2\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(36,27,161)\\\" />\";\n\n        const numberOfContinents = random.int(7, 18);\n\n        for (let i = 0; i < numberOfContinents; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(5, 30);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#gardenContinentGradient\"\n            + hash\n            + \")\\\" filter=\\\"url(#gardenTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfClouds = random.int(20, 30);\n\n        for (let i = 0; i < numberOfClouds; i++) {\n          const x = random.int(15, 100);\n          const y = random.int(15, 100);\n          const rx = random.int(5, 13);\n          const ry = random.int(5, 9);\n\n          svg += \"<ellipse cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" rx=\\\"\"\n            + rx\n            + \"\\\" ry=\\\"\"\n            + ry\n            + \"\\\" fill=\\\"white\\\" filter=\\\"url(#cloudTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"jungle\",\n      hasAtmosphere: true,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<linearGradient id=\\\"jungleLakeGradient\"\n          + hash\n          + \"\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(17,109,128)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(7,99,118)\\\" /></linearGradient>\";\n\n        svg += \"<filter id=\\\"jungleTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"<filter id=\\\"cloudTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.2\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\" /><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"30\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /><feGaussianBlur stdDeviation=\\\"0.1\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(8,94,40)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (10 + amount)\n            + \", \"\n            + (96 + amount)\n            + \", \"\n            + (42 + amount)\n            + \")\\\" filter=\\\"url(#jungleTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfOceans = random.int(4, 7);\n\n        for (let i = 0; i < numberOfOceans; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(5, 10);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#jungleLakeGradient\"\n            + hash\n            + \")\\\" filter=\\\"url(#jungleTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfClouds = random.int(40, 60);\n\n        for (let i = 0; i < numberOfClouds; i++) {\n          const x = random.int(15, 100);\n          const y = random.int(15, 100);\n          const rx = random.int(5, 9);\n          const ry = random.int(5, 9);\n\n          svg += \"<ellipse cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" rx=\\\"\"\n            + rx\n            + \"\\\" ry=\\\"\"\n            + ry\n            + \"\\\" fill=\\\"white\\\" filter=\\\"url(#cloudTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"swamp\",\n      hasAtmosphere: true,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<linearGradient id=\\\"swampLakeGradient\"\n          + hash\n          + \"\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(17,109,128)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(7,99,118)\\\" /></linearGradient>\";\n\n        svg += \"<filter id=\\\"swampTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"<filter id=\\\"cloudTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.2\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\" /><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"30\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /><feGaussianBlur stdDeviation=\\\"0.1\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(8,94,40)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (10 + amount)\n            + \", \"\n            + (96 + amount)\n            + \", \"\n            + (42 + amount)\n            + \")\\\" filter=\\\"url(#swampTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfOceans = random.int(4, 7);\n\n        for (let i = 0; i < numberOfOceans; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(5, 10);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#swampLakeGradient\"\n            + hash\n            + \")\\\" filter=\\\"url(#swampTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfClouds = random.int(40, 60);\n\n        for (let i = 0; i < numberOfClouds; i++) {\n          const x = random.int(15, 100);\n          const y = random.int(15, 100);\n          const rx = random.int(5, 9);\n          const ry = random.int(5, 9);\n\n          svg += \"<ellipse cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" rx=\\\"\"\n            + rx\n            + \"\\\" ry=\\\"\"\n            + ry\n            + \"\\\" fill=\\\"white\\\" filter=\\\"url(#cloudTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"volcanic\",\n      hasAtmosphere: true,\n      atmosphereColor: \"rgb(224,153,47)\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n        svg += \"<radialGradient id=\\\"volcanicCrater\"\n          + hash\n          + \"\\\" cx=\\\"0.6\\\" cy=\\\"0.6\\\" fx=\\\"0.4\\\" fy=\\\"0.4\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(67,50,45)\\\" /><stop offset=\\\"5%\\\" stop-color=\\\"rgb(57,40,35)\\\" /><stop offset=\\\"95%\\\" stop-color=\\\"rgb(47,30,25)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(37,20,15)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"volcanicTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(57,40,35)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (57 + amount)\n            + \", \"\n            + (40 + amount)\n            + \", \"\n            + (35 + amount)\n            + \")\\\" filter=\\\"url(#volcanicTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfLavaLakes = random.int(26, 30);\n\n        for (let i = 0; i < numberOfLavaLakes; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(1, 4);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (235 + amount)\n            + \", \"\n            + (132 + amount)\n            + \", \"\n            + (5 + amount)\n            + \")\\\" filter=\\\"url(#volcanicTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"gas giant\",\n      hasAtmosphere: false,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<filter id=\\\"bandFilter\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n\n        const numberOfBands = random.int(10, 16);\n\n        let remainingHeight = 256;\n\n        const baseR = random.int(60, 255);\n        const baseG = random.int(60, 255);\n        const baseB = random.int(60, 255);\n\n        const baseColor = \"rgb(\" + baseR + \",\" + baseG + \",\" + baseB + \")\";\n\n        let bandsSVG = \"\";\n\n        for (let i = 0; i < numberOfBands; i++) {\n          const bandOffset = random.int(0, 5);\n          const bandHeight = random.int(3, 15);\n\n          const y = 256 - remainingHeight + bandHeight + bandOffset;\n\n          const r = baseR + random.int(-30, 30);\n          const g = baseG + random.int(-30, 30);\n          const b = baseB + random.int(-30, 30);\n\n          const bandSVG = \"<rect x=\\\"0\\\" y=\\\"\"\n            + y\n            + \"\\\" width=\\\"256\\\" height=\\\"\"\n            + bandHeight\n            + \"\\\" fill=\\\"rgb(\"\n            + r\n            + \", \"\n            + g\n            + \", \"\n            + b\n            + \")\\\" filter=\\\"url(#bandFilter\"\n            + hash\n            + \")\\\" />\";\n\n          bandsSVG += bandSVG;\n\n          remainingHeight -= bandHeight - bandOffset;\n        }\n\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"\" + baseColor + \"\\\" />\";\n\n        svg += bandsSVG;\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"toxic\",\n      hasAtmosphere: true,\n      atmosphereColor: \"rgb(171,224,45)\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<linearGradient id=\\\"toxicLakeGradient\"\n          + hash\n          + \"\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(152,222,52)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(172,232,67)\\\" /></linearGradient>\";\n\n        svg += \"<filter id=\\\"toxicTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(168,155,39)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(-10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (168 + amount)\n            + \", \"\n            + (155 + amount)\n            + \", \"\n            + (39 + amount)\n            + \")\\\" filter=\\\"url(#toxicTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        const numberOfToxicOceans = random.int(4, 7);\n\n        for (let i = 0; i < numberOfToxicOceans; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"url(#toxicLakeGradient\"\n            + hash\n            + \")\\\" filter=\\\"url(#toxicTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"ice\",\n      hasAtmosphere: true,\n      atmosphereColor: \"rgb(125,229,255)\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n        svg += \"<radialGradient id=\\\"iceCrater\"\n          + hash\n          + \"\\\" cx=\\\"0.6\\\" cy=\\\"0.6\\\" fx=\\\"0.4\\\" fy=\\\"0.4\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(234,255,255)\\\" /><stop offset=\\\"5%\\\" stop-color=\\\"rgb(224,250,255)\\\" /><stop offset=\\\"95%\\\" stop-color=\\\"rgb(214,240,245)\\\" stop-opacity=\\\"0\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(204,230,235)\\\" /></radialGradient>\";\n\n        svg += \"<filter id=\\\"iceTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\"/><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /></filter>\";\n\n        svg += \"</defs>\";\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"rgb(224,250,255)\\\" />\";\n\n        const numberOfSplotches = random.int(6, 14);\n\n        for (let i = 0; i < numberOfSplotches; i++) {\n          const x = random.int(1, 90);\n          const y = random.int(1, 90);\n          const r = random.int(10, 20);\n          const amount = random.int(0, 20);\n\n          svg += \"<circle cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" r=\\\"\"\n            + r\n            + \"\\\" fill=\\\"rgb(\"\n            + (210 + amount)\n            + \", \"\n            + (230 + amount)\n            + \", \"\n            + (235 + amount)\n            + \")\\\" filter=\\\"url(#iceTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        svg += \"</svg>\";\n\n        return svg;\n      },\n    },\n    {\n      name: \"ocean\",\n      hasAtmosphere: true,\n      atmosphereColor: \"blue\",\n      renderSVG: function() {\n        const hash = RND.randomString(4);\n        let svg = \"<svg x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\">\";\n\n        svg += \"<defs>\";\n\n        svg += \"<radialGradient id=\\\"oceanGradient\"\n          + hash\n          + \"\\\" cx=\\\"0.5\\\" cy=\\\"0.5\\\"><stop offset=\\\"0%\\\" stop-color=\\\"rgb(45,14,201)\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(95,117,227)\\\" />\";\n\n        svg += \"<filter id=\\\"cloudTexture\"\n          + hash\n          + \"\\\"><feTurbulence type=\\\"turbulence\\\" baseFrequency=\\\"0.2\\\" numOctaves=\\\"2\\\" result=\\\"turbulence\\\" /><feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"30\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" /><feGaussianBlur stdDeviation=\\\"0.1\\\" /></filter>\";\n\n        svg += \"</defs>\";\n\n        svg += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"256\\\" height=\\\"256\\\" fill=\\\"url(#oceanGradient\" + hash + \")\\\" />\";\n\n        svg += \"</svg>\";\n\n        const numberOfClouds = random.int(20, 30);\n\n        for (let i = 0; i < numberOfClouds; i++) {\n          const x = random.int(15, 100);\n          const y = random.int(15, 100);\n          const rx = random.int(5, 9);\n          const ry = random.int(5, 9);\n\n          svg += \"<ellipse cx=\\\"\"\n            + x\n            + \"\\\" cy=\\\"\"\n            + y\n            + \"\\\" rx=\\\"\"\n            + rx\n            + \"\\\" ry=\\\"\"\n            + ry\n            + \"\\\" fill=\\\"white\\\" filter=\\\"url(#cloudTexture\"\n            + hash\n            + \")\\\" />\";\n        }\n\n        return svg;\n      },\n    },\n  ];\n\n  for (let i = 0; i < planetTypes.length; i++) {\n    if (planetTypes[i].name == planetType) {\n      return planetTypes[i];\n    }\n  }\n\n  return planetTypes[0];\n}\n","import random from \"random\";\nimport Star from \"../../stars/star.js\";\nimport SVGStarfieldRenderer from \"../starfields/starfield-svg.js\";\n\nexport default class SVGStarRenderer {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  render(star: Star): string {\n    let starColor = \"\";\n\n    if (star.color == \"red\") {\n      starColor = \"rgb(255,43,10)\";\n    } else if (star.color == \"orange\") {\n      starColor = \"rgb(255,146,20)\";\n    } else if (star.color == \"yellow\") {\n      starColor = \"rgb(255,223,18)\";\n    } else if (star.color == \"yellow-white\") {\n      starColor = \"rgb(251, 255, 168)\";\n    } else if (star.color == \"white\") {\n      starColor = \"rgb(255,255,255)\";\n    } else if (star.color == \"blue-white\") {\n      starColor = \"rgb(198, 243, 247)\";\n    } else if (star.color == \"blue\") {\n      starColor = \"rgb(59,118,255)\";\n    }\n\n    const midX = Math.floor(this.width / 2);\n    const midY = Math.floor(this.height / 2);\n\n    const min = Math.min(this.width, this.height);\n    let radius = (Math.floor(min) * random.float(0.2, 0.4)) / 2;\n\n    if (star.classification == \"main sequence\") {\n      radius = (Math.floor(min) * random.float(0.6, 0.7)) / 2;\n    } else if (star.classification == \"giant\") {\n      radius = (Math.floor(min) * random.float(0.8, 0.9)) / 2;\n    } else if (star.classification == \"supergiant\") {\n      radius = (Math.floor(min) * random.float(0.9, 1.1)) / 2;\n    }\n\n    const glowRadius = Math.floor(radius * 1.4);\n\n    let starfieldRenderer = new SVGStarfieldRenderer(this.width, this.height);\n    const background = starfieldRenderer.render();\n\n    let svg = \"<svg width=\\\"\"\n      + this.width\n      + \"\\\" height=\\\"\"\n      + this.height\n      + \"\\\" viewBox=\\\"0 0 \"\n      + this.width\n      + \" \"\n      + this.height\n      + \"\\\">\";\n\n    svg += \"<defs><radialGradient id=\\\"starglow\\\"><stop offset=\\\"60%\\\" stop-color=\\\"\"\n      + starColor\n      + \"\\\" stop-opacity=\\\"0.8\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"rgb(255,255,255)\\\" stop-opacity=\\\"0\\\" /></radialGradient></defs>\";\n\n    svg += \"<filter id=\\\"starSurface\\\">\";\n    svg += \"<feFlood x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" flood-color=\\\"\"\n      + starColor\n      + \"\\\" result=\\\"base\\\" />\";\n    svg += \"<feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.05\\\" numOctaves=\\\"2\\\" result=\\\"noise\\\" />\";\n    svg += \"<feBlend in2=\\\"base\\\" in=\\\"noise\\\" mode=\\\"multiply\\\" />\";\n    svg += \"</filter>\";\n\n    svg += `<mask id=\"starMask\"><circle cx=\"${midX}\" cy=\"${midY}\" r=\"${radius}\" fill=\"white\" /></mask>`;\n\n    svg += background;\n\n    svg += \"<circle cx=\\\"\" + midX + \"\\\" cy=\\\"\" + midY + \"\\\" r=\\\"\" + glowRadius + \"\\\" fill=\\\"url(#starglow)\\\" />\";\n\n    svg += \"<circle cx=\\\"\"\n      + midX\n      + \"\\\" cy=\\\"\"\n      + midY\n      + \"\\\" r=\\\"\"\n      + radius\n      + \"\\\" fill=\\\"\"\n      + starColor\n      + \"\\\" filter=\\\"url(#starSurface)\\\" mask=\\\"url(#starMask)\\\" />\";\n\n    svg += \"</svg>\";\n\n    return svg;\n  }\n}\n"],"names":["generate","Invented.generate","Star","__publicField","StarSystem","StarClassification","name","radius_min","radius_max","mass_min","mass_max","temperature_min","temperature_max","luminosity_min","luminosity_max","commonality","all","StarGeneratorConfig","Classifications.all","StarGenerator","config","classification","RND.weighted","star","random","article","Words.article","MUN.star","StarSystemGeneratorConfig","StarSystemGenerator","starsystem","starGenConfig","numberOfPlanets","planetGenConfig","PlanetGeneratorConfig","planetGenerator","PlanetGenerator","i","planet","x","y","Words.romanize","SVGStarfieldRenderer","width","height","svg","numberOfStars","randomStarColor","colorBase","r","g","b","tweaked","SVGPlanetRenderer","textureRenderer","getPlanetRenderer","texture","sizeClass","midX","midY","planetId","min","radius","planetDiameterModifier","rangeMin","rangeMax","size","atmosphereRadius","background","planetType","planetTypes","hash","RND.randomString","numberOfSplotches","amount","numberOfCraters","crater","numberOfContinents","numberOfClouds","rx","ry","numberOfOceans","numberOfLavaLakes","numberOfBands","remainingHeight","baseR","baseG","baseB","baseColor","bandsSVG","bandOffset","bandHeight","bandSVG","numberOfToxicOceans","SVGStarRenderer","starColor","glowRadius"],"mappings":"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","x_google_ignoreList":[0]}