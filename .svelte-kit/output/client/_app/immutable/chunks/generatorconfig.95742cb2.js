var P=Object.defineProperty;var j=(i,t,s)=>t in i?P(i,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):i[t]=s;var a=(i,t,s)=>(j(i,typeof t!="symbol"?t+"":t,s),s);import{i as h,a as $,s as b}from"./index.767550a9.js";import{b as O,c as u,a as w,u as C}from"./index.bff09739.js";import{r as y}from"./random.e4ec5faf.js";import"./index.5e3063a0.js";import{A}from"./agecategories.0d4c2ee4.js";import{H as k,C as q}from"./generatorconfig.a85b5b6e.js";import{D as H,a as E}from"./domains.e97120ff.js";import{g as J}from"./premadeconfigs.0dc13e07.js";import{H as v}from"./human.473dacc8.js";class M{constructor(t,s,r,n){a(this,"noun");a(this,"target");a(this,"verb");a(this,"strength");this.noun=t,this.verb=s,this.target=r,this.strength=n}}class F{constructor(t){a(this,"strength");this.strength=t}generate(){let t="",s="";return this.strength==-1?(t=h(["dislikes","distrusts","mistrusts","is annoyed by"]),s="enemy"):this.strength==-2?(t=h(["fears","hates","loathes","can't stand"]),s="enemy"):this.strength==0?(t=h(["is intrigued by","is ambivalent towards","is neutral towards","is suspicious of"]),s="acquaintance"):this.strength==1?(t=h(["likes","is amused by","enjoys the company of","enjoys","trusts"]),s="friend"):(t=h(["loves","deeply trusts","adores"]),s="friend"),new M(s,t,0,this.strength)}}class I{constructor(){a(this,"name");a(this,"subjectivePronoun");a(this,"objectivePronoun");a(this,"possessivePronoun");a(this,"maxAge");a(this,"ageCategories");this.name="",this.subjectivePronoun="",this.objectivePronoun="",this.possessivePronoun="",this.maxAge=-1,this.ageCategories=[]}}class T{constructor(){a(this,"primary");a(this,"secondaries");this.primary=new H,this.secondaries=[]}}class R{constructor(){a(this,"name");a(this,"description");a(this,"personalityTraits");a(this,"appearanceTraits");this.name="",this.description="",this.personalityTraits=[],this.appearanceTraits=[]}}class x{constructor(){a(this,"name");a(this,"species");a(this,"gender");a(this,"ageCategory");a(this,"domains");a(this,"titles");a(this,"realm");a(this,"description");a(this,"personalityTraits");a(this,"personality");a(this,"appearance");a(this,"holyItem");a(this,"holySymbol");a(this,"isAlive");this.name="",this.species=new k,this.gender=new I,this.ageCategory=new A,this.domains=new T,this.titles=[],this.realm=new R,this.description="",this.personality="",this.personalityTraits=[],this.appearance="",this.holyItem="",this.holySymbol="",this.isAlive=!0}describe(){const t=this.species.adjective,s=this.gender.subjectivePronoun;let r="god";const n=[];n.push(this.domains.primary.name);for(let l=0;l<this.domains.secondaries.length;l++)n.push(this.domains.secondaries[l].name);this.gender.name==="female"&&(r="goddess");let o=`${this.name} appears as ${O(t)} ${t} ${this.ageCategory.noun}.`;return o+=` ${u(s)} has ${this.appearance}. ${this.personality}.`,o+=` ${this.name} is the ${r} of ${w(n)}.`,o+=` ${u(s)} resides in ${C(this.realm.name)}.`,o}}function z(i,t,s,r,n,o){let l=new x;return l.name=i,l.species=t,l.gender=s,l.ageCategory=r,l.domains=o,l.realm=n,l}class L{constructor(t){a(this,"config");this.config=t}generate(){let t=[],s=[];const r=this.config.characterGenerator.generate();if(this.config.maleNameGenerator===null)throw new Error("male name generator not set");if(this.config.femaleNameGenerator===null)throw new Error("female name generator not set");let n=this.config.femaleNameGenerator.generate(1)[0];r.gender.name=="male"&&(n=this.config.maleNameGenerator.generate(1)[0]);let o=h(this.config.realms);if(o===void 0)throw new Error("realm is undefined");let l=z(n,r.species,r.gender,r.ageCategory,o,this.config.domainSet);t=this.config.domainSet.primary.holyItems,s=this.config.domainSet.primary.holySymbols,l.holyItem=h(t),l.holySymbol=h(s);const c=$(100),m=r.physicalTraits;let d=[];for(let f=0;f<m.length;f++)d.push(m[f].description);if(c>80){let f=h(l.realm.appearanceTraits);if(f===void 0)throw console.log(JSON.stringify(l.realm)),new Error("realm appearance trait is undefined");d.push(f.phrase)}return l.personalityTraits=r.personalityTraits,l.personality=W(l),l.appearance=w(d),l.description=l.describe(),l}}function W(i){let t=[];for(let s=0;s<i.personalityTraits.length;s++)t.push(i.personalityTraits[s].descriptor);return u(i.gender.subjectivePronoun)+" is "+w(t)}class V{constructor(){a(this,"domainSet");a(this,"realms");a(this,"characterGenerator");a(this,"femaleNameGenerator");a(this,"maleNameGenerator");let t=J();this.realms=[],this.domainSet=new T,this.characterGenerator=new q(t);let s=new v;this.femaleNameGenerator=s.female,this.maleNameGenerator=s.male}}class B{constructor(t){a(this,"config");this.config=t}generate(){let t=new T;if(this.config.domains=b(this.config.domains),this.config.domains.length<this.config.numberOfDomains)throw new Error("Not enough domains in domain generator config for the requested number of domains.");let s=this.config.domains.pop();if(s!==void 0)t.primary=s;else throw new Error("No primary domain found.");for(let r=0;r<this.config.numberOfDomains;r++){const n=this.config.domains.pop();if(n===void 0)throw new Error("No secondary domain found.");t.secondaries.push(n)}return t}}class _{constructor(){a(this,"numberOfDomains");a(this,"domains");this.numberOfDomains=1,this.domains=JSON.parse(JSON.stringify(E))}}class K{constructor(){a(this,"name");a(this,"description");a(this,"members");a(this,"leader");this.name="",this.description="",this.members=[],this.leader=-1}}class Q{constructor(){a(this,"deity");a(this,"relationships");this.deity=new x,this.relationships=[]}}class U{constructor(t){a(this,"config");this.config=t}generate(){let t=new K,s=new V;s.characterGenerator.config.speciesOptions=this.config.speciesOptions,s.realms=this.config.realms,s.femaleNameGenerator=this.config.femaleNameGenerator,s.maleNameGenerator=this.config.maleNameGenerator;const r=y.int(this.config.minDeities,this.config.maxDeities),n=Y(r);for(let c=0;c<n.length;c++){let m=new Q;s.domainSet=n[c];let f=new L(s).generate();m.deity=f,t.members.push(m)}let o=new F(0),l=y.int(1,3);for(let c=0;c<l;c++)for(let m=0;m<t.members.length;m++){o.strength=y.int(-2,2);const d=y.int(0,t.members.length-1);if(d!=m){let f=!1;for(let p=0;p<t.members[m].relationships.length;p++)t.members[m].relationships[p].target==d&&(f=!0);if(!f){let p=o.generate();p.target=d,t.members[m].relationships.push(p);let D=o.generate();D.target=m,t.members[d].relationships.push(D)}}}if(t.members.length>1)for(let c=0;c<t.members.length;c++){let m=[];for(let f=0;f<t.members[c].relationships.length;f++)m.push(X(t.members[c].relationships[f],t.members[t.members[c].relationships[f].target].deity.name));const d=" "+t.members[c].deity.name+" "+w(m)+".";t.members[c].deity.description+=d}return t}}function X(i,t){return h([`${i.verb} ${t}`])}function Y(i){let t=new _,s=new B(t),r=[],n=b(JSON.parse(JSON.stringify(t.domains)));for(let o=0;o<i;o++){let l=[];for(let m=0;m<s.config.numberOfDomains+1;m++)l.push(n.pop());s.config.domains=l;let c=s.generate();r.push(c)}return r}class Z{constructor(){a(this,"domains");a(this,"realms");a(this,"minDeities");a(this,"maxDeities");a(this,"speciesOptions");a(this,"femaleNameGenerator");a(this,"maleNameGenerator");this.domains=JSON.parse(JSON.stringify(E)),this.realms=[],this.speciesOptions=[new k],this.minDeities=1,this.maxDeities=16;let t=new v;if(t.female==null)throw new Error("no female name generator in set");if(t.male==null)throw new Error("no male name generator in set");this.femaleNameGenerator=t.female,this.maleNameGenerator=t.male}}class ee{constructor(){a(this,"phrase");a(this,"bodyPart");a(this,"tags");this.phrase="",this.bodyPart="",this.tags=[]}}function te(i,t){const s=[];for(let r=0;r<i.length;r++)for(let n=0;n<t.length;n++)i[r].tags.includes(t[n])&&s.push(i[r]);return s}function e(i,t,s){let r=new ee;return r.phrase=i,r.bodyPart=t,r.tags=s,r}const ae=[e("six feathered wings","wings",["sky"]),e("four feathered wings","wings",["sky"]),e("two large feathered wings","wings",["sky","dreamlike"]),e("large leathery wings","wings",["sky","death"]),e("a lion's tail'","tail",["earth","forest"]),e("a whip-like tail","tail",["earth","death"]),e("two tails","tail",["alien"]),e("the horns of a goat","horns",["earth","forest"]),e("the horns of a ram","horns",["earth","forest"]),e("the antlers of a stag","horns",["forest"]),e("the antlers of a deer","horns",["forest","surreal"]),e("short, pointed horns","horns",["earth","death"]),e("tall, straight horns","horns",["earth","death"]),e("glowing blue eyes","eyes",["water"]),e("glowing yellow eyes","eyes",["sky","water"]),e("glowing red eyes","eyes",["earth","death","alien"]),e("glowing orange eyes","eyes",["earth","sky"]),e("glowing green eyes","eyes",["earth","forest"]),e("glowing purple eyes","eyes",["death","alien"]),e("eyes that burn with an inner fire","eyes",["sky"]),e("four eyes","eyes",["alien"]),e("six eyes","eyes",["alien"]),e("eight eyes","eyes",["alien"]),e("no eyes","eyes",["death","alien"]),e("reptilian eyes","eyes",["forest","earth"]),e("scales instead of skin","skin",["earth","forest"]),e("skin that glows faintly","skin",["sky"]),e("skin made of living rock","skin",["earth"]),e("blue skin","skin",["water"]),e("green skin","skin",["water"]),e("crystalline skin","skin",["earth"]),e("translucent grey skin","skin",["death"]),e("dull grey skin","skin",["death"]),e("skin covered in leaves","skin",["forest"]),e("skin made of star-lit blackness","skin",["alien"]),e("iridescent skin","skin",["alien","surreal"]),e("eight tentacles","tentacles",["alien"]),e("six tentacles","tentacles",["alien"]),e("four tentacles","tentacles",["alien"]),e("the head of a lion","head",["forest"]),e("the head of a bear","head",["forest"]),e("the head of a dragon","head",["earth","forest"]),e("the head of a swan","head",["sky","water"]),e("the head of a deer","head",["forest"]),e("the head of a cat","head",["earth","desert"]),e("the head of a wolf","head",["earth","forest"]),e("twelve feathered wings","wings",["sky","dreamlike"]),e("bat-like wings","wings",["night","moon"]),e("insect-like wings","wings",["earth","forest"]),e("crystal-clear wings","wings",["sky","surreal"]),e("feathered wings that shimmer","wings",["sky","water"]),e("a serpent's tail","tail",["earth","water"]),e("a tail with a bioluminescent tip","tail",["water","surreal"]),e("three tails","tail",["surreal"]),e("twisted horns with glowing runes","horns",["magic","surreal"]),e("curved horns with gemstone inlays","horns",["earth","wealth"]),e("feathery antlers with ethereal wisps","horns",["forest","dreamlike"]),e("horns that emit a haunting melody","horns",["earth","music"]),e("pearlescent eyes that change colors","eyes",["sky","water"]),e("eyes with galaxies swirling within","eyes",["sky","cosmic"]),e("eyes that see into other dimensions","eyes",["surreal","alien"]),e("eyes with a mesmerizing hypnotic gaze","eyes",["magic","surreal"]),e("eyes that mirror the emotions of others","eyes",["empathy","surreal"]),e("eyes that emit sparks of lightning","eyes",["storm","electricity"]),e("eyes on flexible stalks","eyes",["alien","surreal"]),e("molten lava-like skin","skin",["volcano","fire"]),e("shimmering opalescent skin","skin",["sky","water"]),e("butterfly wings with shifting patterns","wings",["dream","surreal"]),e("floating ethereal wings of light","wings",["dream","surreal"]),e("wings made of iridescent mist","wings",["dream","surreal"]),e("feathers that change color with emotions","wings",["dream","empathy"]),e("a tail of shimmering stardust","tail",["dream","cosmic"]),e("tail that trails rainbows as you move","tail",["dream","surreal"]),e("a tail with glowing constellations","tail",["dream","cosmic"]),e("horns that emit soft, soothing melodies","horns",["dream","music"]),e("horns adorned with floating gemstones","horns",["dream","surreal"]),e("horns that sparkle like starlight","horns",["dream","cosmic"]),e("eyes that reflect the landscapes of dreams","eyes",["dream","surreal"]),e("eyes with ever-changing patterns of light","eyes",["dream","surreal"]),e("eyes that shimmer like enchanted pools","eyes",["dream","water"]),e("skin that shifts like flowing watercolors","skin",["dream","surreal"]),e("skin that glows softly with inner thoughts","skin",["dream","empathy"]),e("skin covered in delicate, luminescent vines","skin",["dream","forest"]),e("skin that shimmers like a mirage","skin",["dream","desert"]),e("skin that resembles the surface of a nebula","skin",["dream","cosmic"]),e("skin that changes texture with emotions","skin",["dream","empathy"]),e("a head crowned with floating ethereal flames","head",["dream","fire"]),e("a head with a halo of radiant energy","head",["dream","surreal"]),e("fiery wings with ember-like feathers","wings",["fire","heat"]),e("wings that resemble molten lava flows","wings",["fire","earth"]),e("smoldering wings that leave trails of sparks","wings",["fire","surreal"]),e("earthen wings with intricate rock formations","wings",["earth","mountain"]),e("wings made of intertwined vines and roots","wings",["earth","forest"]),e("crystalline wings that shimmer like gemstones","wings",["earth","jewel"]),e("a tail with a fiery, flickering tip","tail",["fire","surreal"]),e("tail adorned with rugged, earthy textures","tail",["earth","mountain"]),e("tail with geode-like patterns and colors","tail",["earth","jewel"]),e("horns that resemble twisting flames","horns",["fire","heat"]),e("horns made of sturdy, petrified wood","horns",["earth","forest"]),e("horns with patterns reminiscent of ancient runes","horns",["earth","magic"]),e("eyes that flicker like burning embers","eyes",["fire","heat"]),e("eyes with deep, earthy hues like rich soil","eyes",["earth","nature"]),e("eyes that reflect the molten core of the earth","eyes",["earth","cosmic"]),e("skin that glows with inner fire","skin",["fire","surreal"]),e("skin with a texture resembling cracked earth","skin",["earth","desert"]),e("skin covered in intricate, glowing tribal patterns","skin",["earth","magic"]),e("a head crowned with blazing, fiery tendrils","head",["fire","surreal"]),e("a head with rugged, stone-like features","head",["earth","mountain"]),e("a head adorned with gemstone-encrusted horns","head",["earth","jewel"])];function se(i){return te(ae,i.appearanceTags)}class g{constructor(t,s,r,n,o){a(this,"name");a(this,"nameOptions");a(this,"appearanceTags");a(this,"personalityTags");a(this,"descriptionOptions");this.name=t,this.nameOptions=s,this.appearanceTags=r,this.personalityTags=n,this.descriptionOptions=o}}const ie=[new g("sky",["The Eternal Heavens","The Heavens Above","Heaven","The Sky","The Heavens","The Celestial Realm","The Empyrean","The Firmament"],["sky","clouds","sun","moon","stars","rainbows","light"],["mercurial","caring","wise","flexible","majestic","powerful","graceful","serene"],["Far above the mortal world, {name} is a realm of light and splendor.","{name} is a realm of light and beauty, where celestial beings roam.","The skies of {name} are awash with vibrant colors and shimmering stars."]),new g("earth",["The Earth","The Mortal Realm","The Material Plane","The Mundane World","The Physical Plane","The Human World"],["earth","mountains","rivers","forests","deserts","oceans","caves","valleys"],["stable","stubborn","physical","grounded","tenacious","reliable","practical"],["{name} is where mortals reside, going about their daily lives.","{name} is the home of all mortal beings, full of bustling cities and quiet countryside."]),new g("forest",["The Forest","The Eternal Forest","The Divine Forest","The Sylvan Realm","The Verdant Wilds","The Green Domain"],["forest","trees","plants","animals","rivers","mountains"],["caring","stable","peaceful","graceful","majestic","wise","mystical"],["Hidden far from the mortal world, {name} is deep and mysterious, full of secrets and ancient magic.","{name} is an infinite forest of beauty and mystery, where the spirits of the wild roam free.","The forests of {name} are alive with the sound of birdsong and rustling leaves."]),new g("underworld",["The Underworld","The Afterlife","The Kingdom of Death","The Great Beyond","The Netherworld","The Land of the Dead"],["death","shadow","bones","ghosts","souls","void"],["angry","brooding","peaceful","wise","merciful","judgmental","powerful"],["{name} is where souls go to rest after death, guided by the spirits of the departed.","{name} is a realm of perpetual darkness where the dead rest forever, watched over by the reapers of the underworld.","The halls of {name} are filled with the whispers of the dead, their spirits forever lingering in the shadows."]),new g("ocean",["The Vast Sea","The Sea","The Endless Ocean","The Divine Sea","The Ever-Changing Tides","The Fathomless Depths","The Coral Kingdom","The Ocean of Storms"],["water","salt","waves","foam","currents","whirlpools","tides","depths"],["mercurial","aloof","cruel","flexible","violent","majestic","mysterious"],["{name} is a realm apart from mortal seas, full of life and infinitely deep.","The deep and restless waters of {name} hide many secrets.","Beneath the surface of {name} lies a kingdom of wonder and terror."]),new g("mountain",["The Great Mountain","The Mountain","The Divine Mountain","The Endless Peak","The Celestial Summit","The Sky-Splitting Colossus","The Stone Sentinel","The Cradle of the Gods"],["earth","rock","stone","ice","snow","summit","peak","valley"],["aloof","wise","physical","stable","majestic","immovable","mysterious"],["{name} is far larger than any mountain of the mortal world.","{name} is covered in lush forests and cascading waterfalls, a towering paradise.","Beneath the peaks and valleys of {name} lies a realm of fire and darkness."]),new g("void",["The Nameless Void","The Endless Void","The Void","The Dark Beyond","The Endless Dark","The Abyss","The Great Emptiness","The Eternal Nothingness"],["alien","darkness","emptiness","silence","cold","nothingness","absence"],["alien","clever","unknowable","silent","watchful","impenetrable"],["{name} is home to things unknowable and alien.","There are mysteries in {name} that no mortal can hope to perceive, let alone understand.","{name} is a realm of eternal darkness and emptiness, where the very fabric of reality is twisted and distorted."]),new g("dream",["The Realm of Dreams","The Dreamlands","The Land of Nod","The Ethereal Plane","The Realm of Imagination","The World of Sleep"],["ethereal","fantastical","dreamlike","otherworldly","surreal","shimmering"],["mysterious","whimsical","fickle","curious","enigmatic","playful"],["{name} is a place where the impossible becomes reality and where the line between dreams and waking life is blurred.","The ethereal beauty of {name} is home to creatures born of pure imagination and fantasy.","In {name}, the landscape constantly shifts and changes, shaped by the whims of the dreamers who call it home.","The dreamscape of {name} is a realm of infinite possibilities, where anything can happen and nothing is truly impossible.","{name} is a place where the innermost thoughts and desires of mortals manifest into reality, for better or for worse.","Those who journey into {name} often find themselves caught in a never-ending cycle of dreams and nightmares."])];function re(i,t,s,r){let n=new R;return n.name=i,n.description=t,n.personalityTraits=s,n.appearanceTraits=r,n}class ne{constructor(t){a(this,"config");this.config=t}generate(){const t=[],s=this.config.numberOfRealms;let r=JSON.parse(JSON.stringify(ie));r=b(r);for(let n=0;n<s;n++){const o=r.pop();if(typeof o=="object"){const l=h(o.nameOptions),c=se(o);if(c.length<1)throw new Error(`No appearance traits found for realm concept ${o.name}.`);let m=h(o.descriptionOptions).replace("{name}",C(l));m=u(m);const d=re(l,m,[],c);t.push(d)}}return t}}class oe{constructor(){a(this,"numberOfRealms");a(this,"requireDualistic");this.numberOfRealms=2,this.requireDualistic=!1}}class le{constructor(t){a(this,"name");a(this,"description");a(this,"realms");a(this,"pantheon");this.name=t,this.description="",this.realms=[],this.pantheon=null}}class Ge{constructor(t){a(this,"config");this.config=t}generate(){let t=new oe;const r=new ne(t).generate(),n=h(this.config.categories),o=new le(this.config.nameGenerator.generate(1)[0]);if(o.realms=r,n.hasDeities){let l=new Z;l.realms=r,l.speciesOptions=this.config.deitySpeciesOptions,l.minDeities=n.minDeities,l.maxDeities=n.maxDeities,l.femaleNameGenerator=this.config.femaleNameGenerator,l.maleNameGenerator=this.config.maleNameGenerator;let m=new U(l).generate();if(m.description=n.description,o.pantheon=m,n.hasLeader){o.pantheon.leader=y.int(0,o.pantheon.members.length-1);let d="Queen of the Gods";o.pantheon.members[o.pantheon.leader].deity.gender.name==="male"&&(d="King of the Gods"),o.pantheon.members[o.pantheon.leader].deity.titles.push(d),o.pantheon.description+=` ${o.pantheon.members[o.pantheon.leader].deity.name} is the ${d}.`}}return o.pantheon!==null?o.description=o.pantheon.description+" "+S()+" "+u(N())+".":o.description=n.description+" "+S()+" "+u(N())+".",o}}function N(){let i=h(["{follower} gather in {place} for {service}","{follower} congregate in {place} to be led in {service} by {leader}","{follower} meet in {place} to engage in {service} and hear from {leader}","At {place}, {follower} come together for {service} led by {leader}","Join {follower} at {place} for {service} and fellowship with {leader}","{follower} assemble in {place} to participate in {service} and share with {leader}","{follower} unite at {place} for {service} and to learn from {leader}","At {place}, {follower} come together to seek guidance and wisdom from {leader} through {service}"]);const t=h(["adherents","believers","disciples","devotees","faithful","followers","pilgrims","worshippers","zealots"]),s=h(["temples","churches","mosques","synagogues","chapels","shrines","sanctuaries","meeting halls","community centers","outdoor arenas"]),r=h(["silent meditation","guided meditation","chanting","prayer","sacrament","communion","worship","ritual dance","ritual music","structured recitation","spontaneous sharing","teachings and discussions","ritual sacrifice"]),n=h(["priest","priestess","minister","shaman","spiritual guide","community leader","wise elder","prophet","guru","ascended master","enlightened one","mystic","oracle"]);return i=i.replace("{follower}",t).replace("{place}",s).replace("{service}",r).replace("{leader}",O(n)+" "+n),i}function S(){let i=h(["Regular gatherings happen once a week.","Regular gatherings happen daily.","Regular gatherings happen once a month.","Weekly gatherings take place every {weekday}.","They come together every {weekday} for a time of {service}.","Their community meets {frequency} for {service} at {time}.","Their gatherings occur {frequency}, bringing {follower} together for {service}.","They gather {frequency} at {place} for {service} and {activity}.","Every {weekday} they gather for {service}, followed by {activity}.","Their gatherings happen {frequency} at {place} and feature {service}, {activity}, and food/drink.","People are invited to the {occasion} gathering, where they partake in {service} and {activity}."]);return i=i.replace("{weekday}",h(["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"])).replace("{frequency}",h(["weekly","bi-weekly","monthly","quarterly","annually"])).replace("{follower}",h(["worshipers","devotees","believers","faithful","followers","pilgrims"])).replace("{service}",h(["prayer","worship","meditation","reflection","ritual","sermon","teaching"])).replace("{time}",h(["sunrise","midday","sunset","evening","night"])).replace("{place}",h(["the temple","the church","the mosque","the synagogue","the chapel","the shrine","the sanctuary","the meeting hall"])).replace("{activity}",h(["fellowship","conversation","sharing","food and drink","community service","study"])).replace("{occasion}",h(["special","holiday","festive","solemn"])),i}class G{constructor(){a(this,"name");a(this,"description");a(this,"hasDeities");a(this,"hasLeader");a(this,"minDeities");a(this,"maxDeities");this.name="",this.description="",this.hasDeities=!1,this.hasLeader=!1,this.minDeities=0,this.maxDeities=0}}class he extends G{constructor(){super(),this.name="monotheism",this.description="This religion "+h(["has a single all-powerful god","is monotheistic"])+".",this.hasDeities=!0,this.minDeities=1,this.maxDeities=1}}class me extends G{constructor(){super(),this.name="polytheism",this.description="This religion "+h(["has several gods","is polytheistic"])+".",this.hasDeities=!0,this.hasLeader=!0,this.minDeities=2,this.maxDeities=16}}class ce extends G{constructor(){super(),this.name="shamanism",this.description="This religion is shamanistic."}}function de(){return[new he,new me,new ce]}function De(i,t){for(let s=0;s<t.length;s++)if(t[s].name===i)return t[s];throw new Error(`No religion category found with name ${i}.`)}class Ne{constructor(){a(this,"categories");a(this,"deitySpeciesOptions");a(this,"nameGenerator");a(this,"femaleNameGenerator");a(this,"maleNameGenerator");this.categories=de(),this.deitySpeciesOptions=[new k];let t=new v;if(t.family===null)throw new Error("No family name generator found.");if(t.female===null)throw new Error("No female name generator found");if(t.male===null)throw new Error("No male name generator found");this.nameGenerator=t.family,this.femaleNameGenerator=t.female,this.maleNameGenerator=t.male}}export{Ne as R,Ge as a,de as b,De as c};
//# sourceMappingURL=generatorconfig.95742cb2.js.map
