{"version":3,"file":"common.f02424f4.js","sources":["../../../../../../src/lib/species/modifiers/skeleton.ts","../../../../../../src/lib/species/modifiers/vampire.ts","../../../../../../src/lib/species/modifiers/zombie.ts","../../../../../../src/lib/species/common.ts"],"sourcesContent":["\"use strict\";\n\nimport type Species from \"../species.js\";\n\nexport function modify(species: Species): Species {\n  let result: Species = JSON.parse(JSON.stringify(species));\n\n  let modifierName = \"skeletal\";\n\n  result.name = `${modifierName} ${result.name}`;\n  result.pluralName = `${modifierName} ${result.pluralName}`;\n  result.adjective = `${modifierName} ${result.adjective}`;\n  result.abilities.push(\"unharmed by piercing damage\");\n  result.tags.push(\"skeleton\");\n  result.tags.push(\"undead\");\n  result.threatLevel += 1;\n\n  return result;\n}\n","\"use strict\";\n\nimport type Species from \"../species.js\";\n\nexport function modify(species: Species): Species {\n  let result: Species = JSON.parse(JSON.stringify(species));\n\n  let modifierName = \"vampire\";\n\n  result.name = `${modifierName} ${result.name}`;\n  result.pluralName = `${modifierName} ${result.pluralName}`;\n  result.adjective = `${modifierName} ${result.adjective}`;\n  result.abilities.push(\"drain blood to gain life\");\n  result.abilities.push(\"transform into a bat\");\n  result.abilities.push(\"transform into a wolf\");\n  result.abilities.push(\"transform into mist\");\n  result.abilities.push(\"see in the dark\");\n  result.abilities.push(\"can only be killed by a stake through the heart or by direct sunlight\");\n  result.tags.push(\"vampire\");\n  result.tags.push(\"undead\");\n  result.threatLevel += 5;\n\n  return result;\n}\n","\"use strict\";\n\nimport type Species from \"../species.js\";\n\nexport function modify(species: Species): Species {\n  let result: Species = JSON.parse(JSON.stringify(species));\n\n  let modifierName = \"zombie\";\n\n  result.name = `${modifierName} ${result.name}`;\n  result.pluralName = `${modifierName} ${result.pluralName}`;\n  result.adjective = `${modifierName} ${result.adjective}`;\n  result.abilities.push(\"can only be killed by removing the head\");\n\n  let newTags = [];\n\n  for (let i = 0; i < result.tags.length; i++) {\n    if (result.tags[i] != \"sentient\") {\n      newTags.push(result.tags[i]);\n    }\n  }\n\n  result.tags = newTags;\n\n  result.abilities.push(\"can bite others to transform them into zombies\");\n  result.tags.push(\"zombie\");\n  result.tags.push(\"undead\");\n  result.threatLevel += 1;\n\n  return result;\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Skeleton from \"./modifiers/skeleton.js\";\nimport * as Vampire from \"./modifiers/vampire.js\";\nimport * as Zombie from \"./modifiers/zombie.js\";\nimport type Species from \"./species.js\";\n\nexport function byAnyTag(tags: string[], options: Species[]): Species[] {\n  let result = [];\n\n  let unique = true;\n\n  for (let i = 0; i < options.length; i++) {\n    unique = true;\n    for (let j = 0; j < tags.length; j++) {\n      if (options[i].tags.includes(tags[j]) && unique) {\n        result.push(options[i]);\n        unique = false;\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function byEnvironment(environment: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].environments.includes(environment) || options[i].environments.length == 0) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function byName(name: string, options: Species[]): Species {\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].name == name) {\n      return options[i];\n    }\n  }\n\n  throw new Error(`No species found with name ${name}.`);\n}\n\nexport function byTag(tag: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].tags.includes(tag)) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function getModifiedVariants(options: Species[]): Species[] {\n  let result: Species[] = [];\n\n  result = result.concat(getSkeletonVariants(options));\n  result = result.concat(getVampireVariants(options));\n  result = result.concat(getZombieVariants(options));\n\n  return result;\n}\n\nexport function getSkeletonVariants(options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    let skeleton = Skeleton.modify(options[i]);\n    result.push(skeleton);\n  }\n\n  return result;\n}\n\nexport function getVampireVariants(options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    let vampire = Vampire.modify(options[i]);\n    result.push(vampire);\n  }\n\n  return result;\n}\n\nexport function getZombieVariants(options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    let zombie = Zombie.modify(options[i]);\n    result.push(zombie);\n  }\n\n  return result;\n}\n\nexport function randomUniqueSet(options: Species[], count: number): Species[] {\n  let result: Species[] = [];\n\n  options = RND.shuffle(options);\n\n  if (options.length >= count) {\n    for (let i = 0; i < count; i++) {\n      let item: Species | undefined = options.pop();\n      if (item !== undefined) {\n        result.push(item);\n      }\n    }\n  } else {\n    throw new Error(\"Not enough options to choose from.\");\n  }\n\n  return result;\n}\n\nexport function randomWeighted(options: Species[]): Species {\n  return RND.weighted(options);\n}\n\nexport function withCreatureType(creatureType: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].creatureTypes.includes(creatureType)) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function withoutTag(tag: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (!options[i].tags.includes(tag)) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n"],"names":["modify","species","result","modifierName","newTags","i","byName","name","options","byTag","tag","getSkeletonVariants","skeleton","Skeleton.modify","getVampireVariants","vampire","Vampire.modify","getZombieVariants","zombie","Zombie.modify","randomUniqueSet","count","RND.shuffle","item","randomWeighted","RND.weighted","withCreatureType","creatureType"],"mappings":"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"}