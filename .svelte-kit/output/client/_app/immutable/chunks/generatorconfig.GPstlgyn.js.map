{"version":3,"file":"generatorconfig.GPstlgyn.js","sources":["../../../../../../node_modules/@ironarachne/made-up-names/dist/stars.js","../../../../../../src/lib/shaders/stars/star.frag","../../../../../../src/lib/renderers/stars/webgl_star_renderer.ts","../../../../../../src/lib/stars/star.ts","../../../../../../src/lib/stars/generator.ts","../../../../../../src/lib/stars/classification.ts","../../../../../../src/lib/stars/classifications.ts","../../../../../../src/lib/stars/generatorconfig.ts","../../../../../../src/lib/starsystem/generator.ts","../../../../../../src/lib/starsystem/generatorconfig.ts"],"sourcesContent":["\"use strict\";\nimport * as Invented from \"./invented.js\";\nexport function generate() {\n    const patterns = [\n        \"pvn\",\n        \"pvnvn\",\n        \"pvnvv\",\n        \"slvnvn\",\n        \"lvfv\",\n        \"lvfvn\",\n        \"tvtv\",\n        \"pvtv+n\",\n        \"pvtv+\",\n        \"pv+c+v\",\n        \"tv+c+v\",\n        \"slv+c+vv\",\n        \"pvnvlv\",\n        \"pvnvlvnv\",\n        \"svnvlvnv\",\n        \"pv+llvlv\",\n        \"pvpvpv+n\",\n        \"slv+c+v+n\",\n        \"slvc+vn\",\n        \"slvc+vnv\",\n        \"slvpvpv\",\n        \"slvpv+pv\",\n    ];\n    return Invented.generate(patterns);\n}\n","#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float corona_width;\nuniform float seed;\nuniform float star_radius;\nuniform vec2 resolution;\nuniform vec3 star_color;\nuniform vec3 corona_color;\nuniform vec3 glow_color;\n\nvarying vec2 vUvs;\n\nfloat inverseLerp(float v, float minValue, float maxValue) {\n  return (v - minValue) / (maxValue - minValue);\n}\n\nfloat remap(float v, float inMin, float inMax, float outMin, float outMax) {\n  float t = inverseLerp(v, inMin, inMax);\n  return mix(outMin, outMax, t);\n}\n\nfloat saturate(float x) {\n  return clamp(x, 0.0, 1.0);\n}\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n//\n// https://www.shadertoy.com/view/Xsl3Dl\nvec3 hash3( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n            dot(p,vec3(269.5,183.3,246.1)),\n            dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n/**\n * OpenSimplex functions by KdotJPG\n * https://github.com/KdotJPG/OpenSimplex2\n */\n\n// Inspired by Stefan Gustavson's noise\nvec4 permute(vec4 t) {\n    return t * (t * 34.0 + 133.0);\n}\n\n// Gradient set is a normalized expanded rhombic dodecahedron\nvec3 grad(float hash) {\n\n    // Random vertex of a cube, +/- 1 each\n    vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;\n\n    // Random edge of the three edges connected to that vertex\n    // Also a cuboctahedral vertex\n    // And corresponds to the face of its dual, the rhombic dodecahedron\n    vec3 cuboct = cube;\n    cuboct[int(hash / 16.0)] = 0.0;\n\n    // In a funky way, pick one of the four points on the rhombic face\n    float type = mod(floor(hash / 8.0), 2.0);\n    vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));\n\n    // Expand it so that the new edges are the same length\n    // as the existing ones\n    vec3 grad = cuboct * 1.22474487139 + rhomb;\n\n    // To make all gradients the same length, we only need to shorten the\n    // second type of vector. We also put in the whole noise scale constant.\n    // The compiler should reduce it into the existing floats. I think.\n    grad *= (1.0 - 0.042942436724648037 * type) * 32.80201376986577;\n\n    return grad;\n}\n\n// BCC lattice split up into 2 cube lattices\nvec4 openSimplex2Base(vec3 X) {\n\n    // First half-lattice, closest edge\n    vec3 v1 = round(X);\n    vec3 d1 = X - v1;\n    vec3 score1 = abs(d1);\n    vec3 dir1 = step(max(score1.yzx, score1.zxy), score1);\n    vec3 v2 = v1 + dir1 * sign(d1);\n    vec3 d2 = X - v2;\n\n    // Second half-lattice, closest edge\n    vec3 X2 = X + 144.5;\n    vec3 v3 = round(X2);\n    vec3 d3 = X2 - v3;\n    vec3 score2 = abs(d3);\n    vec3 dir2 = step(max(score2.yzx, score2.zxy), score2);\n    vec3 v4 = v3 + dir2 * sign(d3);\n    vec3 d4 = X2 - v4;\n\n    // Gradient hashes for the four points, two from each half-lattice\n    vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n    hashes = mod(permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0);\n\n    // Gradient extrapolations & kernel function\n    vec4 a = max(0.5 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n    vec4 aa = a * a; vec4 aaaa = aa * aa;\n    vec3 g1 = grad(hashes.x); vec3 g2 = grad(hashes.y);\n    vec3 g3 = grad(hashes.z); vec3 g4 = grad(hashes.w);\n    vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n\n    // Derivatives of the noise\n    vec3 derivative = -8.0 * mat4x3(d1, d2, d3, d4) * (aa * a * extrapolations)\n        + mat4x3(g1, g2, g3, g4) * aaaa;\n\n    // Return it all as a vec4\n    return vec4(derivative, dot(aaaa, extrapolations));\n}\n\n// Use this if you don't want Z to look different from X and Y\nvec4 openSimplex2_Conventional(vec3 X) {\n\n    // Rotate around the main diagonal. Not a skew transform.\n    vec4 result = openSimplex2Base(dot(X, vec3(2.0/3.0)) - X);\n    return vec4(dot(result.xyz, vec3(2.0/3.0)) - result.xyz, result.w);\n}\n\n// Use this if you want to show X and Y in a plane, then use Z for time, vertical, etc.\nvec4 openSimplex2_ImproveXY(vec3 X) {\n\n    // Rotate so Z points down the main diagonal. Not a skew transform.\n    mat3 orthonormalMap = mat3(\n        0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187, 0.788675134594813, -0.577350269189626,\n        0.577350269189626, 0.577350269189626, 0.577350269189626);\n\n    vec4 result = openSimplex2Base(orthonormalMap * X);\n    return vec4(result.xyz * orthonormalMap, result.w);\n}\n\n// End OpenSimplex functions\n\nfloat fbm(vec3 p, int octaves, float persistence, float lacunarity, float exponentiation) {\n  float amplitude = 0.5;\n  float frequency = 1.0;\n  float total = 0.0;\n  float normalization = 0.0;\n\n  for (int i = 0; i < octaves; ++i) {\n    float noiseValue = openSimplex2_Conventional(p * frequency).w;\n    total += noiseValue * amplitude;\n    normalization += amplitude;\n    amplitude *= persistence;\n    frequency *= lacunarity;\n  }\n\n  total /= normalization;\n  total = total * 0.5 + 0.5;\n  total = pow(total, exponentiation);\n\n  return total;\n}\n\nfloat sdfCircle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat map(vec3 pos) {\n  return fbm(pos, 6, 0.5, 2.0, 4.0);\n}\n\nvec3 calcNormal(vec3 pos) {\n  vec2 e = vec2(0.00015, 0.0);\n  return normalize(\n      vec3(\n          map(pos + e.xyy) - map(pos - e.xyy),\n          map(pos + e.yxy) - map(pos - e.yxy),\n          map(pos + e.yyx) - map(pos - e.yyx)\n      )\n  );\n}\n\nvec3 DrawStar(vec2 pixelCoords, vec3 primaryColor, vec3 secondaryColor, vec3 glowColor, vec3 color, float starRadius, float coronaWidth) {\n  float d = sdfCircle(pixelCoords, starRadius);\n\n  vec3 starColor = vec3(1.0);\n\n  if (d <= 0.0) {\n    float x = pixelCoords.x / starRadius;\n    float y = pixelCoords.y / starRadius;\n    float z = sqrt(1.0 - x * x - y * y);\n\n    vec3 viewNormal = vec3(x, y, z);\n    vec3 wsPosition = viewNormal;\n    vec3 wsNormal = normalize(wsPosition);\n    vec3 wsViewDir = vec3(0.0, 0.0, 1.0);\n\n    vec3 noiseCoord = wsPosition * 2.0;\n    float noiseSample = fbm(noiseCoord, 6, 0.5, 2.0, 4.0);\n\n    starColor = mix(primaryColor, secondaryColor, smoothstep(0.05, 0.01, noiseSample));\n\n    float fresnel = pow(1.0 - dot(wsNormal, wsViewDir), 2.0);\n    starColor = mix(starColor, glowColor, fresnel);\n  }\n\n  color = mix(starColor, color, smoothstep(-1.0, 1.0, d));\n\n  if (d > 0.0) {\n    color = mix(glowColor, color, smoothstep(-20.0, coronaWidth * 2.0, d));\n  }\n\n  return color;\n}\n\nvec3 GenerateGridStars(\n    vec2 pixelCoords, float starRadius, float cellWidth,\n    float variant, bool twinkle) {\n\n  float seedVariant = clamp((seed + variant) / 100.0, 0.0, 1.0);\n  vec2 cellCoords = (fract(pixelCoords / cellWidth) - 0.5 + seedVariant) * cellWidth;\n  vec2 cellID = floor(pixelCoords / cellWidth);\n  vec3 cellHashValue = hash3(vec3(cellID, 0.0));\n\n  float starBrightness = saturate(cellHashValue.z);\n  vec2 starPosition = vec2(seedVariant);\n  starPosition += cellHashValue.xy * (cellWidth * 0.5 - starRadius * 4.0 + seedVariant);\n  float distToStar = length(cellCoords - starPosition);\n  float glow = exp(-2.0 * distToStar / starRadius);\n\n  if (twinkle) {\n    float noiseSample = openSimplex2_Conventional(vec3(cellID, seedVariant)).w;\n    float twinkleSize = (\n        remap(noiseSample, -1.0, 1.0, 1.0, 0.1) * starRadius * 6.0);\n    vec2 absDist = abs(cellCoords - starPosition);\n    float twinkleValue = smoothstep(starRadius * 0.25, 0.0, absDist.y) *\n        smoothstep(twinkleSize, 0.0, absDist.x);\n    twinkleValue += smoothstep(starRadius * 0.25, 0.0, absDist.x) *\n        smoothstep(twinkleSize, 0.0, absDist.y);\n    glow += twinkleValue;\n  }\n\n  return vec3(glow * starBrightness);\n}\n\nvec3 GenerateStars(vec2 pixelCoords) {\n  vec3 stars = vec3(0.0);\n\n  float size = 4.0;\n  float cellWidth = 500.0;\n  for (float i = 0.0; i <= 2.0; i++) {\n    stars += GenerateGridStars(pixelCoords, size, cellWidth, i, true);\n    size *= 0.5;\n    cellWidth *= 0.35;\n  }\n\n  for (float i = 3.0; i < 5.0; i++) {\n    stars += GenerateGridStars(pixelCoords, size, cellWidth, i, false);\n    size *= 0.5;\n    cellWidth *= 0.35;\n  }\n\n  return stars;\n}\n\nvoid main(void) {\n  vec2 pixelCoords = (vUvs - 0.5) * resolution;\n\n  vec3 color = GenerateStars(pixelCoords);\n  color = DrawStar(pixelCoords, star_color, corona_color, glow_color, color, star_radius, corona_width);\n\n  gl_FragColor = vec4(pow(color, vec3(1.0 / 2.2)), 1.0);\n}\n","import StarShader from \"$lib/shaders/stars/star.frag\";\nimport type Star from \"$lib/stars/star\";\nimport random from \"random\";\nimport * as THREE from \"three\";\nimport SimpleVertexShader from \"$lib/shaders/simple.vert\";\nimport type RGBColor from \"$lib/graphics/rgb_color\";\n\nexport function render(star: Star, width: number, height: number): string {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n\n  const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });\n  renderer.setSize(width, height);\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.OrthographicCamera(0, 1, 1, 0, 0.1, 1000);\n  camera.position.set(0, 0, 1);\n\n  if (canvas === null) {\n    throw new Error(\"Canvas not found\");\n  }\n\n  const geometry = new THREE.PlaneGeometry(1, 1);\n  const material = new THREE.ShaderMaterial({\n    uniforms: {\n      seed: { value: random.float(0, 100.0) },\n      resolution: { value: new THREE.Vector2(width, height) },\n      corona_width: {\n        value: calculateCoronaSize(\n          translateRadiusToImageSize(star.radius, Math.min(height, width)),\n        ),\n      },\n      glow_color: { value: translateColorToVec3(star.glowColor) },\n      corona_color: { value: translateColorToVec3(star.secondaryColor) },\n      star_color: { value: translateColorToVec3(star.primaryColor) },\n      star_radius: {\n        value: translateRadiusToImageSize(star.radius, Math.min(height, width)),\n      },\n    },\n    fragmentShader: StarShader,\n    vertexShader: SimpleVertexShader,\n  });\n  const plane = new THREE.Mesh(geometry, material);\n  plane.position.set(0.5, 0.5, 0);\n  scene.add(plane);\n\n  renderer.render(scene, camera);\n  const data = renderer.domElement.toDataURL(\"image/png\");\n\n  material.dispose();\n  geometry.dispose();\n  renderer.dispose();\n  canvas.remove();\n\n  return data;\n}\n\nfunction calculateCoronaSize(radius: number): number {\n  return Math.max(radius * 0.2, 4.0);\n}\n\nfunction translateColorToVec3(color: RGBColor): THREE.Vector3 {\n  return new THREE.Vector3(color.r, color.g, color.b);\n}\n\nfunction translateRadiusToImageSize(radius: number, imageSize: number): number {\n  const radiusRelativeToSun = radius / 695508;\n  const sunSizeInPixels = imageSize / 2.0;\n  const maxSizeInPixels = imageSize / 2.5;\n  const minSizeInPixels = imageSize / 8.0;\n\n  const sizeInPixels = radiusRelativeToSun * sunSizeInPixels;\n\n  const size = Math.max(\n    minSizeInPixels,\n    Math.min(maxSizeInPixels, sizeInPixels),\n  );\n\n  return size;\n}\n","import type RGBColor from \"$lib/graphics/rgb_color\";\n\nexport default class Star {\n  name: string;\n  color: string;\n  primaryColor: RGBColor;\n  secondaryColor: RGBColor;\n  glowColor: RGBColor;\n  description: string;\n  classification: string;\n  radius: number; // in km\n  mass: number; // in 10^30 kg\n  temperature: number; // in K\n  luminosity: number; // in 10^26 W\n\n  constructor() {\n    this.name = \"\";\n    this.color = \"\";\n    this.primaryColor = { r: 0, g: 0, b: 0 };\n    this.secondaryColor = { r: 0, g: 0, b: 0 };\n    this.glowColor = { r: 0, g: 0, b: 0 };\n    this.description = \"\";\n    this.classification = \"\";\n    this.radius = 0;\n    this.mass = 0;\n    this.temperature = 0;\n    this.luminosity = 0;\n  }\n}\n","import * as MUN from \"@ironarachne/made-up-names\";\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport type StarGeneratorConfig from \"./generatorconfig.js\";\n\nimport random from \"random\";\nimport Star from \"./star.js\";\nimport type RGBColor from \"$lib/graphics/rgb_color.js\";\n\nexport default class StarGenerator {\n  config: StarGeneratorConfig;\n\n  constructor(config: StarGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate() {\n    const classification = RND.weighted(this.config.possibleClassifications);\n\n    const star = new Star();\n\n    star.classification = classification.name;\n    star.radius =\n      random.float(classification.radius_min, classification.radius_max) *\n      695508;\n    star.mass =\n      random.float(classification.mass_min, classification.mass_max) * 1.989;\n    star.temperature = random.int(\n      classification.temperature_min,\n      classification.temperature_max,\n    );\n    star.luminosity =\n      random.float(\n        classification.luminosity_min,\n        classification.luminosity_max,\n      ) * 3.828;\n\n    const colorSet = this.getColorSetFromTemperature(star.temperature);\n\n    star.color = this.getColorFromTemperature(star.temperature);\n    star.primaryColor = colorSet[0];\n    star.secondaryColor = colorSet[1];\n    star.glowColor = colorSet[2];\n\n    const article = Words.article(star.color);\n    star.description = `This is ${article} ${star.color} ${star.classification} star.`;\n    star.name = MUN.star();\n\n    return star;\n  }\n\n  getColorFromTemperature(temperature: number): string {\n    if (temperature < 3700) {\n      return \"red\";\n    }\n\n    if (temperature < 5200) {\n      return \"orange\";\n    }\n\n    if (temperature < 6000) {\n      return \"yellow\";\n    }\n\n    if (temperature < 7500) {\n      return \"yellow-white\";\n    }\n\n    if (temperature < 10000) {\n      return \"white\";\n    }\n\n    if (temperature < 30000) {\n      return \"blue-white\";\n    }\n\n    return \"blue\";\n  }\n\n  getColorSetFromTemperature(temperature: number): RGBColor[] {\n    if (temperature < 3700) {\n      return [\n        { r: 1.0, g: 0.0, b: 0.0 },\n        { r: 0.5, g: 0.0, b: 0.0 },\n        { r: 1.0, g: 0.0, b: 0.0 },\n      ];\n    }\n\n    if (temperature < 5200) {\n      return [\n        { r: 1.0, g: 0.39, b: 0.0 },\n        { r: 0.7, g: 0.13, b: 0.0 },\n        { r: 1.0, g: 1.0, b: 0.0 },\n      ];\n    }\n\n    if (temperature < 6000) {\n      return [\n        { r: 1.0, g: 1.0, b: 0.0 },\n        { r: 0.55, g: 0.35, b: 0.0 },\n        { r: 1.0, g: 1.0, b: 0.5 },\n      ];\n    }\n\n    if (temperature < 7500) {\n      return [\n        { r: 1.0, g: 1.0, b: 0.9 },\n        { r: 0.95, g: 0.95, b: 0.7 },\n        { r: 1.0, g: 1.0, b: 1.0 },\n      ];\n    }\n\n    if (temperature < 10000) {\n      return [\n        { r: 1.0, g: 1.0, b: 1.0 },\n        { r: 0.95, g: 0.95, b: 0.95 },\n        { r: 1.0, g: 1.0, b: 1.0 },\n      ];\n    }\n\n    if (temperature < 30000) {\n      return [\n        { r: 0.85, g: 0.9, b: 1.0 },\n        { r: 0.7, g: 0.75, b: 0.95 },\n        { r: 1.0, g: 1.0, b: 1.0 },\n      ];\n    }\n\n    return [\n      { r: 0.0, g: 0.0, b: 1.0 },\n      { r: 0.0, g: 0.0, b: 0.75 },\n      { r: 0.0, g: 0.2, b: 1.0 },\n    ];\n  }\n}\n","export default class StarClassification {\n  name: string;\n  radius_min: number; // relative to the sun\n  radius_max: number; // relative to the sun\n  mass_min: number; // relative to the sun\n  mass_max: number; // relative to the sun\n  temperature_min: number; // in K\n  temperature_max: number; // in K\n  luminosity_min: number; // relative to the sun\n  luminosity_max: number; // relative to the sun\n  commonality: number; // commonality in the universe\n\n  constructor(\n    name: string,\n    radius_min: number,\n    radius_max: number,\n    mass_min: number,\n    mass_max: number,\n    temperature_min: number,\n    temperature_max: number,\n    luminosity_min: number,\n    luminosity_max: number,\n    commonality: number,\n  ) {\n    this.name = name;\n    this.radius_min = radius_min;\n    this.radius_max = radius_max;\n    this.mass_min = mass_min;\n    this.mass_max = mass_max;\n    this.temperature_min = temperature_min;\n    this.temperature_max = temperature_max;\n    this.luminosity_min = luminosity_min;\n    this.luminosity_max = luminosity_max;\n    this.commonality = commonality;\n  }\n}\n","import StarClassification from \"./classification.js\";\n\nexport function all() {\n  return [\n    new StarClassification(\"main sequence\", 0.1, 0.5, 0.1, 0.5, 2000, 4000, 0.01, 0.05, 40),\n    new StarClassification(\"main sequence\", 0.6, 0.9, 0.6, 0.8, 4000, 5000, 0.1, 0.8, 45),\n    new StarClassification(\"main sequence\", 0.9, 1.1, 0.8, 1.3, 5000, 6000, 0.8, 3.0, 60),\n    new StarClassification(\"main sequence\", 1.1, 1.5, 1.3, 1.8, 6000, 8000, 3.0, 8.0, 30),\n    new StarClassification(\"main sequence\", 1.5, 4.0, 1.8, 5.0, 8000, 15000, 15.0, 25.0, 10),\n    new StarClassification(\"main sequence\", 4.0, 6.0, 8.0, 12.0, 15000, 25000, 900.0, 1100.0, 5),\n    new StarClassification(\n      \"main sequence\",\n      8.0,\n      12.0,\n      45.0,\n      55.0,\n      35000,\n      45000,\n      90000.0,\n      110000.0,\n      1,\n    ),\n    new StarClassification(\"giant\", 10.0, 50.0, 1.0, 5.0, 3000, 10000, 50.0, 1000.0, 2),\n    new StarClassification(\n      \"supergiant\",\n      30.0,\n      500.0,\n      10.0,\n      70.0,\n      4000,\n      40000,\n      30000.0,\n      1000000.0,\n      1,\n    ),\n  ];\n}\n","import type StarClassification from \"./classification.js\";\nimport * as Classifications from \"./classifications.js\";\n\nexport default class StarGeneratorConfig {\n  possibleClassifications: StarClassification[];\n\n  constructor() {\n    this.possibleClassifications = Classifications.all();\n  }\n}\n","import * as Planets from \"$lib/planets/planets\";\nimport * as Words from \"@ironarachne/words\";\nimport * as RND from \"@ironarachne/rng\";\nimport random from \"random\";\nimport PlanetGeneratorConfig from \"$lib/planets/planet_generator_config\";\nimport StarGenerator from \"$lib/stars/generator\";\nimport StarGeneratorConfig from \"$lib/stars/generatorconfig\";\nimport type StarSystemGeneratorConfig from \"./generatorconfig\";\nimport type StarSystem from \"./star_system\";\n\nexport default class StarSystemGenerator {\n  config: StarSystemGeneratorConfig;\n\n  constructor(config: StarSystemGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate() {\n    const starsystem: StarSystem = {\n      name: \"\",\n      description: \"\",\n      stars: [],\n      planets: [],\n    };\n\n    const starGenConfig = new StarGeneratorConfig();\n    const starGen = new StarGenerator(starGenConfig);\n\n    const star = starGen.generate();\n\n    starsystem.name = star.name;\n\n    starsystem.stars.push(star);\n\n    // TODO: binary and trinary systems\n\n    const numberOfPlanets = random.int(\n      this.config.minPlanets,\n      this.config.maxPlanets,\n    );\n\n    const planetGenConfig = new PlanetGeneratorConfig();\n\n    for (let i = 0; i < numberOfPlanets; i++) {\n      const planet = Planets.generate(planetGenConfig);\n      starsystem.planets.push(planet);\n    }\n\n    starsystem.planets.sort((x, y) => {\n      if (x.distance_from_sun < y.distance_from_sun) {\n        return -1;\n      }\n      if (x.distance_from_sun > y.distance_from_sun) {\n        return 1;\n      }\n      return 0;\n    });\n\n    for (let i = 0; i < starsystem.planets.length; i++) {\n      if (!starsystem.planets[i].is_inhabited) {\n        starsystem.planets[i].name = `${starsystem.name} ${Words.romanize(\n          i + 1,\n        )}`;\n      }\n    }\n\n    starsystem.description = `The ${starsystem.name} system has ${numberOfPlanets} planets`;\n\n    const asteroidBeltChance = RND.simple(100);\n\n    if (asteroidBeltChance > 70) {\n      starsystem.description += \" and an asteroid belt.\";\n    } else {\n      starsystem.description += \".\";\n    }\n\n    return starsystem;\n  }\n}\n","export default class StarSystemGeneratorConfig {\n  minPlanets: number;\n  maxPlanets: number;\n\n  constructor() {\n    this.minPlanets = 3;\n    this.maxPlanets = 12;\n  }\n}\n"],"names":["generate","Invented.generate","star_default","render","star","width","height","canvas","renderer","THREE.WebGLRenderer","scene","THREE.Scene","camera","THREE.OrthographicCamera","geometry","THREE.PlaneGeometry","material","THREE.ShaderMaterial","random","THREE.Vector2","calculateCoronaSize","translateRadiusToImageSize","translateColorToVec3","StarShader","SimpleVertexShader","plane","THREE.Mesh","data","radius","color","THREE.Vector3","imageSize","radiusRelativeToSun","sunSizeInPixels","maxSizeInPixels","minSizeInPixels","sizeInPixels","Star","StarGenerator","config","classification","RND.weighted","colorSet","article","Words.article","MUN.star","temperature","StarClassification","name","radius_min","radius_max","mass_min","mass_max","temperature_min","temperature_max","luminosity_min","luminosity_max","commonality","all","StarGeneratorConfig","Classifications.all","StarSystemGenerator","starsystem","starGenConfig","numberOfPlanets","planetGenConfig","PlanetGeneratorConfig","i","planet","Planets.generate","x","y","Words.romanize","RND.simple","StarSystemGeneratorConfig"],"mappings":"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","x_google_ignoreList":[0]}