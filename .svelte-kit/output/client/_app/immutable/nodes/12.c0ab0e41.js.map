{"version":3,"file":"12.c0ab0e41.js","sources":["../../../../../../src/lib/characters/family/families.ts","../../../../../../src/routes/fantasy/family/+page.svelte"],"sourcesContent":["import * as AgeCategories from \"$lib/age/age_categories.js\";\nimport * as Characters from \"$lib/characters/characters.js\";\nimport type Gender from \"$lib/gender/gender.js\";\nimport * as SizeMatrix from \"$lib/size/size_matrix.js\";\nimport human from \"$lib/species/sentient/human.js\";\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport * as RND from \"@ironarachne/rng\";\nimport random from \"random\";\nimport type Character from \"../character\";\nimport type Family from \"./family\";\nimport type FamilyGeneratorConfig from \"./family_generator_config\";\nimport type FamilyMember from \"./family_member\";\n\nexport function generate(config: FamilyGeneratorConfig): Family {\n  let family: Family = {\n    name: \"\",\n    familyNameGenerator: config.rootFamilyNameGenerator,\n    femaleNameGenerator: config.rootFemaleNameGenerator,\n    maleNameGenerator: config.rootMaleNameGenerator,\n    members: [],\n  };\n\n  let genderNames = [];\n  for (let i = 0; i < config.species.genders.length; i++) {\n    genderNames.push(config.species.genders[i].name);\n  }\n\n  let charGenConfig = {\n    speciesOptions: [config.species],\n    ageCategoryNames: [config.species.ageCategories[3].name],\n    familyNameGenerator: family.familyNameGenerator,\n    femaleNameGenerator: family.femaleNameGenerator,\n    maleNameGenerator: family.maleNameGenerator,\n    genderNameOptions: genderNames,\n    useAdaptiveNames: false,\n    physicalTraitOverrides: [],\n  };\n\n  let parent1: FamilyMember = {\n    id: 0,\n    character: Characters.generate(charGenConfig),\n    parents: [],\n    children: [],\n    mate: 0,\n  };\n  parent1.character.age += 5;\n  parent1.character.description = Characters.describe(parent1.character);\n\n  let mateGender = getMateGender(parent1.character.gender, config.species.genders);\n  charGenConfig.genderNameOptions = [mateGender.name];\n  let parent2: FamilyMember = {\n    id: 1,\n    character: Characters.generate(charGenConfig),\n    parents: [],\n    children: [],\n    mate: 0,\n  };\n  parent2.character.age += 5;\n  parent2.character.description = Characters.describe(parent2.character);\n\n  if (parent1.character.gender.name == config.dominantFamilyNameGender.name) {\n    parent2.character.lastName = parent1.character.lastName;\n    family.name = parent1.character.lastName;\n  } else {\n    parent1.character.lastName = parent2.character.lastName;\n    family.name = parent2.character.lastName;\n  }\n\n  parent1.mate = parent2.id;\n  parent2.mate = parent1.id;\n\n  family.members.push(parent1);\n  family.members.push(parent2);\n\n  for (let i = 0; i < config.iterations; i++) {\n    family = iterate(family, config);\n  }\n\n  return family;\n}\n\nexport function getChildren(family: Family, parent: FamilyMember): FamilyMember[] {\n  let children: FamilyMember[] = [];\n  for (let i = 0; i < parent.children.length; i++) {\n    children.push(family.members[parent.children[i]]);\n  }\n\n  return children;\n}\n\nexport function getDefaultConfig(): FamilyGeneratorConfig {\n  let generatorSets = MUN.allSets();\n  let generatorSet = MUN.getSetByName(\"human\", generatorSets);\n  let config = {\n    species: human,\n    iterations: 10,\n    rootFamilyNameGenerator: generatorSet.family,\n    rootFemaleNameGenerator: generatorSet.female,\n    rootMaleNameGenerator: generatorSet.male,\n    dominantFamilyNameGender: human.genders[1],\n  };\n\n  return config;\n}\n\nexport function getMate(family: Family, person: FamilyMember): FamilyMember {\n  return family.members[person.mate];\n}\n\nexport function getParents(family: Family, person: FamilyMember): FamilyMember[] {\n  let parents = [];\n  for (let i = 0; i < person.parents.length; i++) {\n    parents.push(family.members[person.parents[i]]);\n  }\n\n  return parents;\n}\n\nexport function iterate(family: Family, config: FamilyGeneratorConfig): Family {\n  const ageStep = 5;\n\n  for (let i = 0; i < family.members.length; i++) {\n    if (family.members[i].character.status == \"alive\") {\n      family.members[i].character.age += ageStep;\n    }\n\n    if (\n      family.members[i].character.age\n        > AgeCategories.getMaxAge(family.members[i].character.species.ageCategories)\n    ) {\n      // This person died of old age\n      family.members[i].character.status = \"dead\";\n    } else {\n      // This person aged normally\n      let newAgeCategory = AgeCategories.getCategoryFromAge(\n        family.members[i].character.age,\n        family.members[i].character.species.ageCategories,\n      );\n\n      if (newAgeCategory.name != family.members[i].character.ageCategory.name) {\n        // This person aged into a new age category and needs a new height and weight\n        let sizeGeneratorConfig = SizeMatrix.getSizeConfig(\n          family.members[i].character.gender.name,\n          newAgeCategory.name,\n          family.members[i].character.species.sizeGeneratorConfigMatrix,\n        );\n\n        family.members[i].character.height = random.int(sizeGeneratorConfig.minHeight, sizeGeneratorConfig.maxHeight);\n        family.members[i].character.weight = random.int(sizeGeneratorConfig.minWeight, sizeGeneratorConfig.maxWeight);\n      }\n      family.members[i].character.ageCategory = newAgeCategory;\n    }\n\n    family.members[i].character.description = Characters.describe(family.members[i].character);\n\n    if (family.members[i].character.status == \"dead\") {\n      continue;\n    }\n\n    if (RND.simple(100) > 98) {\n      // There's a 2% chance something horrible kills this person\n      family.members[i].character.status = \"dead\";\n      continue;\n    }\n\n    if (needsChildren(family.members[i]) && RND.simple(100) > 30) {\n      let numberOfChildren = random.int(1, 4);\n      for (let j = 0; j < numberOfChildren; j++) {\n        let child = getNewChild(i, family.members[i].mate, family);\n        let newMember: FamilyMember = {\n          id: family.members.length,\n          character: child,\n          children: [],\n          parents: [i, family.members[i].mate],\n          mate: -1,\n        };\n        family.members[i].children.push(newMember.id);\n        family.members[family.members[i].mate].children.push(newMember.id);\n\n        if (\n          family.members[i].character.gender.name == config.dominantFamilyNameGender.name\n        ) {\n          newMember.character.lastName = family.members[i].character.lastName;\n        } else {\n          newMember.character.lastName = family.members[family.members[i].mate].character.lastName;\n        }\n\n        family.members.push(newMember);\n      }\n    }\n\n    if (needsMate(family.members[i]) && RND.simple(100) > 50) {\n      let mate = getNewMate(family.members[i], family);\n      let newMember: FamilyMember = { id: family.members.length, character: mate, children: [], parents: [], mate: i };\n      family.members[i].mate = newMember.id;\n\n      if (family.members[i].character.gender.name == config.dominantFamilyNameGender.name) {\n        newMember.character.lastName = family.members[i].character.lastName;\n      } else {\n        family.members[i].character.lastName = newMember.character.lastName;\n      }\n\n      family.members.push(newMember);\n    }\n  }\n\n  return family;\n}\n\nfunction getNewChild(parent1Index: number, parent2Index: number, family: Family): Character {\n  let parent1 = family.members[parent1Index].character;\n  let parent2 = family.members[parent2Index].character;\n\n  let physicalTraits = parent1.physicalTraits.concat(parent2.physicalTraits);\n  let uniqueNames: string[] = [];\n  let traitOverrides = [];\n  physicalTraits = RND.shuffle(physicalTraits);\n  for (let i = 0; i < physicalTraits.length; i++) {\n    if (!uniqueNames.includes(physicalTraits[i].name)) {\n      traitOverrides.push(physicalTraits[i]);\n      uniqueNames.push(physicalTraits[i].name);\n    }\n  }\n\n  let charConfig = Characters.getDefaultCharacterGeneratorConfig();\n  charConfig.speciesOptions = [parent1.species, parent2.species];\n  charConfig.ageCategoryNames = [\"infant\", \"toddler\"];\n  charConfig.familyNameGenerator = family.familyNameGenerator;\n  charConfig.femaleNameGenerator = family.femaleNameGenerator;\n  charConfig.maleNameGenerator = family.maleNameGenerator;\n  let genderNames = [];\n  for (let i = 0; i < parent1.species.genders.length; i++) {\n    genderNames.push(parent1.species.genders[i].name);\n  }\n  charConfig.genderNameOptions = genderNames;\n  charConfig.physicalTraitOverrides = traitOverrides;\n\n  let child = Characters.generate(charConfig);\n\n  return child;\n}\n\nfunction getNewMate(member: FamilyMember, family: Family): Character {\n  let gender = member.character.gender;\n\n  let charConfig = Characters.getDefaultCharacterGeneratorConfig();\n  charConfig.speciesOptions = [member.character.species];\n  charConfig.ageCategoryNames = [\"adult\"];\n  charConfig.familyNameGenerator = family.familyNameGenerator;\n  charConfig.femaleNameGenerator = family.femaleNameGenerator;\n  charConfig.maleNameGenerator = family.maleNameGenerator;\n  charConfig.genderNameOptions = [getMateGender(gender, member.character.species.genders).name];\n\n  let mate = Characters.generate(charConfig);\n\n  return mate;\n}\n\nfunction getMateGender(gender1: Gender, genders: Gender[]): Gender {\n  for (let i = 0; i < genders.length; i++) {\n    if (genders[i].name != gender1.name) {\n      return genders[i];\n    }\n  }\n\n  return gender1;\n}\n\nfunction needsChildren(member: FamilyMember): boolean {\n  if (\n    member.mate != -1\n    && member.children.length == 0\n    && member.character.ageCategory.name == \"adult\"\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction needsMate(member: FamilyMember): boolean {\n  if (member.character.ageCategory.name == \"adult\" && member.mate == -1) {\n    return true;\n  }\n\n  return false;\n}\n","<script lang=\"ts\">\n  import * as CommonSpecies from '$lib/species/common';\n  import * as RND from \"@ironarachne/rng\";\n  import random from \"random\";\n  import seedrandom from \"seedrandom\";\n  import * as Families from \"$lib/characters/family/families.js\";\n  import * as MUN from \"@ironarachne/made-up-names\";\n  import type Gender from \"$lib/gender/gender\";\n  import type Species from \"$lib/species/species\";\n  import type NameGenerator from '@ironarachne/made-up-names/dist/generator';\n\n  let seed = RND.randomString(13);\n  let availableSpecies = CommonSpecies.sentient();\n  let selectedSpecies = \"any\";\n  let species = CommonSpecies.randomWeighted(availableSpecies);\n  let iterations = 2;\n  const generatorSets = MUN.allSets();\n  let nameGeneratorSet;\n\n  try {\n    nameGeneratorSet = MUN.getSetByName(species.name, generatorSets);\n  } catch (e) {\n    console.debug(e);\n    nameGeneratorSet = MUN.getSetByName(\"fantasy\", generatorSets);\n  }\n\n  let familyNameGen: NameGenerator = nameGeneratorSet.family;\n  let femaleNameGen: NameGenerator = nameGeneratorSet.female;\n  let maleNameGen: NameGenerator = nameGeneratorSet.male;\n  let lastNameTradition = \"male\";\n  let config = Families.getDefaultConfig();\n  config.species = species;\n  config.iterations = iterations;\n  config.rootFamilyNameGenerator = familyNameGen;\n  config.rootFemaleNameGenerator = femaleNameGen;\n  config.rootMaleNameGenerator = maleNameGen;\n  config.dominantFamilyNameGender = getDominantGender();\n\n  let family = Families.generate(config);\n\n  function generate() {\n    random.use(seedrandom(seed));\n    species = getSpecies(selectedSpecies);\n\n    try {\n      nameGeneratorSet = MUN.getSetByName(species.name, generatorSets);\n    } catch (e) {\n      console.debug(e);\n      nameGeneratorSet = MUN.getSetByName(\"fantasy\", generatorSets);\n    }\n\n    familyNameGen = nameGeneratorSet.family;\n    femaleNameGen = nameGeneratorSet.female;\n    maleNameGen = nameGeneratorSet.male;\n    config.species = species;\n    config.iterations = iterations;\n    config.rootFamilyNameGenerator = familyNameGen;\n    config.rootFemaleNameGenerator = femaleNameGen;\n    config.rootMaleNameGenerator = maleNameGen;\n    config.dominantFamilyNameGender = getDominantGender();\n\n    family = Families.generate(config);\n  }\n\n  function getDominantGender(): Gender {\n    for (let i=0;i<species.genders.length;i++) {\n      if (species.genders[i].name == lastNameTradition) {\n        return species.genders[i];\n      }\n    }\n\n    throw new Error(\"Dominant gender not set\");\n  }\n\n  function getSpecies(name: string): Species {\n    if (name == \"any\") {\n      return CommonSpecies.randomWeighted(availableSpecies);\n    }\n\n    for (let i=0;i<availableSpecies.length;i++) {\n      if (availableSpecies[i].name == name) {\n        return availableSpecies[i];\n      }\n    }\n\n    throw new Error(\"Species not found\");\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/fantasy.scss';\n</style>\n\n<svelte:head>\n  <title>Fantasy Family Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"fantasy main\">\n  <h1>Fantasy Family Generator</h1>\n\n  <p>This generator creates a family. Note that more than 10 iterations can be quite slow. More than 30 may or may not crash your browser.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\"/>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"iterations\">Iterations</label>\n    <input type=\"number\" name=\"iterations\" bind:value={iterations} id=\"iterations\" min=\"1\" max=\"10\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"species\">Species</label>\n    <select id=\"species\" bind:value={selectedSpecies}>\n      <option>any</option>\n      {#each availableSpecies as option}\n      <option>{option.name}</option>\n      {/each}\n    </select>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"last-name-tradition\">Last name tradition (gender)</label>\n    <select id=\"last-name-tradition\" bind:value={lastNameTradition}>\n      <option>male</option>\n      <option>female</option>\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <h2>The {family.name} Family</h2>\n\n  {#each family.members as member}\n    <h3>{member.character.firstName} {member.character.lastName}</h3>\n    <p>{member.character.age}-year-old {member.character.species.name} {member.character.ageCategory.noun} {#if member.character.status == \"dead\"}(dead){/if}</p>\n    <p>{member.character.description}</p>\n    {#if member.mate != -1}\n      <p><strong>Mate:</strong> {Families.getMate(family, member).character.firstName} {Families.getMate(family, member).character.lastName}</p>\n    {/if}\n    {#if member.children.length > 0}\n      <h4>Children</h4>\n      <ul>\n        {#each Families.getChildren(family, member) as child}\n          <li>{child.character.firstName} {child.character.lastName}</li>\n        {/each}\n      </ul>\n    {/if}\n    {#if member.parents.length > 0}\n      <h4>Parents</h4>\n      <ul>\n        {#each Families.getParents(family, member) as parent}\n          <li>{parent.character.firstName} {parent.character.lastName}</li>\n        {/each}\n      </ul>\n    {/if}\n  {/each}\n</section>\n"],"names":["generate","config","family","genderNames","i","charGenConfig","parent1","Characters.generate","Characters.describe","mateGender","getMateGender","parent2","iterate","getChildren","parent","children","getDefaultConfig","generatorSets","MUN.allSets","generatorSet","MUN.getSetByName","human","getMate","person","getParents","parents","AgeCategories.getMaxAge","newAgeCategory","AgeCategories.getCategoryFromAge","sizeGeneratorConfig","SizeMatrix.getSizeConfig","random","RND.simple","needsChildren","numberOfChildren","j","child","getNewChild","newMember","needsMate","mate","getNewMate","parent1Index","parent2Index","physicalTraits","uniqueNames","traitOverrides","RND.shuffle","charConfig","Characters.getDefaultCharacterGeneratorConfig","member","gender","gender1","genders","t_value","ctx","option_1","insert_hydration","target","anchor","Families.getMate","p","append_hydration","strong","set_data","t2","t2_value","t4","t4_value","each_value_2","ensure_array_like","Families.getChildren","h4","ul","li","t0","t0_value","each_value_1","Families.getParents","t6_value","t8_value","if_block0","create_if_block_3","create_if_block_2","if_block2","create_if_block_1","if_block3","create_if_block","h3","p0","p1","dirty","t6","t8","t11","t11_value","t25_value","each_value","add_render_callback","select0","select1","section","h1","div0","label0","input0","div1","label1","input1","div2","label2","option0","div3","label3","option1","option2","button0","button1","h2","t25","seed","RND.randomString","availableSpecies","CommonSpecies.sentient","selectedSpecies","species","CommonSpecies.randomWeighted","iterations","nameGeneratorSet","e","familyNameGen","femaleNameGen","maleNameGen","lastNameTradition","Families.getDefaultConfig","getDominantGender","Families.generate","seedrandom","getSpecies","name","newSeed","to_number","select_value"],"mappings":"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"}