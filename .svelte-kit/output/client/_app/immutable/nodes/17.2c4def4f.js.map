{"version":3,"file":"17.2c4def4f.js","sources":["../../../../../../src/lib/download.ts","../../../../../../src/lib/renderers/svg-to-png.ts","../../../../../../src/routes/heraldry/+page.svelte"],"sourcesContent":["export default function(href: string, name: string) {\n  let link = document.createElement(\"a\");\n  link.download = name;\n  link.style.opacity = \"0\";\n  document.body.append(link);\n  link.href = href;\n  link.click();\n  link.remove();\n}\n","import Download from \"../download.js\";\n\nexport default function(svg: string, width: number, height: number, fileName: string) {\n  const blob = new Blob([svg], { type: \"image/svg+xml\" });\n  let blobURL = window.URL.createObjectURL(blob);\n  let image = new Image();\n  image.onload = () => {\n    let canvas = document.createElement(\"canvas\");\n\n    canvas.width = width;\n    canvas.height = height;\n\n    let context = canvas.getContext(\"2d\");\n    if (context) {\n      context.drawImage(image, 0, 0, width, height);\n    } else {\n      throw new Error(\"Could not get context\");\n    }\n\n    let png = canvas.toDataURL();\n\n    Download(png, fileName);\n\n    canvas.remove();\n  };\n  image.src = blobURL;\n}\n","<script lang=\"ts\">\n  import * as Charges from \"$lib/heraldry/charges\";\n  import * as Fields from \"$lib/heraldry/fields\";\n  import * as RND from \"@ironarachne/rng\";\n  import * as Tinctures from \"$lib/heraldry/tinctures\";\n  import * as Variations from \"$lib/heraldry/variations\";\n  import Download from \"$lib/download\";\n  import SaveSVGToPNG from \"$lib/renderers/svg-to-png\";\n  import { renderSVGAsPNG } from \"$lib/images/svg\";\n  import random from \"random\";\n  import seedrandom from \"seedrandom\";\n  import HeraldryGenerator from \"$lib/heraldry/generator\";\n  import HeraldrySVGRenderer from \"$lib/heraldry/renderers/svg\";\n  import HeraldryGeneratorConfig from \"$lib/heraldry/generatorconfig\";\n\n  let blazon = \"\";\n  let image = \"\";\n  let seed = RND.randomString(13);\n  let charges = Charges.all();\n  let allCharges = Charges.all();\n  let heraldryTag = 'any';\n  let chargeTinctureName = 'any';\n  let chargeTincture = Tinctures.randomChargeTincture();\n  let numberOfChargesOption = 'any';\n  let fieldTinctures1 = Tinctures.all();\n  let fieldTinctures2 = Tinctures.all();\n  let fields = Fields.all();\n  let furCount = 0;\n  let variations = Variations.all();\n  let availableTags = Charges.allChargeTags();\n  const heraldryWidth = 600;\n  const heraldryHeight = 660;\n\n  function changeCharges() {\n    if (heraldryTag == 'any') {\n      charges = allCharges;\n    } else {\n      charges = Charges.matchingTag(heraldryTag, allCharges);\n    }\n  }\n\n  function setChargeTincture() { // TODO: if the field tinctures are 'any', automatically contrast them with the charge tincture here\n    if (chargeTinctureName == 'any') {\n      chargeTincture = Tinctures.randomChargeTincture();\n    } else {\n      let tincture = Tinctures.byName(chargeTinctureName);\n      if (tincture !== undefined) {\n        chargeTincture = tincture;\n      }\n    }\n    setFieldTinctures();\n  }\n\n  function setFieldTinctures() {\n    let types1 = [];\n    let types2 = [];\n    // TODO: when choosing field tinctures is an option, this will need redoing\n    if (chargeTincture.type == 'color' || chargeTincture.type == 'stain') {\n      types1 = ['metal'];\n      types2 = ['metal'];\n    } else {\n      types1 = ['color'];\n      types2 = ['color'];\n\n      if (RND.simple(100) > 70) {\n        types1.push('stain');\n      }\n      if (RND.simple(100) > 80) {\n        types2.push('stain');\n      }\n    }\n    if (furCount === 0) {\n      types1.push('furs');\n    }\n    fieldTinctures1 = Tinctures.ofTypes(types1);\n    fieldTinctures2 = Tinctures.ofTypes(types2);\n  }\n\n  function generate() {\n    random.use(seedrandom(seed));\n    let numberOfCharges = randomNumberOfCharges();\n    if (numberOfChargesOption == 'one') {\n      numberOfCharges = 1;\n    } else if (numberOfChargesOption == 'two') {\n      numberOfCharges = 2;\n    } else if (numberOfChargesOption == 'three') {\n      numberOfCharges = 3;\n    } else if (numberOfChargesOption == 'none') {\n      numberOfCharges = 0;\n    }\n    setChargeTincture();\n\n    let config = new HeraldryGeneratorConfig();\n\n    config.chargeCount = numberOfCharges;\n    config.chargeOptions = charges;\n    config.chargeTinctures = [chargeTincture];\n    config.fieldOptions = fields;\n    config.variationOptions = variations;\n    config.fieldTinctures1 = fieldTinctures1;\n    config.fieldTinctures2 = fieldTinctures2;\n    config.width = heraldryWidth;\n    config.height = heraldryHeight;\n\n    let heraldryGen = new HeraldryGenerator();\n    heraldryGen.config = config;\n    let heraldry = heraldryGen.generate();\n    blazon = heraldry.blazon;\n\n    let renderer = new HeraldrySVGRenderer();\n\n    image = renderer.render(heraldry.device, config.width, config.height);\n    renderSVGAsPNG(image, config.width, config.height, 'output');\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  function randomNumberOfCharges() {\n    const weights = [\n      { item: 0, commonality: 20 },\n      { item: 1, commonality: 55 },\n      { item: 2, commonality: 5 },\n      { item: 3, commonality: 3 },\n    ];\n\n    const result = RND.weighted(weights);\n\n    return result.item;\n  }\n\n  function save() {\n    const blob = new Blob([image], { type: \"image/svg+xml\" });\n    Download(window.URL.createObjectURL(blob), `heraldry-${seed}.svg`);\n  }\n\n  function saveAsPNG() {\n    SaveSVGToPNG(image, heraldryWidth, heraldryHeight, `heraldry-${seed}.png`);\n  }\n\n  newSeed();\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/fantasy.scss';\n\n  div.coat-of-arms {\n    width: 600px;\n    height: 660px;\n    margin: 0 auto;\n  }\n\n  p.blazon {\n    text-align: center;\n  }\n</style>\n\n<section class=\"fantasy main\">\n  <h1>Heraldry Generator</h1>\n  <p>\n    Generate fantasy coats-of-arms. Note: if you change the seed, the page URL\n    won't change, but your new seed will be used the next time you hit Generate.\n  </p>\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\" />\n  </div>\n  <div class=\"input-group\">\n    <label for=\"tag\">Charge Tag</label>\n    <select name=\"tag\" bind:value={heraldryTag} on:change={changeCharges}>\n      <option>any</option>\n      {#each availableTags as tag}\n      <option>{tag}</option>\n      {/each}\n    </select>\n  </div>\n  <div class=\"input-group\">\n    <label for=\"num-charges\">Number of Charges</label>\n    <select name=\"num-charges\" bind:value={numberOfChargesOption}>\n      <option>any</option>\n      <option>none</option>\n      <option>one</option>\n      <option>two</option>\n      <option>three</option>\n    </select>\n  </div>\n  <div class=\"input-group\">\n    <label for=\"charge-tincture\">Charge Tincture</label>\n    <select name=\"charge-tincture\" bind:value={chargeTinctureName} on:change={setChargeTincture}>\n      <option>any</option>\n      <option value=\"gules\">gules (red)</option>\n      <option value=\"argent\">argent (white)</option>\n      <option value=\"vert\">vert (green)</option>\n      <option value=\"purpure\">purpure (purple)</option>\n      <option value=\"sable\">sable (black)</option>\n      <option value=\"Or\">Or (gold)</option>\n      <option value=\"azure\">azure (blue)</option>\n      <option value=\"murrey\">murrey (mulberry)</option>\n      <option value=\"sanguine\">sanguine (blood red)</option>\n      <option value=\"tenné\">tenné (brown)</option>\n    </select>\n  </div>\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n  <button on:click={save} disabled={image === \"\"}>Save</button>\n  <button on:click={saveAsPNG} disabled={image === \"\"}>Save as PNG</button>\n\n  <p class=\"blazon\">{blazon}</p>\n  <div class=\"coat-of-arms\"><img alt=\"\" id=\"output\"/></div>\n</section>\n\n<svelte:head>\n  <title>Heraldry Generator | Iron Arachne</title>\n</svelte:head>\n"],"names":["Download","href","name","link","SaveSVGToPNG","svg","width","height","fileName","blob","blobURL","image","canvas","context","png","ctx","insert_hydration","target","option","anchor","add_render_callback","select0","select1","select2","button2","button2_disabled_value","button3","button3_disabled_value","section","append_hydration","h1","p0","div0","label0","input","div1","label1","option0","div2","label2","option1","option2","option3","option4","option5","div3","label3","option6","option7","option8","option9","option10","option11","option12","option13","option14","option15","option16","button0","button1","p1","div4","i","dirty","heraldryWidth","heraldryHeight","blazon","seed","RND.randomString","charges","Charges.all","allCharges","heraldryTag","chargeTinctureName","chargeTincture","Tinctures.randomChargeTincture","numberOfChargesOption","fieldTinctures1","Tinctures.all","fieldTinctures2","fields","Fields.all","variations","Variations.all","availableTags","Charges.allChargeTags","changeCharges","Charges.matchingTag","setChargeTincture","tincture","Tinctures.byName","setFieldTinctures","types1","types2","RND.simple","Tinctures.ofTypes","generate","random","seedrandom","numberOfCharges","randomNumberOfCharges","config","HeraldryGeneratorConfig","heraldryGen","HeraldryGenerator","heraldry","$$invalidate","renderer","HeraldrySVGRenderer","renderSVGAsPNG","newSeed","RND.weighted","save","saveAsPNG","select_value"],"mappings":"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"}