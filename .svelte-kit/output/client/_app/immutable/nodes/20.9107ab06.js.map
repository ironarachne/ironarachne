{"version":3,"file":"20.9107ab06.js","sources":["../../../../../../src/routes/planet/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import * as RND from '@ironarachne/rng';\n  import * as Classifications from '$lib/planets/classifications';\n  import * as WebGLPlanetRenderer from '$lib/renderers/planets/webgl_planet_renderer';\n  import random from 'random';\n  import seedrandom from 'seedrandom';\n  import PlanetGeneratorConfig from '$lib/planets/generatorconfig';\n  import PlanetGenerator from '$lib/planets/generator';\n  import type Planet from '$lib/planets/planet';\n\n  import { onMount } from 'svelte';\n\n  let planetTypes = Classifications.getClassificationNames();\n\n  let seed = RND.randomString(13);\n  random.use(seedrandom(seed));\n\n  let planetType = 'random';\n  let planetGenConfig: PlanetGeneratorConfig;\n  let planetGen: PlanetGenerator;\n  let planet: Planet;\n\n  const width = 400;\n  const height = 400;\n\n  function generate() {\n    random.use(seedrandom(seed));\n\n    if (planetType == 'random') {\n      planetGen.config.possibleClassifications = Classifications.all();\n    } else {\n      let classification = Classifications.getClassificationByName(planetType);\n      if (classification !== undefined) {\n        planetGen.config.possibleClassifications = [\n        classification,\n      ];\n      }\n    }\n\n    planet = planetGen.generate();\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  onMount(() => {\n    planetGenConfig = new PlanetGeneratorConfig();\n    planetGen = new PlanetGenerator(planetGenConfig);\n\t\tplanet = planetGen.generate();\n\t});\n</script>\n\n<svelte:head>\n  <title>Planet Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"main scifi\">\n  <h1>Planet Generator</h1>\n\n  <p>This lets you generate a planet. It uses WebGL and your graphics card.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"planetType\">Planet Type</label>\n    <select bind:value={planetType} id=\"planetType\">\n      <option>random</option>\n      {#each planetTypes as pType}\n        <option>{pType}</option>\n      {/each}\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  {#if planet}\n    <h2>{planet.name}</h2>\n\n    <img alt=\"{ planet.name } image\" src=\"{ WebGLPlanetRenderer.render(planet, width, height) }\" />\n\n    <p>{planet.description}</p>\n\n    <p><strong>Planet Type:</strong> {planet.classification.name}</p>\n    <p><strong>Population:</strong> {planet.populationFriendly}</p>\n    <p><strong>Government:</strong> {planet.government}</p>\n    <p><strong>Culture:</strong> {planet.culture}</p>\n    <p>\n      <strong>Distance from Star:</strong>\n      {new Intl.NumberFormat().format(planet.distance_from_sun)} AU\n    </p>\n    <p>\n      <strong>Mass:</strong>\n      {new Intl.NumberFormat().format(planet.mass)} &times; 10<sup>24</sup> kg ({new Intl.NumberFormat().format(\n        Math.floor((planet.mass / 5.9722) * 100),\n      )}% Earth's mass)\n    </p>\n    <p>\n      <strong>Diameter:</strong>\n      {new Intl.NumberFormat().format(Math.floor(planet.diameter))} km ({new Intl.NumberFormat().format(\n        Math.floor((planet.diameter / 12756) * 100),\n      )}% Earth's diameter)\n    </p>\n    <p>\n      <strong>Gravity:</strong>\n      {new Intl.NumberFormat().format(planet.gravity)} m/s<sup>2</sup>\n      ({new Intl.NumberFormat().format(Math.floor((planet.gravity / 9.81) * 100))}% Earth's gravity)\n    </p>\n    <p>\n      <strong>Orbital Period:</strong>\n      {new Intl.NumberFormat().format(Math.floor(planet.orbital_period))} days\n    </p>\n  {/if}\n</section>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/scifi.scss';\n\n  canvas {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n\n  #planet-render {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n</style>\n"],"names":["ctx","insert_hydration","target","option","anchor","t0_value","t3_value","t11_value","t15_value","t19_value","t23_value","t28_value","t32_value","t39_value","t44_value","t48_value","attr","img","img_alt_value","src_url_equal","img_src_value","WebGLPlanetRenderer.render","width","height","h2","p0","p1","append_hydration","strong0","p2","strong1","p3","strong2","p4","strong3","p5","strong4","p6","strong5","sup0","p7","strong6","p8","strong7","sup1","p9","strong8","dirty","set_data","t0","t3","t7","t7_value","t11","t15","t19","t23","t28","t32","t37","t37_value","t39","t44","t48","t53","t53_value","i","create_if_block","add_render_callback","select","section","h1","p","div0","label0","input","div1","label1","button0","button1","planetTypes","Classifications.getClassificationNames","seed","RND.randomString","random","seedrandom","planetType","planetGenConfig","planetGen","planet","generate","Classifications.all","classification","Classifications.getClassificationByName","$$invalidate","newSeed","onMount","PlanetGeneratorConfig","PlanetGenerator","select_value"],"mappings":"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"}