{"version":3,"file":"20.kyndaqmm.js","sources":["../../../../../../src/routes/planet/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import * as RND from '@ironarachne/rng';\n  import * as Classifications from '$lib/planets/classifications';\n  import * as WebGLPlanetRenderer from '$lib/renderers/planets/webgl_planet_renderer';\n  import * as Planets from '$lib/planets/planets';\n  import random from 'random';\n  import seedrandom from 'seedrandom';\n  import PlanetGeneratorConfig from '$lib/planets/planet_generator_config';\n  import type Planet from '$lib/planets/planet';\n\n  import { onMount } from 'svelte';\n\n  let planetTypes = Classifications.getClassificationNames();\n\n  let seed = RND.randomString(13);\n  random.use(seedrandom(seed));\n\n  let planetType = 'random';\n  let planetGenConfig: PlanetGeneratorConfig;\n  let planet: Planet;\n\n  const width = 400;\n  const height = 400;\n\n  function generate() {\n    random.use(seedrandom(seed));\n\n    if (planetType == 'random') {\n      planetGenConfig.possibleClassifications = Classifications.all();\n    } else {\n      let classification = Classifications.getClassificationByName(planetType);\n      if (classification !== undefined) {\n        planetGenConfig.possibleClassifications = [\n        classification,\n      ];\n      }\n    }\n\n    planet = Planets.generate(planetGenConfig);\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  onMount(() => {\n    planetGenConfig = new PlanetGeneratorConfig();\n\t\tplanet = Planets.generate(planetGenConfig);\n\t});\n</script>\n\n<svelte:head>\n  <title>Planet Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"main scifi\">\n  <h1>Planet Generator</h1>\n\n  <p>This lets you generate a planet. It uses WebGL and your graphics card.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"planetType\">Planet Type</label>\n    <select bind:value={planetType} id=\"planetType\">\n      <option>random</option>\n      {#each planetTypes as pType}\n        <option>{pType}</option>\n      {/each}\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  {#if planet}\n    <h2>{planet.name}</h2>\n\n    <img alt=\"{ planet.name } image\" src=\"{ WebGLPlanetRenderer.render(planet, width, height) }\" />\n\n    <p>{planet.description}</p>\n\n    <p><strong>Planet Type:</strong> {planet.classification}</p>\n    <p><strong>Population:</strong> {planet.populationFriendly}</p>\n    <p><strong>Government:</strong> {planet.government}</p>\n    <p><strong>Culture:</strong> {planet.culture}</p>\n    <p>\n      <strong>Distance from Star:</strong>\n      {new Intl.NumberFormat().format(planet.distance_from_sun)} AU\n    </p>\n    <p>\n      <strong>Mass:</strong>\n      {new Intl.NumberFormat().format(planet.mass)} &times; 10<sup>24</sup> kg ({new Intl.NumberFormat().format(\n        Math.floor((planet.mass / 5.9722) * 100),\n      )}% Earth's mass)\n    </p>\n    <p>\n      <strong>Diameter:</strong>\n      {new Intl.NumberFormat().format(Math.floor(planet.diameter))} km ({new Intl.NumberFormat().format(\n        Math.floor((planet.diameter / 12756) * 100),\n      )}% Earth's diameter)\n    </p>\n    <p>\n      <strong>Gravity:</strong>\n      {new Intl.NumberFormat().format(planet.gravity)} m/s<sup>2</sup>\n      ({new Intl.NumberFormat().format(Math.floor((planet.gravity / 9.81) * 100))}% Earth's gravity)\n    </p>\n    <p>\n      <strong>Orbital Period:</strong>\n      {new Intl.NumberFormat().format(Math.floor(planet.orbital_period))} days\n    </p>\n    <p>\n      <strong>Rotation Period (Length of Day):</strong>\n      {new Intl.NumberFormat().format(Math.floor(planet.rotation_period))} hours\n    </p>\n  {/if}\n</section>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/scifi.scss';\n\n  canvas {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n\n  #planet-render {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n</style>\n"],"names":["ctx","insert_hydration","target","option","anchor","t0_value","t3_value","t7_value","t11_value","t15_value","t19_value","t23_value","t28_value","t32_value","t39_value","t44_value","t48_value","attr","img","img_alt_value","src_url_equal","img_src_value","WebGLPlanetRenderer.render","width","height","h2","p0","p1","append_hydration","strong0","p2","strong1","p3","strong2","p4","strong3","p5","strong4","p6","strong5","sup0","p7","strong6","p8","strong7","sup1","p9","strong8","p10","strong9","dirty","set_data","t0","t3","t7","t11","t15","t19","t23","t28","t32","t37","t37_value","t39","t44","t48","t53","t53_value","t58","t58_value","i","create_if_block","add_render_callback","select","section","h1","p","div0","label0","input","div1","label1","button0","button1","planetTypes","Classifications.getClassificationNames","seed","RND.randomString","random","seedrandom","planetType","planetGenConfig","planet","generate","Classifications.all","classification","Classifications.getClassificationByName","Planets.generate","newSeed","onMount","PlanetGeneratorConfig","select_value"],"mappings":"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"}