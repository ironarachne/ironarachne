{"version":3,"file":"_page.svelte-XjTY8rI_.js","sources":["../../../../src/routes/star-system/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import * as RND from \"@ironarachne/rng\";\n  import * as WebGLStarRenderer from \"$lib/renderers/stars/webgl_star_renderer\";\n  import * as WebGLPlanetRenderer from \"$lib/renderers/planets/webgl_planet_renderer\";\n  import random from \"random\";\n  import seedrandom from \"seedrandom\";\n  import StarSystemGenerator from \"$lib/starsystem/generator\";\n  import StarSystemGeneratorConfig from \"$lib/starsystem/generatorconfig\";\n  import type StarSystem from \"$lib/starsystem/star_system\";\n  import { onMount } from 'svelte';\n\n  const width = 128;\n  const height = 128;\n\n  let seed = RND.randomString(13);\n  random.use(seedrandom(seed));\n\n  let config: StarSystemGeneratorConfig;\n  let generator: StarSystemGenerator;\n\n  let system: StarSystem;\n\n  function generate() {\n    random.use(seedrandom(seed));\n    system = generator.generate();\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  onMount(() => {\n    config = new StarSystemGeneratorConfig();\n    generator = new StarSystemGenerator(config);\n\t\tsystem = generator.generate();\n\t});\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/scifi.scss';\n\n  article.media-banner {\n    display: grid;\n    grid-template-columns: 128px auto;\n    column-gap: 1rem;\n  }\n</style>\n\n<svelte:head>\n  <title>Star System Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"main scifi\">\n  <h1>Star System Generator</h1>\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\" />\n  </div>\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  {#if system}\n  <h2>The {system.name} System</h2>\n\n  <p>{system.description}</p>\n\n  <h3>Stars</h3>\n\n  {#each system.stars as star}\n    <article class=\"media-banner\">\n      <div class=\"image-container\">\n        <img alt=\"{ star.name } image\" src=\"{ WebGLStarRenderer.render(star, width, height) }\" />\n      </div>\n      <div>\n        <h5>{star.name}</h5>\n        <p>{star.description}</p>\n        <p>\n          <strong>Radius:</strong>\n          {new Intl.NumberFormat().format(star.radius)} km\n        </p>\n        <p>\n          <strong>Mass:</strong>\n          {new Intl.NumberFormat().format(star.mass)} &times; 10<sup>30</sup> kg\n        </p>\n        <p>\n          <strong>Luminosity:</strong>\n          {new Intl.NumberFormat().format(star.luminosity)} &times; 10<sup\n            >26</sup\n          > W\n        </p>\n        <p>\n          <strong>Temperature:</strong>\n          {new Intl.NumberFormat().format(star.temperature)}K\n        </p>\n      </div>\n    </article>\n  {/each}\n\n  <h3>Planets</h3>\n\n  {#each system.planets as planet}\n    <article class=\"media-banner\">\n      <div class=\"image-container\">\n        <img alt=\"{ planet.name } image\" src=\"{ WebGLPlanetRenderer.render(planet, width, height) }\" />\n      </div>\n      <div>\n        <h5>{planet.name}</h5>\n        <p>{planet.description}</p>\n        <p><strong>Planet Type:</strong> {planet.classification.name}</p>\n        <p><strong>Population:</strong> {planet.populationFriendly}</p>\n        <p><strong>Culture:</strong> {planet.culture}</p>\n        <p><strong>Government:</strong> {planet.government}</p>\n        <p>\n          <strong>Distance from Star:</strong>\n          {new Intl.NumberFormat().format(planet.distance_from_sun)} AU\n        </p>\n        <p>\n          <strong>Mass:</strong>\n          {new Intl.NumberFormat().format(planet.mass)} &times; 10<sup>24</sup> kg\n        </p>\n        <p>\n          <strong>Diameter:</strong>\n          {new Intl.NumberFormat().format(Math.floor(planet.diameter))} km\n        </p>\n        <p>\n          <strong>Gravity:</strong>\n          {new Intl.NumberFormat().format(planet.gravity)} m/s<sup>2</sup> ({new Intl.NumberFormat().format(Math.floor(planet.gravity / 9.81 * 100))}% Earth gravity)\n        </p>\n        <p>\n          <strong>Orbital Period:</strong>\n          {new Intl.NumberFormat().format(Math.floor(planet.orbital_period))} days\n        </p>\n      </div>\n    </article>\n  {/each}\n  {/if}\n</section>\n"],"names":[],"mappings":";;;;;;;;;;;;;AAcA,EAAA,IAAM,IAAN,GAAa,GAAb,CAAiB,YAAjB,CAA8B,EAAE,CAAhC,CAAA;AACE,EAAF,MAAA,CAAS,GAAT,CAAa,UAAb,CAAwB,IAAI,CAAA,CAA5B,CAAA;;AA6C+C,EAA/C,OAA+C,CAA/C,EAA+C,QAA/C,CAA+C,IAA/C,IAA+C,CAA/C,iCAAA,EAA+C,QAA/C,CAA+C,KAA/C,GAA+C,CAA/C,mDAAA,CAAA,EAA+C,EAAA,CAA/C,+BAAA,CAAA,EAA+C,EAAA,CAA/C,8TAAA,EAA+C,aAA/C,CAA+C,OAA/C,EAA+C,IAA/C,EAAA,CAAA,CAAA,CAAA,kMAAA,EAAA,CAAA,CAAA,CAAA,UAAA,CAAA,CAAA;;;;;"}