{"version":3,"file":"_page.svelte-ef817fbc.js","sources":["../../../../src/routes/fantasy/religion/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { getContext } from 'svelte';\n  import * as MUN from \"@ironarachne/made-up-names\";\n  import * as RND from \"@ironarachne/rng\";\n  import * as FantasySpecies from \"$lib/species/fantasy.js\";\n  import * as CommonSpecies from \"$lib/species/common.js\";\n  import * as ReligionCategories from \"$lib/religion/categories/categories.js\";\n  import type Species from \"$lib/species/species\";\n  import random from \"random\";\n  import ReligionGenerator from \"$lib/religion/generator\";\n  import ReligionGeneratorConfig from \"$lib/religion/generatorconfig\";\n  import seedrandom from \"seedrandom\";\n  import type Culture from '$lib/culture/culture';\n\n  const user = getContext('user');\n\n  let humanNameGenSet = new MUN.HumanSet();\n  let savedCulture: string;\n  let useSavedCulture: boolean = false;\n  let culture: Culture;\n\n  let seed = RND.randomString(13);\n  random.use(seedrandom(seed));\n  let genConfig = new ReligionGeneratorConfig();\n  let generator = new ReligionGenerator(genConfig);\n  let religion = generator.generate();\n  let allSpeciesNames: string[] = [];\n  const allSpecies = FantasySpecies.all();\n  const allReligionCategories = ReligionCategories.all();\n  let allReligionCategoriesNames: string[] = [];\n\n  for (let i = 0; i < allSpecies.length; i++) {\n    allSpeciesNames.push(allSpecies[i].name);\n  }\n\n  for (let i = 0; i < allReligionCategories.length; i++) {\n    allReligionCategoriesNames.push(allReligionCategories[i].name);\n  }\n\n  let selectedSpecies: string[] = [\"human\"];\n  let selectedCategories: string[] = [\"polytheism\"];\n\n  function generate() {\n    random.use(seedrandom(seed));\n    if (humanNameGenSet.family === null) {\n      throw new Error(\"Name set does not have a family name generator.\")\n    }\n    if (humanNameGenSet.female === null) {\n      throw new Error(\"Name set does not have a female name generator.\")\n    }\n    if (humanNameGenSet.male === null) {\n      throw new Error(\"Name set does not have a male name generator.\")\n    }\n    let speciesOptions: Species[] = [];\n    for (let i=0;i<selectedSpecies.length;i++) {\n      speciesOptions.push(CommonSpecies.byName(selectedSpecies[i], allSpecies));\n    }\n\n    let categoryOptions = [];\n    for (let i=0;i<selectedCategories.length;i++) {\n      categoryOptions.push(ReligionCategories.byName(selectedCategories[i], allReligionCategories));\n    }\n\n    generator.config.deitySpeciesOptions = speciesOptions;\n    generator.config.categories = categoryOptions;\n    generator.config.nameGenerator = humanNameGenSet.family;\n    generator.config.femaleNameGenerator = humanNameGenSet.female;\n    generator.config.maleNameGenerator = humanNameGenSet.male;\n\n    if (useSavedCulture) {\n      loadSavedCulture();\n\n      if (culture.generatorSet.family !== null) {\n        generator.config.nameGenerator = culture.generatorSet.family;\n      }\n      if (culture.generatorSet.female !== null) {\n        generator.config.femaleNameGenerator = culture.generatorSet.female;\n      }\n      if (culture.generatorSet.male !== null) {\n        generator.config.maleNameGenerator = culture.generatorSet.male;\n      }\n    } else {\n      generator.config.nameGenerator = humanNameGenSet.family;\n      generator.config.femaleNameGenerator = humanNameGenSet.female;\n      generator.config.maleNameGenerator = humanNameGenSet.male;\n    }\n\n    religion = generator.generate();\n  }\n\n  function loadSavedCulture() {\n    for (let i = 0; i < user.savedCultures.length; i++) {\n      if (user.savedCultures[i].name === savedCulture) {\n        culture = user.savedCultures[i];\n      }\n    }\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/fantasy.scss';\n\n  .input-group {\n    ul > li {\n      list-style: none;\n    }\n  }\n</style>\n\n<svelte:head>\n  <title>Religion Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"fantasy main\">\n  <h1>Fantasy Religion Generator</h1>\n\n  <p>Generate a fictional fantasy religion.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"selected-categories\">Allow these religion categories</label>\n    {#each allReligionCategoriesNames as categoryName}\n    <ul>\n      <li><input type=\"checkbox\" name=\"selected-categories\" bind:group={selectedCategories} id=\"selected-categories\" value={categoryName} /> {categoryName}</li>\n    </ul>\n    {/each}\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"selected-species\">Allow deities of these species</label>\n    {#each allSpeciesNames as speciesName}\n    <ul>\n      <li><input type=\"checkbox\" name=\"selected-species\" bind:group={selectedSpecies} id=\"selected-species\" value={speciesName} /> {speciesName}</li>\n    </ul>\n    {/each}\n  </div>\n\n  {#if user.savedCultures !== undefined && user.savedCultures.length > 0}\n  <div class=\"input-group\">\n    <label for=\"useSavedCulture\">Use a saved culture for naming?</label>\n    <input type=\"checkbox\" name=\"useSavedCulture\" bind:checked={useSavedCulture} id=\"useSavedCulture\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"savedCulture\">Select a saved culture to load</label>\n    <select bind:value={savedCulture}>\n      {#each user.savedCultures as saved}\n      <option value={saved.name}>{ saved.name }</option>\n      {/each}\n    </select>\n  </div>\n  {/if}\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <h2>{religion.name}</h2>\n\n  <p>{religion.description}</p>\n\n  <h3>Realms</h3>\n\n  {#each religion.realms as realm}\n    <div>\n      <h4>{realm.name}</h4>\n      <p>{realm.description}</p>\n    </div>\n  {/each}\n\n  {#if religion.pantheon !== null}\n  <h3>Deities</h3>\n\n  <p>{religion.pantheon.description}</p>\n\n  {#each religion.pantheon.members as member}\n    <div>\n      <h4>{member.deity.name}</h4>\n\n      <p>{member.deity.titles.join(\",\")}</p>\n\n      <p><strong>Holy Item:</strong> {member.deity.holyItem}</p>\n      <p><strong>Holy Symbol:</strong> {member.deity.holySymbol}</p>\n\n      <p>{member.deity.description}</p>\n    </div>\n  {/each}\n  {/if}\n</section>\n"],"names":["ReligionCategories.all","FantasySpecies.all"],"mappings":"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"}