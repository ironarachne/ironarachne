{"version":3,"file":"_page.svelte-f2de8f39.js","sources":["../../../../src/routes/planet/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import * as RND from '@ironarachne/rng';\n  import * as Classifications from '$lib/planets/classifications';\n  import * as PlanetRenderer from '$lib/renderers/planets/planet-webgl';\n  import random from 'random';\n  import seedrandom from 'seedrandom';\n\n  import { onMount } from 'svelte';\n  import PlanetGeneratorConfig from '$lib/planets/generatorconfig';\n  import PlanetGenerator from '$lib/planets/generator';\n\n  let planetTypes = Classifications.getClassificationNames();\n\n  let seed = RND.randomString(13);\n  random.use(seedrandom(seed));\n  let planetType = 'random';\n  let planetGenConfig = new PlanetGeneratorConfig();\n  let planetGen = new PlanetGenerator(planetGenConfig);\n  let planet = planetGen.generate();\n  let planetImage: HTMLImageElement | null;\n\n  function generate() {\n    random.use(seedrandom(seed));\n\n    if (planetType == 'random') {\n      planetGen.config.possibleClassifications = Classifications.all();\n    } else {\n      let classification = Classifications.getClassificationByName(planetType);\n      if (classification !== undefined) {\n        planetGen.config.possibleClassifications = [\n        classification,\n      ];\n      }\n    }\n\n    planet = planetGen.generate();\n\n    if (planetImage !== null) {\n      planetImage.src = PlanetRenderer.render(planet, 600, 400);\n    }\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  onMount(() => {\n    planetImage = document.getElementById('planet-render') as HTMLImageElement;\n    newSeed();\n  });\n</script>\n\n<svelte:head>\n  <title>Planet Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"main scifi\">\n  <h1>Planet Generator</h1>\n\n  <p>This lets you generate a planet. It uses WebGL and your graphics card.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"planetType\">Planet Type</label>\n    <select bind:value={planetType} id=\"planetType\">\n      <option>random</option>\n      {#each planetTypes as pType}\n        <option>{pType}</option>\n      {/each}\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <h2>{planet.name}</h2>\n\n  <img alt=\"Planet\" id=\"planet-render\" />\n\n  <p>{planet.description}</p>\n\n  <p><strong>Planet Type:</strong> {planet.classification.name}</p>\n  <p><strong>Population:</strong> {planet.populationFriendly}</p>\n  <p><strong>Government:</strong> {planet.government}</p>\n  <p><strong>Culture:</strong> {planet.culture}</p>\n  <p>\n    <strong>Distance from Star:</strong>\n    {new Intl.NumberFormat().format(planet.distance_from_sun)} AU\n  </p>\n  <p>\n    <strong>Mass:</strong>\n    {new Intl.NumberFormat().format(planet.mass)} &times; 10<sup>24</sup> kg ({new Intl.NumberFormat().format(\n      Math.floor((planet.mass / 5.9722) * 100),\n    )}% Earth's mass)\n  </p>\n  <p>\n    <strong>Diameter:</strong>\n    {new Intl.NumberFormat().format(Math.floor(planet.diameter))} km ({new Intl.NumberFormat().format(\n      Math.floor((planet.diameter / 12756) * 100),\n    )}% Earth's diameter)\n  </p>\n  <p>\n    <strong>Gravity:</strong>\n    {new Intl.NumberFormat().format(planet.gravity)} m/s<sup>2</sup>\n    ({new Intl.NumberFormat().format(Math.floor((planet.gravity / 9.81) * 100))}% Earth's gravity)\n  </p>\n  <p>\n    <strong>Orbital Period:</strong>\n    {new Intl.NumberFormat().format(Math.floor(planet.orbital_period))} days\n  </p>\n</section>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/scifi.scss';\n\n  canvas {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n\n  #planet-render {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n</style>\n"],"names":["Classifications.getClassificationNames"],"mappings":";;;;;;;;;;;;;;AAWM,EAAN,IAAM,WAAN,GAAoBA,sBAApB,EAAA,CAAA;AAEA,EAAA,IAAM,IAAN,GAAa,GAAb,CAAiB,YAAjB,CAA8B,EAAE,CAAhC,CAAA;AACE,EAAF,MAAA,CAAS,GAAT,CAAa,UAAb,CAAwB,IAAI,CAAA,CAA5B,CAAA;AAEA,EAAA,IAAM,eAAN,GAA4B,IAAA,qBAA5B,EAAA,CAAA;AACM,EAAN,IAAM,SAAN,GAAM,IAAgB,eAAtB,CAAsC,eAAe,CAArD,CAAA;AACM,EAAN,IAAM,MAAN,GAAe,SAAf,CAAyB,QAAzB,EAAA,CAAA;;AA8C+C,EAA/C,OAA+C,CAA/C,EAA+C,QAA/C,CAA+C,IAA/C,IAA+C,CAA/C,kCAAA,EAA+C,QAA/C,CAA+C,KAA/C,GAA+C,CAA/C,8CAAA,CAAA,EAA+C,EAAA,CAA/C,gCAAA,CAAA,EAA+C,EAAA,CAA/C,icAAA,EAA+C,aAA/C,CAA+C,OAA/C,EAA+C,IAA/C,EAAA,CAAA,CAAA,CAAA,qQAAA,EAAA,IAAA,CAOa,WAPb,EAOwB,CAPxB,KAAA,KAOwB;AACP,IAAjB,OAAiB,CAAjB,OAAA,EAAiB,aAAjB,CAAiB,OAAjB,EAAiB,KAAjB,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAiB,KAAK,CAAA,CAAtB,SAAA,CAAA,CAAA;AAAsB,GAAtB,CAAA,CAAA,uOAAA,EAAA,MAAA,CAQO,MARP,CAQc,IAAI,CAIZ,CAZN,6FAAA,EAYM,MAZN,CAYM,MAZN,CAYa,WAAW,CAAA,CAZxB,mHAAA,EAYwB,MAZxB,CAcoC,MAdpC,CAc2C,cAd3C,CAc0D,IAAI,CAC3B,CAfnC,iHAAA,EAemC,MAfnC,CAemC,MAfnC,CAe0C,kBAAkB,CAAA,CAf5D,kHAAA,EAe4D,MAf5D,CAgBmC,MAhBnC,CAgB0C,UAAU,CACpB,CAjBhC,8GAAA,EAiBgC,MAjBhC,CAiBgC,MAjBhC,CAiBuC,OAAO,CAjB9C,CAAA,0HAAA,EAAA,MAAA,CAAA,IAoBS,IApBT,CAoBc,YApBd,EAAA,CAoB6B,MApB7B,CAoBoC,MApBpC,CAoB2C,iBAAiB,CAAA,CAAA,CApB5D,+GAAA,EAoB4D,MApB5D,CAoB4D,IAInD,IAxBT,CAwBc,YAxBd,EAAA,CAwB6B,MAxB7B,CAwBoC,MAxBpC,CAwB2C,IAAI,CAxB/C,CAAA,CAAA,6EAAA,EAAA,MAAA,CAAA,IAwBmF,IAxBnF,CAwBwF,YAxBxF,EAAA,CAwBuG,MAxBvG,CAyBM,IAzBN,CAyBW,KAzBX,CAyBkB,MAzBlB,CAyByB,IAzBzB,GAyBgC,MAzBhC,GAyB0C,GAAG,CAKpC,CAAA,CAAA,CA9BT,mIAAA,EA8BS,MA9BT,CA8BS,IAAA,IA9BT,CA8Bc,YA9Bd,EAAA,CA8B6B,MA9B7B,CA8BoC,IA9BpC,CA8ByC,KA9BzC,CA8B+C,MA9B/C,CA8BsD,QAAQ,CAAa,CAAA,CAAA,CA9B3E,KAAA,EA8B2E,MA9B3E,CA8B2E,IAAA,IA9B3E,CA8BgF,YA9BhF,EAAA,CA8B+F,MA9B/F,CA+BM,IA/BN,CA+BW,KA/BX,CA+BkB,MA/BlB,CA+ByB,QA/BzB,GA+BoC,KA/BpC,GA+B6C,GAAG,CAKvC,CAAA,CAAA,CApCT,qIAAA,EAoCS,MApCT,CAoCS,IAAA,IApCT,CAoCc,YApCd,EAAA,CAoC6B,MApC7B,CAoCoC,MApCpC,CAoC2C,OAAO,CAAA,CAAA,CApClD;AAoCkD,KAAlD,EACU,MADV,CACU,IAAA,IADV,CACe,YADf,EAAA,CAC8B,MAD9B,CACqC,IADrC,CAC0C,KAD1C,CACiD,MADjD,CACwD,OADxD,GACkE,IADlE,GAC0E,GAAG,CAIpE,CAAA,CAAA,CALT,4IAAA,EAKS,MALT,CAKS,IAAA,IALT,CAKc,YALd,EAAA,CAK6B,MAL7B,CAKoC,IALpC,CAKyC,KALzC,CAK+C,MAL/C,CAKsD,cAAc,CAAA,CAAA,CAAA,CALpE,oBAAA,CAAA,CAAA;;;;;"}