{"version":3,"file":"generator.zj200H-7.js","sources":["../../../../../../node_modules/@ironarachne/word-generator/dist/elementset.js","../../../../../../node_modules/@ironarachne/word-generator/dist/elements.js","../../../../../../node_modules/@ironarachne/word-generator/dist/generator.js"],"sourcesContent":["/**\n * WordElementSet class\n *\n * @since 1.0.0\n * @class\n * @classdesc Represents a set of word elements.\n * @property {string} name The name of the set.\n * @property {string} symbol The symbol used to represent the set in word patterns.\n * @property {string[]} elements The written elements in the set.\n *\n * @example\n * ```typescript\n * import { WordElementSet } from \"@ironarachne/word-generator\";\n *\n * const set = new WordElementSet(\"affricates\", \"a\", [\"ch\", \"j\"]);\n * ```\n */\nexport default class WordElementSet {\n    constructor(name, symbol, elements) {\n        this.name = name;\n        this.symbol = symbol;\n        this.elements = elements;\n    }\n}\n","import WordElementSet from \"./elementset.js\";\n/**\n * All available word elements. These are used in constructing patterns for word generation.\n *\n * @type {WordElementSet[]}\n * @since 1.0.0\n */\nexport const allElements = [\n    new WordElementSet(\"affricates\", \"a\", [\"ch\", \"j\"]),\n    new WordElementSet(\"voiced dental plosive\", \"b\", [\"d\", \"dh\"]),\n    new WordElementSet(\"consonants\", \"c\", [\n        \"b\",\n        \"c\",\n        \"d\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n    ]),\n    new WordElementSet(\"dentals\", \"e\", [\"d\", \"n\", \"t\", \"l\"]),\n    new WordElementSet(\"fricatives\", \"f\", [\"f\", \"v\"]),\n    new WordElementSet(\"voiceless dental plosives\", \"h\", [\"t\", \"th\"]),\n    new WordElementSet(\"voiceless\", \"i\", [\"h\", \"f\"]),\n    new WordElementSet(\"velar plosives\", \"k\", [\"c\", \"k\"]),\n    new WordElementSet(\"liquids\", \"l\", [\"l\", \"r\"]),\n    new WordElementSet(\"close mid vowels\", \"m\", [\"i\", \"ö\", \"eu\", \"oe\", \"e\"]),\n    new WordElementSet(\"nasals\", \"n\", [\"m\", \"n\", \"ng\"]),\n    new WordElementSet(\"stops\", \"o\", [\"t\", \"d\", \"p\"]),\n    new WordElementSet(\"plosives\", \"p\", [\"g\", \"k\", \"p\", \"b\", \"t\", \"d\", \"q\"]),\n    new WordElementSet(\"sibilants\", \"s\", [\"s\", \"sh\", \"z\", \"zh\"]),\n    new WordElementSet(\"stridents\", \"t\", [\"f\", \"v\", \"s\", \"sh\", \"z\", \"zh\"]),\n    new WordElementSet(\"vowels\", \"v\", [\"a\", \"e\", \"i\", \"o\", \"u\"]),\n    new WordElementSet(\"velars\", \"w\", [\"w\", \"wh\", \"g\"]),\n    new WordElementSet(\"accented vowels\", \"x\", [\"á\", \"é\", \"í\", \"ó\", \"ú\"]),\n    new WordElementSet(\"open vowels\", \"y\", [\"e\", \"ee\", \"i\", \"oo\", \"y\", \"ie\"]),\n];\n","import * as RND from \"@ironarachne/rng\";\nimport { allElements } from \"./elements.js\";\n/**\n * A word generator.\n *\n * @remarks After initializing the word generator by adding patterns to the internal patterns array, you can generate words by calling the generate method.\n *\n * @example Generating a word\n * ```typescript\n * import { WordGenerator } from \"@ironarachne/word-generator\";\n *\n * const generator = new WordGenerator();\n * generator.patterns.push(\"vccv\");\n * generator.patterns.push(\"vccvc\");\n *\n * const word = generator.generate();\n * ```\n */\nexport default class WordGenerator {\n    constructor() {\n        this.patterns = [];\n    }\n    generate() {\n        const pattern = RND.item(this.patterns);\n        let word = \"\";\n        const phonemes = [];\n        for (let i = 0; i < pattern.length; i++) {\n            let phoneme = pattern[i];\n            if (pattern[i] === \"+\") {\n                phoneme = phonemes[i - 1];\n            }\n            else if (pattern[i] === \"(\") {\n                i++;\n                const parts = [];\n                let foundEnd = false;\n                let part = \"\";\n                while (!foundEnd) {\n                    if (pattern[i] === \")\") {\n                        foundEnd = true;\n                        parts.push(part);\n                    }\n                    else if (pattern[i] === \",\") {\n                        parts.push(part);\n                        part = \"\";\n                        i++;\n                    }\n                    else {\n                        part += pattern[i];\n                        i++;\n                    }\n                }\n                const element = RND.item(parts);\n                phoneme = \"\";\n                for (let j = 0; j < element.length; j++) {\n                    phoneme += parsePatternElement(element[j]);\n                }\n            }\n            else {\n                phoneme = parsePatternElement(pattern[i]);\n            }\n            word += phoneme;\n            phonemes.push(phoneme);\n        }\n        return word;\n    }\n}\nfunction parsePatternElement(element) {\n    for (let i = 0; i < allElements.length; i++) {\n        if (element === allElements[i].symbol) {\n            return RND.item(allElements[i].elements);\n        }\n    }\n    return element.toLowerCase();\n}\n"],"names":["WordElementSet","name","symbol","elements","allElements","WordGenerator","pattern","RND.item","word","phonemes","i","phoneme","parts","foundEnd","part","element","j","parsePatternElement"],"mappings":"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"}