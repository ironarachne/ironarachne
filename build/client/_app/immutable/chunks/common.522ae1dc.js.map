{"version":3,"file":"common.522ae1dc.js","sources":["../../../../../../src/lib/species/modifiers/skeleton.ts","../../../../../../src/lib/species/modifiers/vampire.ts","../../../../../../src/lib/species/modifiers/zombie.ts","../../../../../../src/lib/species/common.ts"],"sourcesContent":["\"use strict\";\n\nimport * as _ from \"lodash\";\nimport type Species from \"../species.js\";\n\nexport function modify(species: Species): Species {\n  let result = _.cloneDeep(species);\n\n  let modifierName = \"skeletal\";\n\n  result.name = `${modifierName} ${result.name}`;\n  result.pluralName = `${modifierName} ${result.pluralName}`;\n  result.adjective = `${modifierName} ${result.adjective}`;\n  result.abilities.push(\"unharmed by piercing damage\");\n  result.tags.push(\"skeleton\");\n  result.tags.push(\"undead\");\n  result.threatLevel += 1;\n\n  return result;\n}\n","\"use strict\";\n\nimport * as _ from \"lodash\";\nimport type Species from \"../species.js\";\n\nexport function modify(species: Species): Species {\n  let result = _.cloneDeep(species);\n\n  let modifierName = \"vampire\";\n\n  result.name = `${modifierName} ${result.name}`;\n  result.pluralName = `${modifierName} ${result.pluralName}`;\n  result.adjective = `${modifierName} ${result.adjective}`;\n  result.abilities.push(\"drain blood to gain life\");\n  result.abilities.push(\"transform into a bat\");\n  result.abilities.push(\"transform into a wolf\");\n  result.abilities.push(\"transform into mist\");\n  result.abilities.push(\"see in the dark\");\n  result.abilities.push(\"can only be killed by a stake through the heart or by direct sunlight\");\n  result.tags.push(\"vampire\");\n  result.tags.push(\"undead\");\n  result.threatLevel += 5;\n\n  return result;\n}\n","\"use strict\";\n\nimport * as _ from \"lodash\";\nimport type Species from \"../species.js\";\n\nexport function modify(species: Species): Species {\n  let result = _.cloneDeep(species);\n\n  let modifierName = \"zombie\";\n\n  result.name = `${modifierName} ${result.name}`;\n  result.pluralName = `${modifierName} ${result.pluralName}`;\n  result.adjective = `${modifierName} ${result.adjective}`;\n  result.abilities.push(\"can only be killed by removing the head\");\n\n  let newTags = [];\n\n  for (let i = 0; i < result.tags.length; i++) {\n    if (result.tags[i] != \"sentient\") {\n      newTags.push(result.tags[i]);\n    }\n  }\n\n  result.tags = newTags;\n\n  result.abilities.push(\"can bite others to transform them into zombies\");\n  result.tags.push(\"zombie\");\n  result.tags.push(\"undead\");\n  result.threatLevel += 1;\n\n  return result;\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Skeleton from \"./modifiers/skeleton.js\";\nimport * as Vampire from \"./modifiers/vampire.js\";\nimport * as Zombie from \"./modifiers/zombie.js\";\nimport type Species from \"./species.js\";\n\nexport function byAnyTag(tags: string[], options: Species[]): Species[] {\n  let result = [];\n\n  let unique = true;\n\n  for (let i = 0; i < options.length; i++) {\n    unique = true;\n    for (let j = 0; j < tags.length; j++) {\n      if (options[i].tags.includes(tags[j]) && unique) {\n        result.push(options[i]);\n        unique = false;\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function byEnvironment(environment: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].environments.includes(environment) || options[i].environments.length == 0) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function byTag(tag: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].tags.includes(tag)) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function getModifiedVariants(options: Species[]): Species[] {\n  let result: Species[] = [];\n\n  result = result.concat(getSkeletonVariants(options));\n  result = result.concat(getVampireVariants(options));\n  result = result.concat(getZombieVariants(options));\n\n  return result;\n}\n\nexport function getSkeletonVariants(options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    let skeleton = Skeleton.modify(options[i]);\n    result.push(skeleton);\n  }\n\n  return result;\n}\n\nexport function getVampireVariants(options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    let vampire = Vampire.modify(options[i]);\n    result.push(vampire);\n  }\n\n  return result;\n}\n\nexport function getZombieVariants(options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    let zombie = Zombie.modify(options[i]);\n    result.push(zombie);\n  }\n\n  return result;\n}\n\nexport function randomUniqueSet(options: Species[], count: number): Species[] {\n  let result: Species[] = [];\n\n  options = RND.shuffle(options);\n\n  if (options.length >= count) {\n    for (let i = 0; i < count; i++) {\n      let item: Species | undefined = options.pop();\n      if (item !== undefined) {\n        result.push(item);\n      }\n    }\n  } else {\n    throw new Error(\"Not enough options to choose from.\");\n  }\n\n  return result;\n}\n\nexport function randomWeighted(options: Species[]): Species {\n  return RND.weighted(options);\n}\n\nexport function withCreatureType(creatureType: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (options[i].creatureTypes.includes(creatureType)) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n\nexport function withoutTag(tag: string, options: Species[]): Species[] {\n  let result = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (!options[i].tags.includes(tag)) {\n      result.push(options[i]);\n    }\n  }\n\n  return result;\n}\n"],"names":["modify","species","result","_.cloneDeep","modifierName","newTags","i","byTag","tag","options","getSkeletonVariants","skeleton","Skeleton.modify","getVampireVariants","vampire","Vampire.modify","getZombieVariants","zombie","Zombie.modify","randomUniqueSet","count","RND.shuffle","item","randomWeighted","RND.weighted","withCreatureType","creatureType"],"mappings":"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"}