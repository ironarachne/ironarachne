{"version":3,"file":"generator_sets.eaMUEG37.js","sources":["../../../../../../node_modules/@ironarachne/made-up-names/dist/cultures.js","../../../../../../node_modules/@ironarachne/made-up-names/dist/races.js","../../../../../../node_modules/@ironarachne/made-up-names/dist/generator_sets.js"],"sourcesContent":["import easterling from \"./cultures/easterling.js\";\nimport fantasy from \"./cultures/fantasy.js\";\nimport forest_dweller from \"./cultures/forest_dweller.js\";\nimport gem_tinkerer from \"./cultures/gem_tinkerer.js\";\nimport hill_feaster from \"./cultures/hill_feaster.js\";\nimport metal_miner from \"./cultures/metal_miner.js\";\nimport mud_grubber from \"./cultures/mud_grubber.js\";\nimport old_worlder from \"./cultures/old_worlder.js\";\nimport scale_bearer from \"./cultures/scale_bearer.js\";\nimport war_bringer from \"./cultures/war_bringer.js\";\n/**\n * Returns generator sets for all cultures.\n *\n * @returns {GeneratorSet[]} Generator sets for all cultures.\n * @since 0.0.0\n */\nexport function all() {\n    return [\n        easterling,\n        fantasy,\n        forest_dweller,\n        gem_tinkerer,\n        hill_feaster,\n        metal_miner,\n        mud_grubber,\n        old_worlder,\n        scale_bearer,\n        war_bringer,\n    ];\n}\n","import pkg from \"lodash\";\nconst { cloneDeep } = pkg;\nimport fantasy from \"./cultures/fantasy.js\";\nimport forest_dweller from \"./cultures/forest_dweller.js\";\nimport gem_tinkerer from \"./cultures/gem_tinkerer.js\";\nimport hill_feaster from \"./cultures/hill_feaster.js\";\nimport metal_miner from \"./cultures/metal_miner.js\";\nimport mud_grubber from \"./cultures/mud_grubber.js\";\nimport scale_bearer from \"./cultures/scale_bearer.js\";\nimport war_bringer from \"./cultures/war_bringer.js\";\n/**\n * Returns a set of name generators using the conventional \"race is culture\" paradigm from old-school D&D.\n *\n * @returns {GeneratorSet[]} Array of name generator sets\n */\nexport function all() {\n    const elf = cloneDeep(forest_dweller);\n    elf.name = \"elf\";\n    const dwarf = cloneDeep(metal_miner);\n    dwarf.name = \"dwarf\";\n    const dragonborn = cloneDeep(scale_bearer);\n    dragonborn.name = \"dragonborn\";\n    const gnome = cloneDeep(gem_tinkerer);\n    gnome.name = \"gnome\";\n    const goblin = cloneDeep(mud_grubber);\n    goblin.name = \"goblin\";\n    const halfling = cloneDeep(hill_feaster);\n    halfling.name = \"halfling\";\n    const half_elf = cloneDeep(fantasy);\n    half_elf.name = \"half-elf\";\n    const half_orc = cloneDeep(fantasy);\n    half_orc.name = \"half-orc\";\n    const human = cloneDeep(fantasy);\n    human.name = \"human\";\n    const orc = cloneDeep(war_bringer);\n    orc.name = \"orc\";\n    const tiefling = cloneDeep(fantasy);\n    tiefling.name = \"tiefling\";\n    const troll = cloneDeep(war_bringer);\n    troll.name = \"troll\";\n    return [\n        dragonborn,\n        dwarf,\n        elf,\n        gnome,\n        goblin,\n        half_elf,\n        half_orc,\n        halfling,\n        human,\n        orc,\n        tiefling,\n        troll,\n    ];\n}\n","import * as Cultures from \"./cultures.js\";\nimport * as Races from \"./races.js\";\n/**\n * Returns generator sets for all cultures and races.\n *\n * @returns {GeneratorSet[]} All generator sets\n */\nexport function all() {\n    const cultures = Cultures.all();\n    const races = Races.all();\n    let result = [];\n    result = result.concat(cultures);\n    result = result.concat(races);\n    return result;\n}\n/**\n * Returns a generator set by name.\n *\n * @param {string} name Name of the generator set.\n * @param {GeneratorSet[]} sets Generator sets.\n * @returns {GeneratorSet} Generator set with the given name.\n */\nexport function getSetByName(name, sets) {\n    for (let i = 0; i < sets.length; i++) {\n        if (sets[i].name === name) {\n            return sets[i];\n        }\n    }\n    throw new Error(`failed to find set with name: ${name}`);\n}\n"],"names":["all","easterling","fantasy","forest_dweller","gem_tinkerer","hill_feaster","metal_miner","mud_grubber","old_worlder","scale_bearer","war_bringer","cloneDeep","pkg","elf","dwarf","dragonborn","gnome","goblin","halfling","half_elf","half_orc","human","orc","tiefling","troll","cultures","Cultures.all","races","Races.all","result","getSetByName","name","sets","i"],"mappings":"+GAgBO,SAASA,GAAM,CAClB,MAAO,CACHC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,CACR,CACA,CC5BA,KAAM,CAAE,UAAAC,CAAW,EAAGC,EAcf,SAASZ,GAAM,CAClB,MAAMa,EAAMF,EAAUR,CAAc,EACpCU,EAAI,KAAO,MACX,MAAMC,EAAQH,EAAUL,CAAW,EACnCQ,EAAM,KAAO,QACb,MAAMC,EAAaJ,EAAUF,CAAY,EACzCM,EAAW,KAAO,aAClB,MAAMC,EAAQL,EAAUP,CAAY,EACpCY,EAAM,KAAO,QACb,MAAMC,EAASN,EAAUJ,CAAW,EACpCU,EAAO,KAAO,SACd,MAAMC,EAAWP,EAAUN,CAAY,EACvCa,EAAS,KAAO,WAChB,MAAMC,EAAWR,EAAUT,CAAO,EAClCiB,EAAS,KAAO,WAChB,MAAMC,EAAWT,EAAUT,CAAO,EAClCkB,EAAS,KAAO,WAChB,MAAMC,EAAQV,EAAUT,CAAO,EAC/BmB,EAAM,KAAO,QACb,MAAMC,EAAMX,EAAUD,CAAW,EACjCY,EAAI,KAAO,MACX,MAAMC,EAAWZ,EAAUT,CAAO,EAClCqB,EAAS,KAAO,WAChB,MAAMC,EAAQb,EAAUD,CAAW,EACnC,OAAAc,EAAM,KAAO,QACN,CACHT,EACAD,EACAD,EACAG,EACAC,EACAE,EACAC,EACAF,EACAG,EACAC,EACAC,EACAC,CACR,CACA,CC/CO,SAASxB,GAAM,CAClB,MAAMyB,EAAWC,IACXC,EAAQC,IACd,IAAIC,EAAS,CAAA,EACb,OAAAA,EAASA,EAAO,OAAOJ,CAAQ,EAC/BI,EAASA,EAAO,OAAOF,CAAK,EACrBE,CACX,CAQO,SAASC,EAAaC,EAAMC,EAAM,CACrC,QAASC,EAAI,EAAGA,EAAID,EAAK,OAAQC,IAC7B,GAAID,EAAKC,CAAC,EAAE,OAASF,EACjB,OAAOC,EAAKC,CAAC,EAGrB,MAAM,IAAI,MAAM,iCAAiCF,CAAI,EAAE,CAC3D"}