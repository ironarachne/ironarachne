{"version":3,"file":"index.bd2dd152.js","sources":["../../../../../../node_modules/@ironarachne/words/dist/index.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.romanize = exports.removeEntry = exports.pronoun = exports.getOrdinal = exports.title = exports.uncapitalize = exports.capitalize = exports.arrayToPhrase = exports.article = void 0;\nfunction article(word, appendWord = false) {\n    /**\n     * This function returns the correct article for a given word.\n     *\n     * @param {string} word - The word to get the article for.\n     * @param {boolean} appendWord - Whether or not to append the word to the article.\n     * @returns {string} The article for the given word.\n     */\n    const exceptions = ['honor', 'honest', 'herb'];\n    if (exceptions.includes(word)) {\n        if (appendWord) {\n            return `an ${word}`;\n        }\n        return 'an';\n    }\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(word.substring(0, 1))) {\n        if (appendWord) {\n            return `an ${word}`;\n        }\n        return 'an';\n    }\n    else {\n        if (appendWord) {\n            return `a ${word}`;\n        }\n        return 'a';\n    }\n}\nexports.article = article;\nfunction arrayToPhrase(words) {\n    /**\n     * This function takes an array of words and returns a phrase connected by commas and the word 'and'.\n     *\n     * @param {string[]} words - The array of words to convert to a phrase.\n     * @returns {string} The phrase.\n     */\n    if (words.length === 1) {\n        return words[0];\n    }\n    else if (words.length === 2) {\n        return words[0] + ' and ' + words[1];\n    }\n    let phrase = '';\n    for (let i = 0; i < words.length; i++) {\n        if (i === words.length - 1) {\n            if (words.length > 2) {\n                phrase += ',';\n            }\n            phrase += ' and ' + words[i];\n        }\n        else if (i === 0) {\n            phrase = words[i];\n        }\n        else {\n            phrase += ', ' + words[i];\n        }\n    }\n    return phrase;\n}\nexports.arrayToPhrase = arrayToPhrase;\nfunction capitalize(word) {\n    /**\n     * This function capitalizes the first letter of a word.\n     *\n     * @param {string} word - The word to capitalize.\n     * @returns {string} The capitalized word.\n     */\n    return word[0].toUpperCase() + word.slice(1);\n}\nexports.capitalize = capitalize;\nfunction uncapitalize(word) {\n    /**\n     * This function uncapitalizes the first letter of a word.\n     *\n     * @param {string} word - The word to uncapitalize.\n     * @returns {string} The uncapitalized word.\n     */\n    return word[0].toLowerCase() + word.slice(1);\n}\nexports.uncapitalize = uncapitalize;\nfunction title(phrase) {\n    /**\n     * This function capitalizes the first letter of each word in a phrase.\n     *\n     * @param {string} phrase - The phrase to capitalize.\n     * @returns {string} The capitalized phrase.\n     */\n    let elements = phrase.split(' ');\n    let result = '';\n    for (let i = 0; i < elements.length; i++) {\n        if (i != 0 && ['of', 'the', 'a'].includes(elements[i])) {\n            result += elements[i].toLowerCase() + ' ';\n        }\n        else {\n            result += capitalize(elements[i]) + ' ';\n        }\n    }\n    result = result.trimEnd();\n    return result;\n}\nexports.title = title;\nfunction getOrdinal(number) {\n    /**\n     * This function returns the ordinal suffix for a given number.\n     *\n     * @param {number} number - The number to get the ordinal suffix for.\n     * @returns {string} The ordinal suffix for the given number.\n     */\n    if (number > 3 && number < 21) {\n        return 'th';\n    }\n    const lastDigitOfNumber = number % 10;\n    switch (lastDigitOfNumber) {\n        case 1:\n            return 'st';\n        case 2:\n            return 'nd';\n        case 3:\n            return 'rd';\n        default:\n            return 'th';\n    }\n}\nexports.getOrdinal = getOrdinal;\nfunction pronoun(gender, wordCase) {\n    /**\n     * This function returns the pronoun for a given gender and word case.\n     *\n     * @param {string} gender - The gender to get the pronoun for.\n     * @param {string} wordCase - The word case to get the pronoun for.\n     * @returns {string} The pronoun.\n     */\n    let pronoun = '';\n    if (gender === 'female') {\n        if (wordCase === 'subjective') {\n            pronoun = 'she';\n        }\n        else if (wordCase === 'possessive') {\n            pronoun = 'her';\n        }\n        else if (wordCase === 'objective') {\n            pronoun = 'her';\n        }\n    }\n    else {\n        if (wordCase === 'subjective') {\n            pronoun = 'he';\n        }\n        else if (wordCase === 'possessive') {\n            pronoun = 'his';\n        }\n        else if (wordCase === 'objective') {\n            pronoun = 'him';\n        }\n    }\n    return pronoun;\n}\nexports.pronoun = pronoun;\nfunction removeEntry(word, words) {\n    /**\n     * This function removes a word from an array of words.\n     *\n     * @param {string} word - The word to remove.\n     * @param {string[]} words - The array of words to remove the word from.\n     * @returns {string[]} The array of words with the word removed.\n     */\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i] != word) {\n            newWords.push(words[i]);\n        }\n    }\n    return newWords;\n}\nexports.removeEntry = removeEntry;\nfunction romanize(num) {\n    /**\n     * This function converts a number to a roman numeral.\n     *\n     * @param {number} num - The number to convert.\n     * @returns {string} The roman numeral.\n     */\n    if (isNaN(num))\n        return NaN;\n    const digits = String(+num).split('');\n    const key = [\n        '',\n        'C',\n        'CC',\n        'CCC',\n        'CD',\n        'D',\n        'DC',\n        'DCC',\n        'DCCC',\n        'CM',\n        '',\n        'X',\n        'XX',\n        'XXX',\n        'XL',\n        'L',\n        'LX',\n        'LXX',\n        'LXXX',\n        'XC',\n        '',\n        'I',\n        'II',\n        'III',\n        'IV',\n        'V',\n        'VI',\n        'VII',\n        'VIII',\n        'IX',\n    ];\n    let roman = '';\n    let i = 3;\n    while (i--) {\n        if (digits.length > 0) {\n            const digit = digits.pop();\n            if (typeof digit == 'string') {\n                roman = (key[+digit + i * 10] || '') + roman;\n            }\n        }\n    }\n    return Array(+digits.join('') + 1).join('M') + roman;\n}\nexports.romanize = romanize;\n"],"names":["dist","romanize_1","getOrdinal_1","title_1","uncapitalize_1","capitalize_1","arrayToPhrase_1","article_1","article","word","appendWord","arrayToPhrase","words","phrase","capitalize","uncapitalize","title","elements","result","i","getOrdinal","number","pronoun","gender","wordCase","removeEntry","newWords","romanize","num","digits","key","roman","digit"],"mappings":"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"}