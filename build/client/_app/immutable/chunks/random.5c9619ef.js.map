{"version":3,"file":"random.5c9619ef.js","sources":["../../../../../../node_modules/random/dist/esm/rng.js","../../../../../../node_modules/random/dist/esm/generators/function.js","../../../../../../node_modules/random/dist/esm/rng-factory.js","../../../../../../node_modules/random/dist/esm/distributions/uniform.js","../../../../../../node_modules/random/dist/esm/validation.js","../../../../../../node_modules/random/dist/esm/distributions/uniform-int.js","../../../../../../node_modules/random/dist/esm/distributions/uniform-boolean.js","../../../../../../node_modules/random/dist/esm/distributions/normal.js","../../../../../../node_modules/random/dist/esm/distributions/log-normal.js","../../../../../../node_modules/random/dist/esm/distributions/bernoulli.js","../../../../../../node_modules/random/dist/esm/distributions/binomial.js","../../../../../../node_modules/random/dist/esm/distributions/geometric.js","../../../../../../node_modules/random/dist/esm/distributions/poisson.js","../../../../../../node_modules/random/dist/esm/distributions/exponential.js","../../../../../../node_modules/random/dist/esm/distributions/irwin-hall.js","../../../../../../node_modules/random/dist/esm/distributions/bates.js","../../../../../../node_modules/random/dist/esm/distributions/pareto.js","../../../../../../node_modules/random/dist/esm/generators/math-random.js","../../../../../../node_modules/random/dist/esm/random.js"],"sourcesContent":["export default class RNG {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _seed(seed, _opts) {\n        // TODO: add entropy and stuff\n        if (seed === (seed || 0)) {\n            return seed;\n        }\n        else {\n            const strSeed = '' + seed;\n            let s = 0;\n            for (let k = 0; k < strSeed.length; ++k) {\n                s ^= strSeed.charCodeAt(k) | 0;\n            }\n            return s;\n        }\n    }\n}\n//# sourceMappingURL=rng.js.map","import RNG from '../rng';\nexport default class RNGFunction extends RNG {\n    constructor(thunk, opts) {\n        super();\n        this.seed(thunk, opts);\n    }\n    get name() {\n        return 'function';\n    }\n    next() {\n        return this._rng();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    seed(thunk, _opts) {\n        this._rng = thunk;\n    }\n    clone(_, opts) {\n        return new RNGFunction(this._rng, opts);\n    }\n}\n//# sourceMappingURL=function.js.map","import seedrandom from 'seedrandom';\nimport RNG from './rng';\nimport RNGFunction from './generators/function';\n/**\n * Construct an RNG with variable inputs. Used in calls to Random constructor\n * @param {...*} args - Distribution-specific arguments\n * @return RNG\n *\n * @example\n * new Random(RNGFactory(...args))\n */\nexport default (...args) => {\n    const [arg0 = 'default', ...rest] = args;\n    switch (typeof arg0) {\n        case 'object':\n            if (arg0 instanceof RNG) {\n                return arg0;\n            }\n            break;\n        case 'function':\n            return new RNGFunction(arg0);\n        case 'number':\n        case 'string':\n            return new RNGFunction(seedrandom(...rest));\n    }\n    throw new Error(`invalid RNG \"${arg0}\"`);\n};\n//# sourceMappingURL=rng-factory.js.map","export default (random, min = 0, max = 1) => {\n    return () => {\n        return random.next() * (max - min) + min;\n    };\n};\n//# sourceMappingURL=uniform.js.map","export function numberValidator(num) {\n    return new NumberValidator(num);\n}\nexport class NumberValidator {\n    constructor(num) {\n        this.isInt = () => {\n            if (Number.isInteger(this.n)) {\n                return this;\n            }\n            throw new Error(`Expected number to be an integer, got ${this.n}`);\n        };\n        this.isPositive = () => {\n            if (this.n > 0) {\n                return this;\n            }\n            throw new Error(`Expected number to be positive, got ${this.n}`);\n        };\n        this.lessThan = (v) => {\n            if (this.n < v) {\n                return this;\n            }\n            throw new Error(`Expected number to be less than ${v}, got ${this.n}`);\n        };\n        this.greaterThanOrEqual = (v) => {\n            if (this.n >= v) {\n                return this;\n            }\n            throw new Error(`Expected number to be greater than or equal to ${v}, got ${this.n}`);\n        };\n        this.greaterThan = (v) => {\n            if (this.n > v) {\n                return this;\n            }\n            throw new Error(`Expected number to be greater than ${v}, got ${this.n}`);\n        };\n        this.n = num;\n    }\n}\n//# sourceMappingURL=validation.js.map","import { numberValidator } from '../validation';\nexport default (random, min = 0, max = 1) => {\n    if (max === undefined) {\n        max = min === undefined ? 1 : min;\n        min = 0;\n    }\n    numberValidator(min).isInt();\n    numberValidator(max).isInt();\n    return () => {\n        return Math.floor(random.next() * (max - min + 1) + min);\n    };\n};\n//# sourceMappingURL=uniform-int.js.map","export default (random) => {\n    return () => {\n        return random.next() >= 0.5;\n    };\n};\n//# sourceMappingURL=uniform-boolean.js.map","export default (random, mu = 0, sigma = 1) => {\n    return () => {\n        let x, y, r;\n        do {\n            x = random.next() * 2 - 1;\n            y = random.next() * 2 - 1;\n            r = x * x + y * y;\n        } while (!r || r > 1);\n        return mu + sigma * y * Math.sqrt((-2 * Math.log(r)) / r);\n    };\n};\n//# sourceMappingURL=normal.js.map","export default (random, mu = 0, sigma = 1) => {\n    const normal = random.normal(mu, sigma);\n    return () => {\n        return Math.exp(normal());\n    };\n};\n//# sourceMappingURL=log-normal.js.map","import { numberValidator } from '../validation';\nexport default (random, p = 0.5) => {\n    numberValidator(p).greaterThanOrEqual(0).lessThan(1);\n    return () => {\n        return Math.floor(random.next() + p);\n    };\n};\n//# sourceMappingURL=bernoulli.js.map","import { numberValidator } from '../validation';\nexport default (random, n = 1, p = 0.5) => {\n    numberValidator(n).isInt().isPositive();\n    numberValidator(p).greaterThanOrEqual(0).lessThan(1);\n    return () => {\n        let i = 0;\n        let x = 0;\n        while (i++ < n) {\n            if (random.next() < p) {\n                x++;\n            }\n        }\n        return x;\n    };\n};\n//# sourceMappingURL=binomial.js.map","import { numberValidator } from '../validation';\nexport default (random, p = 0.5) => {\n    numberValidator(p).greaterThan(0).lessThan(1);\n    const invLogP = 1.0 / Math.log(1.0 - p);\n    return () => {\n        return Math.floor(1 + Math.log(random.next()) * invLogP);\n    };\n};\n//# sourceMappingURL=geometric.js.map","import { numberValidator } from '../validation';\nconst logFactorialTable = [\n    0.0,\n    0.0,\n    0.69314718055994529,\n    1.791759469228055,\n    3.1780538303479458,\n    4.7874917427820458,\n    6.5792512120101012,\n    8.5251613610654147,\n    10.604602902745251,\n    12.801827480081469\n];\nconst logFactorial = (k) => {\n    return logFactorialTable[k];\n};\nconst logSqrt2PI = 0.91893853320467267;\nexport default (random, lambda = 1) => {\n    numberValidator(lambda).isPositive();\n    if (lambda < 10) {\n        // inversion method\n        const expMean = Math.exp(-lambda);\n        return () => {\n            let p = expMean;\n            let x = 0;\n            let u = random.next();\n            while (u > p) {\n                u = u - p;\n                p = (lambda * p) / ++x;\n            }\n            return x;\n        };\n    }\n    else {\n        // generative method\n        const smu = Math.sqrt(lambda);\n        const b = 0.931 + 2.53 * smu;\n        const a = -0.059 + 0.02483 * b;\n        const invAlpha = 1.1239 + 1.1328 / (b - 3.4);\n        const vR = 0.9277 - 3.6224 / (b - 2);\n        return () => {\n            var _a;\n            while (true) {\n                let u;\n                let v = random.next();\n                if (v <= 0.86 * vR) {\n                    u = v / vR - 0.43;\n                    return Math.floor(((2 * a) / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445);\n                }\n                if (v >= vR) {\n                    u = random.next() - 0.5;\n                }\n                else {\n                    u = v / vR - 0.93;\n                    u = (u < 0 ? -0.5 : 0.5) - u;\n                    v = random.next() * vR;\n                }\n                const us = 0.5 - Math.abs(u);\n                if (us < 0.013 && v > us) {\n                    continue;\n                }\n                const k = Math.floor(((2 * a) / us + b) * u + lambda + 0.445);\n                v = (v * invAlpha) / (a / (us * us) + b);\n                if (k >= 10) {\n                    const t = (k + 0.5) * Math.log(lambda / k) -\n                        lambda -\n                        logSqrt2PI +\n                        k -\n                        (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k;\n                    if (Math.log(v * smu) <= t) {\n                        return k;\n                    }\n                }\n                else if (k >= 0) {\n                    const f = (_a = logFactorial(k)) !== null && _a !== void 0 ? _a : 0;\n                    if (Math.log(v) <= k * Math.log(lambda) - lambda - f) {\n                        return k;\n                    }\n                }\n            }\n        };\n    }\n};\n//# sourceMappingURL=poisson.js.map","import { numberValidator } from '../validation';\nexport default (random, lambda = 1) => {\n    numberValidator(lambda).isPositive();\n    return () => {\n        return -Math.log(1 - random.next()) / lambda;\n    };\n};\n//# sourceMappingURL=exponential.js.map","import { numberValidator } from '../validation';\nexport default (random, n = 1) => {\n    numberValidator(n).isInt().greaterThanOrEqual(0);\n    return () => {\n        let sum = 0;\n        for (let i = 0; i < n; ++i) {\n            sum += random.next();\n        }\n        return sum;\n    };\n};\n//# sourceMappingURL=irwin-hall.js.map","import { numberValidator } from '../validation';\nexport default (random, n = 1) => {\n    numberValidator(n).isInt().isPositive();\n    const irwinHall = random.irwinHall(n);\n    return () => {\n        return irwinHall() / n;\n    };\n};\n//# sourceMappingURL=bates.js.map","import { numberValidator } from '../validation';\nexport default (random, alpha = 1) => {\n    numberValidator(alpha).greaterThanOrEqual(0);\n    const invAlpha = 1.0 / alpha;\n    return () => {\n        return 1.0 / Math.pow(1.0 - random.next(), invAlpha);\n    };\n};\n//# sourceMappingURL=pareto.js.map","import RNG from '../rng';\nexport default class RNGMathRandom extends RNG {\n    get name() {\n        return 'default';\n    }\n    next() {\n        return Math.random();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    seed(_seed, _opts) {\n        // intentionally empty\n    }\n    clone() {\n        return new RNGMathRandom();\n    }\n}\n//# sourceMappingURL=math-random.js.map","import RNG from './rng';\nimport RNGFactory from './rng-factory';\nimport uniform from './distributions/uniform';\nimport uniformInt from './distributions/uniform-int';\nimport uniformBoolean from './distributions/uniform-boolean';\nimport normal from './distributions/normal';\nimport logNormal from './distributions/log-normal';\nimport bernoulli from './distributions/bernoulli';\nimport binomial from './distributions/binomial';\nimport geometric from './distributions/geometric';\nimport poisson from './distributions/poisson';\nimport exponential from './distributions/exponential';\nimport irwinHall from './distributions/irwin-hall';\nimport bates from './distributions/bates';\nimport pareto from './distributions/pareto';\nimport RNGMathRandom from './generators/math-random';\nexport { RNG, RNGFactory };\n/**\n * Seedable random number generator supporting many common distributions.\n *\n * Defaults to Math.random as its underlying pseudorandom number generator.\n *\n * @name Random\n * @class\n *\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\n */\nexport class Random {\n    constructor(rng) {\n        this._cache = {};\n        // --------------------------------------------------------------------------\n        // Uniform utility functions\n        // --------------------------------------------------------------------------\n        /**\n         * Convenience wrapper around `this.rng.next()`\n         *\n         * Returns a floating point number in [0, 1).\n         *\n         * @return {number}\n         */\n        this.next = () => {\n            return this._rng.next();\n        };\n        /**\n         * Samples a uniform random floating point number, optionally specifying\n         * lower and upper bounds.\n         *\n         * Convence wrapper around `random.uniform()`\n         *\n         * @param {number} [min=0] - Lower bound (float, inclusive)\n         * @param {number} [max=1] - Upper bound (float, exclusive)\n         * @return {number}\n         */\n        this.float = (min, max) => {\n            return this.uniform(min, max)();\n        };\n        /**\n         * Samples a uniform random integer, optionally specifying lower and upper\n         * bounds.\n         *\n         * Convence wrapper around `random.uniformInt()`\n         *\n         * @param {number} [min=0] - Lower bound (integer, inclusive)\n         * @param {number} [max=1] - Upper bound (integer, inclusive)\n         * @return {number}\n         */\n        this.int = (min, max) => {\n            return this.uniformInt(min, max)();\n        };\n        /**\n         * Samples a uniform random integer, optionally specifying lower and upper\n         * bounds.\n         *\n         * Convence wrapper around `random.uniformInt()`\n         *\n         * @alias `random.int`\n         *\n         * @param {number} [min=0] - Lower bound (integer, inclusive)\n         * @param {number} [max=1] - Upper bound (integer, inclusive)\n         * @return {number}\n         */\n        this.integer = (min, max) => {\n            return this.uniformInt(min, max)();\n        };\n        /**\n         * Samples a uniform random boolean value.\n         *\n         * Convence wrapper around `random.uniformBoolean()`\n         *\n         * @alias `random.boolean`\n         *\n         * @return {boolean}\n         */\n        this.bool = () => {\n            return this.uniformBoolean()();\n        };\n        /**\n         * Samples a uniform random boolean value.\n         *\n         * Convence wrapper around `random.uniformBoolean()`\n         *\n         * @return {boolean}\n         */\n        this.boolean = () => {\n            return this.uniformBoolean()();\n        };\n        // --------------------------------------------------------------------------\n        // Uniform distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\n         *\n         * @param {number} [min=0] - Lower bound (float, inclusive)\n         * @param {number} [max=1] - Upper bound (float, exclusive)\n         * @return {function}\n         */\n        this.uniform = (min, max) => {\n            return this._memoize('uniform', uniform, min, max);\n        };\n        /**\n         * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n         *\n         * @param {number} [min=0] - Lower bound (integer, inclusive)\n         * @param {number} [max=1] - Upper bound (integer, inclusive)\n         * @return {function}\n         */\n        this.uniformInt = (min, max) => {\n            return this._memoize('uniformInt', uniformInt, min, max);\n        };\n        /**\n         * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution),\n         * with two possible outcomes, `true` or `false.\n         *\n         * This method is analogous to flipping a coin.\n         *\n         * @return {function}\n         */\n        this.uniformBoolean = () => {\n            return this._memoize('uniformBoolean', uniformBoolean);\n        };\n        // --------------------------------------------------------------------------\n        // Normal distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates a [Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n         *\n         * @param {number} [mu=0] - Mean\n         * @param {number} [sigma=1] - Standard deviation\n         * @return {function}\n         */\n        this.normal = (mu, sigma) => {\n            return normal(this, mu, sigma);\n        };\n        /**\n         * Generates a [Log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).\n         *\n         * @param {number} [mu=0] - Mean of underlying normal distribution\n         * @param {number} [sigma=1] - Standard deviation of underlying normal distribution\n         * @return {function}\n         */\n        this.logNormal = (mu, sigma) => {\n            return logNormal(this, mu, sigma);\n        };\n        // --------------------------------------------------------------------------\n        // Bernoulli distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).\n         *\n         * @param {number} [p=0.5] - Success probability of each trial.\n         * @return {function}\n         */\n        this.bernoulli = (p) => {\n            return bernoulli(this, p);\n        };\n        /**\n         * Generates a [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).\n         *\n         * @param {number} [n=1] - Number of trials.\n         * @param {number} [p=0.5] - Success probability of each trial.\n         * @return {function}\n         */\n        this.binomial = (n, p) => {\n            return binomial(this, n, p);\n        };\n        /**\n         * Generates a [Geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution).\n         *\n         * @param {number} [p=0.5] - Success probability of each trial.\n         * @return {function}\n         */\n        this.geometric = (p) => {\n            return geometric(this, p);\n        };\n        // --------------------------------------------------------------------------\n        // Poisson distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution).\n         *\n         * @param {number} [lambda=1] - Mean (lambda > 0)\n         * @return {function}\n         */\n        this.poisson = (lambda) => {\n            return poisson(this, lambda);\n        };\n        /**\n         * Generates an [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).\n         *\n         * @param {number} [lambda=1] - Inverse mean (lambda > 0)\n         * @return {function}\n         */\n        this.exponential = (lambda) => {\n            return exponential(this, lambda);\n        };\n        // --------------------------------------------------------------------------\n        // Misc distributions\n        // --------------------------------------------------------------------------\n        /**\n         * Generates an [Irwin Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution).\n         *\n         * @param {number} [n=1] - Number of uniform samples to sum (n >= 0)\n         * @return {function}\n         */\n        this.irwinHall = (n) => {\n            return irwinHall(this, n);\n        };\n        /**\n         * Generates a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution).\n         *\n         * @param {number} [n=1] - Number of uniform samples to average (n >= 1)\n         * @return {function}\n         */\n        this.bates = (n) => {\n            return bates(this, n);\n        };\n        /**\n         * Generates a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution).\n         *\n         * @param {number} [alpha=1] - Alpha\n         * @return {function}\n         */\n        this.pareto = (alpha) => {\n            return pareto(this, alpha);\n        };\n        if (rng && rng instanceof RNG) {\n            this.use(rng);\n        }\n        else {\n            this.use(new RNGMathRandom());\n        }\n        this._cache = {};\n    }\n    /**\n     * @member {RNG} Underlying pseudo-random number generator\n     */\n    get rng() {\n        return this._rng;\n    }\n    /**\n     * Creates a new `Random` instance, optionally specifying parameters to\n     * set a new seed.\n     *\n     * @see RNG.clone\n     *\n     * @param {string} [seed] - Optional seed for new RNG.\n     * @param {object} [opts] - Optional config for new RNG options.\n     * @return {Random}\n     */\n    clone(...args) {\n        if (args.length) {\n            return new Random(RNGFactory(...args));\n        }\n        else {\n            return new Random(this.rng.clone());\n        }\n    }\n    /**\n     * Sets the underlying pseudorandom number generator used via\n     * either an instance of `seedrandom`, a custom instance of RNG\n     * (for PRNG plugins), or a string specifying the PRNG to use\n     * along with an optional `seed` and `opts` to initialize the\n     * RNG.\n     *\n     * @example\n     * const random = require('random')\n     *\n     * random.use('example_seedrandom_string')\n     * // or\n     * random.use(seedrandom('kittens'))\n     * // or\n     * random.use(Math.random)\n     *\n     * @param {...*} args\n     */\n    use(...args) {\n        this._rng = RNGFactory(...args);\n    }\n    /**\n     * Patches `Math.random` with this Random instance's PRNG.\n     */\n    patch() {\n        if (this._patch) {\n            throw new Error('Math.random already patched');\n        }\n        this._patch = Math.random;\n        Math.random = this.uniform();\n    }\n    /**\n     * Restores a previously patched `Math.random` to its original value.\n     */\n    unpatch() {\n        if (this._patch) {\n            Math.random = this._patch;\n            delete this._patch;\n        }\n    }\n    // --------------------------------------------------------------------------\n    // Internal\n    // --------------------------------------------------------------------------\n    /**\n     * Memoizes distributions to ensure they're only created when necessary.\n     *\n     * Returns a thunk which that returns independent, identically distributed\n     * samples from the specified distribution.\n     *\n     * @private\n     *\n     * @param {string} label - Name of distribution\n     * @param {function} getter - Function which generates a new distribution\n     * @param {...*} args - Distribution-specific arguments\n     *\n     * @return {function}\n     */\n    _memoize(label, getter, ...args) {\n        const key = `${args.join(';')}`;\n        let value = this._cache[label];\n        if (value === undefined || value.key !== key) {\n            value = {\n                key,\n                distribution: getter(this, ...args)\n            };\n            this._cache[label] = value;\n        }\n        return value.distribution;\n    }\n}\n// defaults to Math.random as its RNG\nexport default new Random();\n//# sourceMappingURL=random.js.map"],"names":["RNG","seed","_opts","strSeed","s","k","RNGFunction","thunk","opts","_","RNGFactory","args","arg0","rest","seedrandom","uniform","random","min","max","numberValidator","num","NumberValidator","v","uniformInt","uniformBoolean","normal","mu","sigma","x","y","r","logNormal","bernoulli","p","binomial","n","i","geometric","invLogP","logFactorialTable","logFactorial","logSqrt2PI","poisson","lambda","expMean","u","smu","b","a","invAlpha","vR","_a","us","t","f","exponential","irwinHall","sum","bates","pareto","alpha","RNGMathRandom","_seed","Random","rng","label","getter","key","value"],"mappings":"wCAAe,MAAMA,CAAI,CAErB,MAAMC,EAAMC,EAAO,CAEf,GAAID,KAAUA,GAAQ,GAClB,OAAOA,EAEN,CACD,MAAME,EAAU,GAAKF,EACrB,IAAIG,EAAI,EACR,QAASC,EAAI,EAAGA,EAAIF,EAAQ,OAAQ,EAAEE,EAClCD,GAAKD,EAAQ,WAAWE,CAAC,EAAI,EAEjC,OAAOD,CACV,CACJ,CACL,CCfe,MAAME,UAAoBN,CAAI,CACzC,YAAYO,EAAOC,EAAM,CACrB,QACA,KAAK,KAAKD,EAAOC,CAAI,CACxB,CACD,IAAI,MAAO,CACP,MAAO,UACV,CACD,MAAO,CACH,OAAO,KAAK,MACf,CAED,KAAKD,EAAOL,EAAO,CACf,KAAK,KAAOK,CACf,CACD,MAAME,EAAGD,EAAM,CACX,OAAO,IAAIF,EAAY,KAAK,KAAME,CAAI,CACzC,CACL,CCRA,MAAeE,EAAA,IAAIC,IAAS,CACxB,KAAM,CAACC,EAAO,UAAW,GAAGC,CAAI,EAAIF,EACpC,OAAQ,OAAOC,EAAI,CACf,IAAK,SACD,GAAIA,aAAgBZ,EAChB,OAAOY,EAEX,MACJ,IAAK,WACD,OAAO,IAAIN,EAAYM,CAAI,EAC/B,IAAK,SACL,IAAK,SACD,OAAO,IAAIN,EAAYQ,EAAW,GAAGD,CAAI,CAAC,CACjD,CACD,MAAM,IAAI,MAAM,gBAAgBD,CAAI,GAAG,CAC3C,EC1BeG,EAAA,CAACC,EAAQC,EAAM,EAAGC,EAAM,IAC5B,IACIF,EAAO,KAAM,GAAIE,EAAMD,GAAOA,ECFtC,SAASE,EAAgBC,EAAK,CACjC,OAAO,IAAIC,EAAgBD,CAAG,CAClC,CACO,MAAMC,CAAgB,CACzB,YAAYD,EAAK,CACb,KAAK,MAAQ,IAAM,CACf,GAAI,OAAO,UAAU,KAAK,CAAC,EACvB,OAAO,KAEX,MAAM,IAAI,MAAM,yCAAyC,KAAK,CAAC,EAAE,CAC7E,EACQ,KAAK,WAAa,IAAM,CACpB,GAAI,KAAK,EAAI,EACT,OAAO,KAEX,MAAM,IAAI,MAAM,uCAAuC,KAAK,CAAC,EAAE,CAC3E,EACQ,KAAK,SAAYE,GAAM,CACnB,GAAI,KAAK,EAAIA,EACT,OAAO,KAEX,MAAM,IAAI,MAAM,mCAAmCA,CAAC,SAAS,KAAK,CAAC,EAAE,CACjF,EACQ,KAAK,mBAAsBA,GAAM,CAC7B,GAAI,KAAK,GAAKA,EACV,OAAO,KAEX,MAAM,IAAI,MAAM,kDAAkDA,CAAC,SAAS,KAAK,CAAC,EAAE,CAChG,EACQ,KAAK,YAAeA,GAAM,CACtB,GAAI,KAAK,EAAIA,EACT,OAAO,KAEX,MAAM,IAAI,MAAM,sCAAsCA,CAAC,SAAS,KAAK,CAAC,EAAE,CACpF,EACQ,KAAK,EAAIF,CACZ,CACL,CCpCA,MAAeG,EAAA,CAACP,EAAQC,EAAM,EAAGC,EAAM,KAC/BA,IAAQ,SACRA,EAAMD,IAAQ,OAAY,EAAIA,EAC9BA,EAAM,GAEVE,EAAgBF,CAAG,EAAE,QACrBE,EAAgBD,CAAG,EAAE,QACd,IACI,KAAK,MAAMF,EAAO,KAAI,GAAME,EAAMD,EAAM,GAAKA,CAAG,GCThDO,EAACR,GACL,IACIA,EAAO,KAAM,GAAI,GCFjBS,EAAA,CAACT,EAAQU,EAAK,EAAGC,EAAQ,IAC7B,IAAM,CACT,IAAIC,EAAGC,EAAGC,EACV,GACIF,EAAIZ,EAAO,OAAS,EAAI,EACxBa,EAAIb,EAAO,OAAS,EAAI,EACxBc,EAAIF,EAAIA,EAAIC,EAAIA,QACX,CAACC,GAAKA,EAAI,GACnB,OAAOJ,EAAKC,EAAQE,EAAI,KAAK,KAAM,GAAK,KAAK,IAAIC,CAAC,EAAKA,CAAC,CAChE,ECTeC,EAAA,CAACf,EAAQU,EAAK,EAAGC,EAAQ,IAAM,CAC1C,MAAMF,EAAST,EAAO,OAAOU,EAAIC,CAAK,EACtC,MAAO,IACI,KAAK,IAAIF,EAAM,CAAE,CAEhC,ECJAO,EAAe,CAAChB,EAAQiB,EAAI,MACxBd,EAAgBc,CAAC,EAAE,mBAAmB,CAAC,EAAE,SAAS,CAAC,EAC5C,IACI,KAAK,MAAMjB,EAAO,KAAM,EAAGiB,CAAC,GCH5BC,EAAA,CAAClB,EAAQmB,EAAI,EAAGF,EAAI,MAC/Bd,EAAgBgB,CAAC,EAAE,MAAO,EAAC,WAAU,EACrChB,EAAgBc,CAAC,EAAE,mBAAmB,CAAC,EAAE,SAAS,CAAC,EAC5C,IAAM,CACT,IAAIG,EAAI,EACJR,EAAI,EACR,KAAOQ,IAAMD,GACLnB,EAAO,KAAM,EAAGiB,GAChBL,IAGR,OAAOA,CACf,GCZAS,EAAe,CAACrB,EAAQiB,EAAI,KAAQ,CAChCd,EAAgBc,CAAC,EAAE,YAAY,CAAC,EAAE,SAAS,CAAC,EAC5C,MAAMK,EAAU,EAAM,KAAK,IAAI,EAAML,CAAC,EACtC,MAAO,IACI,KAAK,MAAM,EAAI,KAAK,IAAIjB,EAAO,KAAI,CAAE,EAAIsB,CAAO,CAE/D,ECNMC,EAAoB,CACtB,EACA,EACA,kBACA,kBACA,mBACA,kBACA,kBACA,kBACA,kBACA,kBACJ,EACMC,EAAgBnC,GACXkC,EAAkBlC,CAAC,EAExBoC,EAAa,kBACnBC,EAAe,CAAC1B,EAAQ2B,EAAS,IAAM,CAEnC,GADAxB,EAAgBwB,CAAM,EAAE,aACpBA,EAAS,GAAI,CAEb,MAAMC,EAAU,KAAK,IAAI,CAACD,CAAM,EAChC,MAAO,IAAM,CACT,IAAIV,EAAIW,EACJhB,EAAI,EACJiB,EAAI7B,EAAO,OACf,KAAO6B,EAAIZ,GACPY,EAAIA,EAAIZ,EACRA,EAAKU,EAASV,EAAK,EAAEL,EAEzB,OAAOA,CACnB,CACK,KACI,CAED,MAAMkB,EAAM,KAAK,KAAKH,CAAM,EACtBI,EAAI,KAAQ,KAAOD,EACnBE,EAAI,MAAS,OAAUD,EACvBE,EAAW,OAAS,QAAUF,EAAI,KAClCG,EAAK,MAAS,QAAUH,EAAI,GAClC,MAAO,IAAM,CAET,QADII,IACS,CACT,IAAI,EACA7B,EAAIN,EAAO,OACf,GAAIM,GAAK,IAAO4B,EACZ,SAAI5B,EAAI4B,EAAK,IACN,KAAK,OAAQ,EAAIF,GAAM,GAAM,KAAK,IAAI,CAAC,GAAKD,GAAK,EAAIJ,EAAS,IAAK,EAE1ErB,GAAK4B,EACL,EAAIlC,EAAO,KAAM,EAAG,IAGpB,EAAIM,EAAI4B,EAAK,IACb,GAAK,EAAI,EAAI,IAAO,IAAO,EAC3B5B,EAAIN,EAAO,KAAM,EAAGkC,GAExB,MAAME,EAAK,GAAM,KAAK,IAAI,CAAC,EAC3B,GAAIA,EAAK,MAAS9B,EAAI8B,EAClB,SAEJ,MAAM/C,EAAI,KAAK,OAAQ,EAAI2C,EAAKI,EAAKL,GAAK,EAAIJ,EAAS,IAAK,EAE5D,GADArB,EAAKA,EAAI2B,GAAaD,GAAKI,EAAKA,GAAML,GAClC1C,GAAK,GAAI,CACT,MAAMgD,GAAKhD,EAAI,IAAO,KAAK,IAAIsC,EAAStC,CAAC,EACrCsC,EACAF,EACApC,GACC,oBAAY,oBAAY,GAAK,KAASA,EAAIA,KAAOA,EAAIA,IAAMA,EAChE,GAAI,KAAK,IAAIiB,EAAIwB,CAAG,GAAKO,EACrB,OAAOhD,CAEd,SACQA,GAAK,EAAG,CACb,MAAMiD,GAAKH,EAAKX,EAAanC,CAAC,KAAO,MAAQ8C,IAAO,OAASA,EAAK,EAClE,GAAI,KAAK,IAAI7B,CAAC,GAAKjB,EAAI,KAAK,IAAIsC,CAAM,EAAIA,EAASW,EAC/C,OAAOjD,CAEd,CACJ,CACb,CACK,CACL,ECjFAkD,EAAe,CAACvC,EAAQ2B,EAAS,KAC7BxB,EAAgBwB,CAAM,EAAE,aACjB,IACI,CAAC,KAAK,IAAI,EAAI3B,EAAO,KAAI,CAAE,EAAI2B,GCH9Ca,EAAe,CAACxC,EAAQmB,EAAI,KACxBhB,EAAgBgB,CAAC,EAAE,MAAO,EAAC,mBAAmB,CAAC,EACxC,IAAM,CACT,IAAIsB,EAAM,EACV,QAASrB,EAAI,EAAGA,EAAID,EAAG,EAAEC,EACrBqB,GAAOzC,EAAO,OAElB,OAAOyC,CACf,GCRAC,EAAe,CAAC1C,EAAQmB,EAAI,IAAM,CAC9BhB,EAAgBgB,CAAC,EAAE,MAAO,EAAC,WAAU,EACrC,MAAMqB,EAAYxC,EAAO,UAAUmB,CAAC,EACpC,MAAO,IACIqB,EAAW,EAAGrB,CAE7B,ECNAwB,EAAe,CAAC3C,EAAQ4C,EAAQ,IAAM,CAClCzC,EAAgByC,CAAK,EAAE,mBAAmB,CAAC,EAC3C,MAAMX,EAAW,EAAMW,EACvB,MAAO,IACI,EAAM,KAAK,IAAI,EAAM5C,EAAO,KAAI,EAAIiC,CAAQ,CAE3D,ECNe,MAAMY,UAAsB7D,CAAI,CAC3C,IAAI,MAAO,CACP,MAAO,SACV,CACD,MAAO,CACH,OAAO,KAAK,QACf,CAED,KAAK8D,EAAO5D,EAAO,CAElB,CACD,OAAQ,CACJ,OAAO,IAAI2D,CACd,CACL,CCYO,MAAME,CAAO,CAChB,YAAYC,EAAK,CACb,KAAK,OAAS,GAWd,KAAK,KAAO,IACD,KAAK,KAAK,OAYrB,KAAK,MAAQ,CAAC/C,EAAKC,IACR,KAAK,QAAQD,EAAKC,CAAG,EAAC,EAYjC,KAAK,IAAM,CAACD,EAAKC,IACN,KAAK,WAAWD,EAAKC,CAAG,EAAC,EAcpC,KAAK,QAAU,CAACD,EAAKC,IACV,KAAK,WAAWD,EAAKC,CAAG,EAAC,EAWpC,KAAK,KAAO,IACD,KAAK,eAAc,IAS9B,KAAK,QAAU,IACJ,KAAK,eAAc,IAY9B,KAAK,QAAU,CAACD,EAAKC,IACV,KAAK,SAAS,UAAWH,EAASE,EAAKC,CAAG,EASrD,KAAK,WAAa,CAACD,EAAKC,IACb,KAAK,SAAS,aAAcK,EAAYN,EAAKC,CAAG,EAU3D,KAAK,eAAiB,IACX,KAAK,SAAS,iBAAkBM,CAAc,EAYzD,KAAK,OAAS,CAACE,EAAIC,IACRF,EAAO,KAAMC,EAAIC,CAAK,EASjC,KAAK,UAAY,CAACD,EAAIC,IACXI,EAAU,KAAML,EAAIC,CAAK,EAWpC,KAAK,UAAaM,GACPD,EAAU,KAAMC,CAAC,EAS5B,KAAK,SAAW,CAACE,EAAGF,IACTC,EAAS,KAAMC,EAAGF,CAAC,EAQ9B,KAAK,UAAaA,GACPI,EAAU,KAAMJ,CAAC,EAW5B,KAAK,QAAWU,GACLD,EAAQ,KAAMC,CAAM,EAQ/B,KAAK,YAAeA,GACTY,EAAY,KAAMZ,CAAM,EAWnC,KAAK,UAAaR,GACPqB,EAAU,KAAMrB,CAAC,EAQ5B,KAAK,MAASA,GACHuB,EAAM,KAAMvB,CAAC,EAQxB,KAAK,OAAUyB,GACJD,EAAO,KAAMC,CAAK,EAEzBI,GAAOA,aAAehE,EACtB,KAAK,IAAIgE,CAAG,EAGZ,KAAK,IAAI,IAAIH,CAAe,EAEhC,KAAK,OAAS,EACjB,CAID,IAAI,KAAM,CACN,OAAO,KAAK,IACf,CAWD,SAASlD,EAAM,CACX,OAAIA,EAAK,OACE,IAAIoD,EAAOrD,EAAW,GAAGC,CAAI,CAAC,EAG9B,IAAIoD,EAAO,KAAK,IAAI,MAAO,CAAA,CAEzC,CAmBD,OAAOpD,EAAM,CACT,KAAK,KAAOD,EAAW,GAAGC,CAAI,CACjC,CAID,OAAQ,CACJ,GAAI,KAAK,OACL,MAAM,IAAI,MAAM,6BAA6B,EAEjD,KAAK,OAAS,KAAK,OACnB,KAAK,OAAS,KAAK,SACtB,CAID,SAAU,CACF,KAAK,SACL,KAAK,OAAS,KAAK,OACnB,OAAO,KAAK,OAEnB,CAkBD,SAASsD,EAAOC,KAAWvD,EAAM,CAC7B,MAAMwD,EAAM,GAAGxD,EAAK,KAAK,GAAG,CAAC,GAC7B,IAAIyD,EAAQ,KAAK,OAAOH,CAAK,EAC7B,OAAIG,IAAU,QAAaA,EAAM,MAAQD,KACrCC,EAAQ,CACJ,IAAAD,EACA,aAAcD,EAAO,KAAM,GAAGvD,CAAI,CAClD,EACY,KAAK,OAAOsD,CAAK,EAAIG,GAElBA,EAAM,YAChB,CACL,CAEA,MAAepD,EAAA,IAAI+C","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]}