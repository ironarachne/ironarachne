{"version":3,"file":"size_matrix.wHaD-wqf.js","sources":["../../../../../../src/lib/age/age_categories.ts","../../../../../../src/lib/measurements.ts","../../../../../../src/lib/size/sizes.ts","../../../../../../src/lib/size/size_matrix.ts"],"sourcesContent":["import * as RND from \"@ironarachne/rng\";\nimport type AgeCategory from \"./age_category\";\n\nexport function getCategoryList(): string[] {\n  const categories = humanStandard();\n\n  let results = [];\n\n  for (let i = 0; i < categories.length; i++) {\n    results.push(categories[i].name);\n  }\n\n  return results;\n}\n\nexport function getCategoryFromAge(age: number, categories: AgeCategory[]): AgeCategory {\n  for (let i = 0; i < categories.length; i++) {\n    if (categories[i].minAge <= age && categories[i].maxAge >= age) {\n      return categories[i];\n    }\n  }\n\n  throw new Error(`Failed to find age category for age ${age}`);\n}\n\nexport function getCategoryFromName(name: string, ageGroups: AgeCategory[]): AgeCategory {\n  for (let i = 0; i < ageGroups.length; i++) {\n    if (ageGroups[i].name == name) {\n      return ageGroups[i];\n    }\n  }\n\n  throw new Error(`Failed to find age category for name ${name}`);\n}\n\nexport function getDescription(ageCategory: AgeCategory): string {\n  return `Name: ${ageCategory.name}, Noun: ${ageCategory.noun}, Age: ${ageCategory.minAge} - ${ageCategory.maxAge}`;\n}\n\nexport function getHumanVariant(\n  ageModifier: number,\n): AgeCategory[] {\n  let categories = humanStandard();\n\n  return getVariant(ageModifier, categories);\n}\n\nexport function getMaxAge(categories: AgeCategory[]): number {\n  let maxAge = 0;\n\n  for (let i = 0; i < categories.length; i++) {\n    if (maxAge < categories[i].maxAge) {\n      maxAge = categories[i].maxAge;\n    }\n  }\n\n  return maxAge;\n}\n\nexport function getVariant(\n  ageModifier: number,\n  categories: AgeCategory[],\n): AgeCategory[] {\n  for (let i = 0; i < categories.length; i++) {\n    if (i > 0) {\n      categories[i].minAge = categories[i - 1].maxAge + 1;\n    }\n    categories[i].maxAge = Math.ceil(categories[i].maxAge * ageModifier);\n\n    // Since \"teenager\" would be inappropriate if the ages aren't in the teenaged years, we'll change it to \"young adult\".\n    if (categories[i].name == \"teenager\") {\n      categories[i].name = \"young adult\";\n      categories[i].noun = \"young adult\";\n      categories[i].genderedNoun = [\"young woman\", \"young man\", \"young adult\"];\n    }\n  }\n\n  return categories;\n}\n\nexport function humanStandard(): AgeCategory[] {\n  return [\n    {\n      name: \"infant\",\n      noun: \"baby\",\n      minAge: 0,\n      maxAge: 1,\n      genderedNoun: [\"baby girl\", \"baby boy\", \"baby\"],\n      commonality: 1,\n    },\n    {\n      name: \"toddler\",\n      noun: \"toddler\",\n      minAge: 2,\n      maxAge: 3,\n      genderedNoun: [\"toddler\", \"toddler\", \"toddler\"],\n      commonality: 1,\n    },\n    {\n      name: \"young child\",\n      noun: \"young child\",\n      minAge: 4,\n      maxAge: 6,\n      genderedNoun: [\"young girl\", \"young boy\", \"young child\"],\n      commonality: 2,\n    },\n    { name: \"child\", noun: \"child\", minAge: 7, maxAge: 12, genderedNoun: [\"girl\", \"boy\", \"child\"], commonality: 2 },\n    {\n      name: \"teenager\",\n      noun: \"teenager\",\n      minAge: 13,\n      maxAge: 19,\n      genderedNoun: [\"teen girl\", \"teen boy\", \"teenager\"],\n      commonality: 8,\n    },\n    { name: \"adult\", noun: \"adult\", minAge: 20, maxAge: 60, genderedNoun: [\"woman\", \"man\", \"adult\"], commonality: 20 },\n    {\n      name: \"elderly\",\n      noun: \"elder\",\n      minAge: 61,\n      maxAge: 100,\n      genderedNoun: [\"old woman\", \"old man\", \"elder\"],\n      commonality: 3,\n    },\n  ];\n}\n\nexport function randomWeighted(names: string[], options: AgeCategory[]): AgeCategory {\n  let possibleAgeCategories: AgeCategory[] = [];\n\n  for (let i = 0; i < options.length; i++) {\n    if (names.includes(options[i].name)) {\n      possibleAgeCategories.push(options[i]);\n    }\n  }\n\n  const ageCategory: AgeCategory = RND.weighted(possibleAgeCategories);\n\n  return ageCategory;\n}\n","export function cmToInches(cm: number): number {\n  return cm * 0.3937;\n}\n\nexport function kgToPounds(kg: number): number {\n  return kg * 2.2046;\n}\n\nexport function metersToFeet(meters: number): number {\n  return meters * 3.2808;\n}\n\nexport function inchesToCM(inches: number): number {\n  return inches * 2.54;\n}\n\nexport function poundsToKG(pounds: number): number {\n  return pounds * 0.4536;\n}\n\nexport function inchesToFeetExpression(inches: number): string {\n  let expression = \"\";\n\n  const feet = Math.floor(inches / 12);\n\n  const remainder = Math.floor(inches % 12);\n\n  expression += feet + \"'\" + remainder + \"\\\"\";\n\n  return expression;\n}\n","import * as Dice from \"$lib/dice\";\nimport * as Measurements from \"$lib/measurements\";\nimport random from \"random\";\nimport type Size from \"./size\";\nimport type SizeGeneratorConfig from \"./size_generator_config\";\nimport type { SizeMatrix, SizeMatrixRow } from \"./size_matrix\";\n\nexport function generate(config: SizeGeneratorConfig): Size {\n  const height = random.int(config.minHeight, config.maxHeight);\n  const weight = random.int(config.minWeight, config.maxWeight);\n  const length = random.int(config.minLength, config.maxLength);\n  const mass = random.int(config.minMass, config.maxMass);\n\n  return {\n    height,\n    weight,\n    length,\n    mass,\n  };\n}\n\nexport function getHeightRange(config: SizeGeneratorConfig): string {\n  const metricHeightModifier = Math.max(config.maxHeight - config.minHeight, 4);\n  const metric = config.minHeight\n    + \" + \"\n    + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(metricHeightModifier)))\n    + \" cm\";\n  const imperialHeightModifier = Math.max(\n    Measurements.cmToInches(config.maxHeight - config.minHeight),\n    4,\n  );\n  const imperial = Measurements.inchesToFeetExpression(Measurements.cmToInches(config.minHeight))\n    + \" + \"\n    + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(imperialHeightModifier)))\n    + \" in.\";\n\n  return `${metric} (${imperial})`;\n}\n\nexport function getHumanVariant(weightModifier: number, heightModifier: number): SizeMatrix {\n  const standard: SizeMatrix = humanStandard();\n  let variant: SizeMatrix = [];\n\n  for (let i = 0; i < standard.length; i++) {\n    let row: SizeMatrixRow = { gender: standard[i].gender, entries: [] };\n    for (let j = 0; j < standard[i].entries.length; j++) {\n      let entry = standard[i].entries[j];\n      let config: SizeGeneratorConfig = {\n        minHeight: Math.round(entry.sizeGeneratorConfig.minHeight * heightModifier),\n        maxHeight: Math.round(entry.sizeGeneratorConfig.maxHeight * heightModifier),\n        minWeight: Math.round(entry.sizeGeneratorConfig.minWeight * weightModifier),\n        maxWeight: Math.round(entry.sizeGeneratorConfig.maxWeight * weightModifier),\n        minLength: entry.sizeGeneratorConfig.minLength,\n        maxLength: entry.sizeGeneratorConfig.maxLength,\n        minMass: entry.sizeGeneratorConfig.minMass,\n        maxMass: entry.sizeGeneratorConfig.maxMass,\n      };\n      let name = entry.ageCategoryName;\n      if (entry.ageCategoryName == \"teenager\") {\n        name = \"young adult\";\n      }\n      row.entries.push({ ageCategoryName: name, sizeGeneratorConfig: config });\n    }\n    variant.push(row);\n  }\n\n  return variant;\n}\n\nexport function getWeightRange(config: SizeGeneratorConfig): string {\n  const metricWeightModifier = Math.max(config.maxWeight - config.minWeight, 4);\n  const metric = config.minWeight\n    + \" + \"\n    + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(metricWeightModifier)))\n    + \" kg\";\n  const imperialWeightModifier = Math.max(\n    Math.round(Measurements.kgToPounds(config.maxWeight - config.minWeight)),\n    4,\n  );\n  const imperial = Math.round(Measurements.kgToPounds(config.minWeight))\n    + \" + \"\n    + Dice.describeDice(Dice.simplify(Dice.rangeToDiceExpression(imperialWeightModifier)))\n    + \" lb.\";\n\n  return `${metric} (${imperial})`;\n}\n\nexport function humanStandard(): SizeMatrix {\n  return [\n    {\n      gender: \"female\",\n      entries: [\n        {\n          ageCategoryName: \"infant\",\n          sizeGeneratorConfig: {\n            minHeight: 49,\n            maxHeight: Math.floor(49 * 1.05),\n            minWeight: 2,\n            maxWeight: Math.floor(2 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"toddler\",\n          sizeGeneratorConfig: {\n            minHeight: 80,\n            maxHeight: Math.floor(80 * 1.05),\n            minWeight: 14,\n            maxWeight: Math.floor(14 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"young child\",\n          sizeGeneratorConfig: {\n            minHeight: 115,\n            maxHeight: Math.floor(115 * 1.05),\n            minWeight: 19,\n            maxWeight: Math.floor(19 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"child\",\n          sizeGeneratorConfig: {\n            minHeight: 149,\n            maxHeight: Math.floor(149 * 1.05),\n            minWeight: 20,\n            maxWeight: Math.floor(20 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"teenager\",\n          sizeGeneratorConfig: {\n            minHeight: 158,\n            maxHeight: Math.floor(158 * 1.05),\n            minWeight: 57,\n            maxWeight: Math.floor(57 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"adult\",\n          sizeGeneratorConfig: {\n            minHeight: 160,\n            maxHeight: Math.floor(160 * 1.05),\n            minWeight: 64,\n            maxWeight: Math.floor(64 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"elderly\",\n          sizeGeneratorConfig: {\n            minHeight: 155,\n            maxHeight: Math.floor(155 * 1.05),\n            minWeight: 60,\n            maxWeight: Math.floor(60 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n      ],\n    },\n    {\n      gender: \"male\",\n      entries: [\n        {\n          ageCategoryName: \"infant\",\n          sizeGeneratorConfig: {\n            minHeight: 50,\n            maxHeight: Math.floor(50 * 1.05),\n            minWeight: 2,\n            maxWeight: Math.floor(2 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"toddler\",\n          sizeGeneratorConfig: {\n            minHeight: 85,\n            maxHeight: Math.floor(85 * 1.05),\n            minWeight: 14,\n            maxWeight: Math.floor(14 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"young child\",\n          sizeGeneratorConfig: {\n            minHeight: 115,\n            maxHeight: Math.floor(115 * 1.05),\n            minWeight: 20,\n            maxWeight: Math.floor(20 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"child\",\n          sizeGeneratorConfig: {\n            minHeight: 145,\n            maxHeight: Math.floor(145 * 1.05),\n            minWeight: 36,\n            maxWeight: Math.floor(36 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"teenager\",\n          sizeGeneratorConfig: {\n            minHeight: 170,\n            maxHeight: Math.floor(170 * 1.05),\n            minWeight: 68,\n            maxWeight: Math.floor(68 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"adult\",\n          sizeGeneratorConfig: {\n            minHeight: 175,\n            maxHeight: Math.floor(175 * 1.05),\n            minWeight: 70,\n            maxWeight: Math.floor(70 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n        {\n          ageCategoryName: \"elderly\",\n          sizeGeneratorConfig: {\n            minHeight: 170,\n            maxHeight: Math.floor(170 * 1.05),\n            minWeight: 65,\n            maxWeight: Math.floor(65 * 1.05),\n            minLength: 0,\n            maxLength: 0,\n            minMass: 0,\n            maxMass: 0,\n          },\n        },\n      ],\n    },\n  ];\n}\n","import type AgeCategory from \"$lib/age/age_category\";\nimport type SizeGeneratorConfig from \"./size_generator_config\";\nimport * as Sizes from \"./sizes\";\n\nexport type SizeMatrix = SizeMatrixRow[];\n\nexport type SizeMatrixRow = {\n  gender: string;\n  entries: SizeMatrixEntry[];\n};\n\nexport type SizeMatrixEntry = {\n  ageCategoryName: string;\n  sizeGeneratorConfig: SizeGeneratorConfig;\n};\n\nexport type SizeAgeSummary = {\n  genderName: string;\n  ageCategoryName: string;\n  minAge: number;\n  maxAge: number;\n  minHeight: number;\n  maxHeight: number;\n  heightRange: string;\n  minWeight: number;\n  maxWeight: number;\n  weightRange: string;\n};\n\nexport function convertMatrixToSummary(\n  matrix: SizeMatrix,\n  ageCategories: AgeCategory[],\n  gender: string,\n): SizeAgeSummary[] {\n  let result = [];\n\n  for (let i = 0; i < matrix.length; i++) {\n    if (matrix[i].gender == gender) {\n      for (let j = 0; j < matrix[i].entries.length; j++) {\n        let minAge;\n        let maxAge;\n\n        for (let x = 0; x < ageCategories.length; x++) {\n          if (ageCategories[x].name == matrix[i].entries[j].ageCategoryName) {\n            minAge = ageCategories[x].minAge;\n            maxAge = ageCategories[x].maxAge;\n          }\n        }\n        result.push({\n          genderName: gender,\n          ageCategoryName: matrix[i].entries[j].ageCategoryName,\n          minAge: minAge || 0,\n          maxAge: maxAge || 0,\n          minHeight: matrix[i].entries[j].sizeGeneratorConfig.minHeight,\n          maxHeight: matrix[i].entries[j].sizeGeneratorConfig.maxHeight,\n          heightRange: Sizes.getHeightRange(matrix[i].entries[j].sizeGeneratorConfig),\n          minWeight: matrix[i].entries[j].sizeGeneratorConfig.minWeight,\n          maxWeight: matrix[i].entries[j].sizeGeneratorConfig.maxWeight,\n          weightRange: Sizes.getWeightRange(matrix[i].entries[j].sizeGeneratorConfig),\n        });\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function getSizeConfig(gender: string, ageCategory: string, sizeMatrix: SizeMatrix): SizeGeneratorConfig {\n  for (let i = 0; i < sizeMatrix.length; i++) {\n    if (sizeMatrix[i].gender == gender) {\n      for (let j = 0; j < sizeMatrix[i].entries.length; j++) {\n        if (sizeMatrix[i].entries[j].ageCategoryName == ageCategory) {\n          return sizeMatrix[i].entries[j].sizeGeneratorConfig;\n        }\n      }\n    }\n  }\n\n  throw new Error(`Failed to find size config for ${gender} and ${ageCategory}`);\n}\n"],"names":["getCategoryFromAge","age","categories","i","getHumanVariant","ageModifier","humanStandard","getVariant","getMaxAge","maxAge","randomWeighted","names","options","possibleAgeCategories","RND.weighted","cmToInches","cm","kgToPounds","kg","inchesToFeetExpression","inches","expression","feet","remainder","getHeightRange","config","metricHeightModifier","metric","Dice.describeDice","Dice.simplify","Dice.rangeToDiceExpression","imperialHeightModifier","Measurements.cmToInches","imperial","Measurements.inchesToFeetExpression","weightModifier","heightModifier","standard","variant","row","j","entry","name","getWeightRange","metricWeightModifier","imperialWeightModifier","Measurements.kgToPounds","convertMatrixToSummary","matrix","ageCategories","gender","result","minAge","x","Sizes.getHeightRange","Sizes.getWeightRange","getSizeConfig","ageCategory","sizeMatrix"],"mappings":"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"}