import{i as o,b as x,c as w,r as f}from"./index.mSNu4kGi.js";import{a as D,c as p,b as u,u as N}from"./index.t_3Oaqcp.js";import"./index.5Vy_trRi.js";import{h as y,e as E}from"./characters.4syFHFx8.js";import{D as j,b as S}from"./domains.QVf4G9L5.js";import{g as $}from"./premade_configs.tyrbIq0A.js";import"./lodash.8uzXjwZ5.js";import{g as b,a as O,c as q}from"./generator_sets.ttFQ2mfI.js";class J{noun;target;verb;strength;constructor(e,a,i,s){this.noun=e,this.verb=a,this.target=i,this.strength=s}}class A{strength;constructor(e){this.strength=e}generate(){let e="",a="";return this.strength==-1?(e=o(["dislikes","distrusts","mistrusts","is annoyed by"]),a="enemy"):this.strength==-2?(e=o(["fears","hates","loathes","can't stand"]),a="enemy"):this.strength==0?(e=o(["is intrigued by","is ambivalent towards","is neutral towards","is suspicious of"]),a="acquaintance"):this.strength==1?(e=o(["likes","is amused by","enjoys the company of","enjoys","trusts"]),a="friend"):(e=o(["loves","deeply trusts","adores"]),a="friend"),new J(a,e,0,this.strength)}}class P{primary;secondaries;constructor(){this.primary=new j,this.secondaries=[]}}class C{name;description;personalityTraits;appearanceTraits;constructor(){this.name="",this.description="",this.personalityTraits=[],this.appearanceTraits=[]}}class R{name;species;gender;ageCategory;domains;titles;realm;description;personalityTraits;personality;appearance;holyItem;holySymbol;isAlive;constructor(){this.name="",this.species=y,this.gender=y.genders[0],this.ageCategory=y.ageCategories[0],this.domains=new P,this.titles=[],this.realm=new C,this.description="",this.personality="",this.personalityTraits=[],this.appearance="",this.holyItem="",this.holySymbol="",this.isAlive=!0}describe(){const e=this.species.adjective,a=this.gender.pronouns.subjective;let i="god";const s=[];s.push(this.domains.primary.name);for(let n=0;n<this.domains.secondaries.length;n++)s.push(this.domains.secondaries[n].name);this.gender.name==="female"&&(i="goddess");let r=`${this.name} appears as ${D(e)} ${e} ${this.ageCategory.noun}.`;return r+=` ${p(a)} has ${this.appearance}. ${this.personality}.`,r+=` ${this.name} is the ${i} of ${u(s)}.`,r+=` ${p(a)} resides in ${N(this.realm.name)}.`,r}}function M(t,e,a,i,s,r){let n=new R;return n.name=t,n.species=e,n.gender=a,n.ageCategory=i,n.domains=r,n.realm=s,n}class F{config;constructor(e){this.config=e}generate(){let e=[],a=[];const i=E(this.config.characterGeneratorConfig);if(this.config.maleNameGenerator===null)throw new Error("male name generator not set");if(this.config.femaleNameGenerator===null)throw new Error("female name generator not set");let s=this.config.femaleNameGenerator.generate(1)[0];i.gender.name=="male"&&(s=this.config.maleNameGenerator.generate(1)[0]);let r=o(this.config.realms);if(r===void 0)throw new Error("realm is undefined");let n=M(s,i.species,i.gender,i.ageCategory,r,this.config.domainSet);e=this.config.domainSet.primary.holyItems,a=this.config.domainSet.primary.holySymbols,n.holyItem=o(e),n.holySymbol=o(a);const l=x(100),h=i.physicalTraits;let m=[];for(let d=0;d<h.length;d++)m.push(h[d].description);if(l>80){let d=o(n.realm.appearanceTraits);if(d===void 0)throw console.log(JSON.stringify(n.realm)),new Error("realm appearance trait is undefined");m.push(d.phrase)}return n.personalityTraits=i.personalityTraits,n.personality=H(n),n.appearance=u(m),n.description=n.describe(),n}}function H(t){let e=[];for(let a=0;a<t.personalityTraits.length;a++)e.push(t.personalityTraits[a].descriptor);return p(t.gender.pronouns.subjective)+" is "+u(e)}class I{domainSet;realms;characterGeneratorConfig;femaleNameGenerator;maleNameGenerator;constructor(){let e=$();this.realms=[],this.domainSet=new P,this.characterGeneratorConfig=e;let a=b("human",O());this.femaleNameGenerator=a.female,this.maleNameGenerator=a.male}}class z{config;constructor(e){this.config=e}generate(){let e=new P;if(this.config.domains=w(this.config.domains),this.config.domains.length<this.config.numberOfDomains)throw new Error("Not enough domains in domain generator config for the requested number of domains.");let a=this.config.domains.pop();if(a!==void 0)e.primary=a;else throw new Error("No primary domain found.");for(let i=0;i<this.config.numberOfDomains;i++){const s=this.config.domains.pop();if(s===void 0)throw new Error("No secondary domain found.");e.secondaries.push(s)}return e}}class L{numberOfDomains;domains;constructor(){this.numberOfDomains=1,this.domains=JSON.parse(JSON.stringify(S))}}class W{name;description;members;leader;constructor(){this.name="",this.description="",this.members=[],this.leader=-1}}class B{deity;relationships;constructor(){this.deity=new R,this.relationships=[]}}class V{config;constructor(e){this.config=e}generate(){let e=new W,a=new I;a.characterGeneratorConfig.speciesOptions=this.config.speciesOptions,a.realms=this.config.realms,a.femaleNameGenerator=this.config.femaleNameGenerator,a.maleNameGenerator=this.config.maleNameGenerator;const i=f.int(this.config.minDeities,this.config.maxDeities),s=K(i);for(let l=0;l<s.length;l++){let h=new B;a.domainSet=s[l];let d=new F(a).generate();h.deity=d,e.members.push(h)}let r=new A(0),n=f.int(1,3);for(let l=0;l<n;l++)for(let h=0;h<e.members.length;h++){r.strength=f.int(-2,2);const m=f.int(0,e.members.length-1);if(m!=h){let d=!1;for(let g=0;g<e.members[h].relationships.length;g++)e.members[h].relationships[g].target==m&&(d=!0);if(!d){let g=r.generate();g.target=m,e.members[h].relationships.push(g);let T=r.generate();T.target=h,e.members[m].relationships.push(T)}}}if(e.members.length>1)for(let l=0;l<e.members.length;l++){let h=[];for(let d=0;d<e.members[l].relationships.length;d++)h.push(_(e.members[l].relationships[d],e.members[e.members[l].relationships[d].target].deity.name));const m=" "+e.members[l].deity.name+" "+u(h)+".";e.members[l].deity.description+=m}return e}}function _(t,e){return o([`${t.verb} ${e}`])}function K(t){let e=new L,a=new z(e),i=[],s=w(JSON.parse(JSON.stringify(e.domains)));for(let r=0;r<t;r++){let n=[];for(let h=0;h<a.config.numberOfDomains+1;h++)n.push(s.pop());a.config.domains=n;let l=a.generate();i.push(l)}return i}class Q{domains;realms;minDeities;maxDeities;speciesOptions;femaleNameGenerator;maleNameGenerator;constructor(){this.domains=JSON.parse(JSON.stringify(S)),this.realms=[],this.speciesOptions=[y],this.minDeities=1,this.maxDeities=16;let e=b("fantasy",q());this.femaleNameGenerator=e.female,this.maleNameGenerator=e.male}}function U(t,e){const a=[];for(let i=0;i<t.length;i++)for(let s=0;s<e.length;s++)t[i].tags.includes(e[s])&&a.push(t[i]);return a}const X=[{phrase:"six feathered wings",bodyPart:"wings",tags:["sky"]},{phrase:"four feathered wings",bodyPart:"wings",tags:["sky"]},{phrase:"two large feathered wings",bodyPart:"wings",tags:["sky","dreamlike"]},{phrase:"large leathery wings",bodyPart:"wings",tags:["sky","death"]},{phrase:"a lion's tail'",bodyPart:"tail",tags:["earth","forest"]},{phrase:"a whip-like tail",bodyPart:"tail",tags:["earth","death"]},{phrase:"two tails",bodyPart:"tail",tags:["alien"]},{phrase:"the horns of a goat",bodyPart:"horns",tags:["earth","forest"]},{phrase:"the horns of a ram",bodyPart:"horns",tags:["earth","forest"]},{phrase:"the antlers of a stag",bodyPart:"horns",tags:["forest"]},{phrase:"the antlers of a deer",bodyPart:"horns",tags:["forest","surreal"]},{phrase:"short, pointed horns",bodyPart:"horns",tags:["earth","death"]},{phrase:"tall, straight horns",bodyPart:"horns",tags:["earth","death"]},{phrase:"glowing blue eyes",bodyPart:"eyes",tags:["water"]},{phrase:"glowing yellow eyes",bodyPart:"eyes",tags:["sky","water"]},{phrase:"glowing red eyes",bodyPart:"eyes",tags:["earth","death","alien"]},{phrase:"glowing orange eyes",bodyPart:"eyes",tags:["earth","sky"]},{phrase:"glowing green eyes",bodyPart:"eyes",tags:["earth","forest"]},{phrase:"glowing purple eyes",bodyPart:"eyes",tags:["death","alien"]},{phrase:"eyes that burn with an inner fire",bodyPart:"eyes",tags:["sky"]},{phrase:"four eyes",bodyPart:"eyes",tags:["alien"]},{phrase:"six eyes",bodyPart:"eyes",tags:["alien"]},{phrase:"eight eyes",bodyPart:"eyes",tags:["alien"]},{phrase:"no eyes",bodyPart:"eyes",tags:["death","alien"]},{phrase:"reptilian eyes",bodyPart:"eyes",tags:["forest","earth"]},{phrase:"scales instead of skin",bodyPart:"skin",tags:["earth","forest"]},{phrase:"skin that glows faintly",bodyPart:"skin",tags:["sky"]},{phrase:"skin made of living rock",bodyPart:"skin",tags:["earth"]},{phrase:"blue skin",bodyPart:"skin",tags:["water"]},{phrase:"green skin",bodyPart:"skin",tags:["water"]},{phrase:"crystalline skin",bodyPart:"skin",tags:["earth"]},{phrase:"translucent grey skin",bodyPart:"skin",tags:["death"]},{phrase:"dull grey skin",bodyPart:"skin",tags:["death"]},{phrase:"skin covered in leaves",bodyPart:"skin",tags:["forest"]},{phrase:"skin made of star-lit blackness",bodyPart:"skin",tags:["alien"]},{phrase:"iridescent skin",bodyPart:"skin",tags:["alien","surreal"]},{phrase:"eight tentacles",bodyPart:"tentacles",tags:["alien"]},{phrase:"six tentacles",bodyPart:"tentacles",tags:["alien"]},{phrase:"four tentacles",bodyPart:"tentacles",tags:["alien"]},{phrase:"the head of a lion",bodyPart:"head",tags:["forest"]},{phrase:"the head of a bear",bodyPart:"head",tags:["forest"]},{phrase:"the head of a dragon",bodyPart:"head",tags:["earth","forest"]},{phrase:"the head of a swan",bodyPart:"head",tags:["sky","water"]},{phrase:"the head of a deer",bodyPart:"head",tags:["forest"]},{phrase:"the head of a cat",bodyPart:"head",tags:["earth","desert"]},{phrase:"the head of a wolf",bodyPart:"head",tags:["earth","forest"]},{phrase:"twelve feathered wings",bodyPart:"wings",tags:["sky","dreamlike"]},{phrase:"bat-like wings",bodyPart:"wings",tags:["night","moon"]},{phrase:"insect-like wings",bodyPart:"wings",tags:["earth","forest"]},{phrase:"crystal-clear wings",bodyPart:"wings",tags:["sky","surreal"]},{phrase:"feathered wings that shimmer",bodyPart:"wings",tags:["sky","water"]},{phrase:"a serpent's tail",bodyPart:"tail",tags:["earth","water"]},{phrase:"a tail with a bioluminescent tip",bodyPart:"tail",tags:["water","surreal"]},{phrase:"three tails",bodyPart:"tail",tags:["surreal"]},{phrase:"twisted horns with glowing runes",bodyPart:"horns",tags:["magic","surreal"]},{phrase:"curved horns with gemstone inlays",bodyPart:"horns",tags:["earth","wealth"]},{phrase:"feathery antlers with ethereal wisps",bodyPart:"horns",tags:["forest","dreamlike"]},{phrase:"horns that emit a haunting melody",bodyPart:"horns",tags:["earth","music"]},{phrase:"pearlescent eyes that change colors",bodyPart:"eyes",tags:["sky","water"]},{phrase:"eyes with galaxies swirling within",bodyPart:"eyes",tags:["sky","cosmic"]},{phrase:"eyes that see into other dimensions",bodyPart:"eyes",tags:["surreal","alien"]},{phrase:"eyes with a mesmerizing hypnotic gaze",bodyPart:"eyes",tags:["magic","surreal"]},{phrase:"eyes that mirror the emotions of others",bodyPart:"eyes",tags:["empathy","surreal"]},{phrase:"eyes that emit sparks of lightning",bodyPart:"eyes",tags:["storm","electricity"]},{phrase:"eyes on flexible stalks",bodyPart:"eyes",tags:["alien","surreal"]},{phrase:"molten lava-like skin",bodyPart:"skin",tags:["volcano","fire"]},{phrase:"shimmering opalescent skin",bodyPart:"skin",tags:["sky","water"]},{phrase:"butterfly wings with shifting patterns",bodyPart:"wings",tags:["dream","surreal"]},{phrase:"floating ethereal wings of light",bodyPart:"wings",tags:["dream","surreal"]},{phrase:"wings made of iridescent mist",bodyPart:"wings",tags:["dream","surreal"]},{phrase:"feathers that change color with emotions",bodyPart:"wings",tags:["dream","empathy"]},{phrase:"a tail of shimmering stardust",bodyPart:"tail",tags:["dream","cosmic"]},{phrase:"tail that trails rainbows as you move",bodyPart:"tail",tags:["dream","surreal"]},{phrase:"a tail with glowing constellations",bodyPart:"tail",tags:["dream","cosmic"]},{phrase:"horns that emit soft, soothing melodies",bodyPart:"horns",tags:["dream","music"]},{phrase:"horns adorned with floating gemstones",bodyPart:"horns",tags:["dream","surreal"]},{phrase:"horns that sparkle like starlight",bodyPart:"horns",tags:["dream","cosmic"]},{phrase:"eyes that reflect the landscapes of dreams",bodyPart:"eyes",tags:["dream","surreal"]},{phrase:"eyes with ever-changing patterns of light",bodyPart:"eyes",tags:["dream","surreal"]},{phrase:"eyes that shimmer like enchanted pools",bodyPart:"eyes",tags:["dream","water"]},{phrase:"skin that shifts like flowing watercolors",bodyPart:"skin",tags:["dream","surreal"]},{phrase:"skin that glows softly with inner thoughts",bodyPart:"skin",tags:["dream","empathy"]},{phrase:"skin covered in delicate, luminescent vines",bodyPart:"skin",tags:["dream","forest"]},{phrase:"skin that shimmers like a mirage",bodyPart:"skin",tags:["dream","desert"]},{phrase:"skin that resembles the surface of a nebula",bodyPart:"skin",tags:["dream","cosmic"]},{phrase:"skin that changes texture with emotions",bodyPart:"skin",tags:["dream","empathy"]},{phrase:"a head crowned with floating ethereal flames",bodyPart:"head",tags:["dream","fire"]},{phrase:"a head with a halo of radiant energy",bodyPart:"head",tags:["dream","surreal"]},{phrase:"fiery wings with ember-like feathers",bodyPart:"wings",tags:["fire","heat"]},{phrase:"wings that resemble molten lava flows",bodyPart:"wings",tags:["fire","earth"]},{phrase:"smoldering wings that leave trails of sparks",bodyPart:"wings",tags:["fire","surreal"]},{phrase:"earthen wings with intricate rock formations",bodyPart:"wings",tags:["earth","mountain"]},{phrase:"wings made of intertwined vines and roots",bodyPart:"wings",tags:["earth","forest"]},{phrase:"crystalline wings that shimmer like gemstones",bodyPart:"wings",tags:["earth","jewel"]},{phrase:"a tail with a fiery, flickering tip",bodyPart:"tail",tags:["fire","surreal"]},{phrase:"tail adorned with rugged, earthy textures",bodyPart:"tail",tags:["earth","mountain"]},{phrase:"tail with geode-like patterns and colors",bodyPart:"tail",tags:["earth","jewel"]},{phrase:"horns that resemble twisting flames",bodyPart:"horns",tags:["fire","heat"]},{phrase:"horns made of sturdy, petrified wood",bodyPart:"horns",tags:["earth","forest"]},{phrase:"horns with patterns reminiscent of ancient runes",bodyPart:"horns",tags:["earth","magic"]},{phrase:"eyes that flicker like burning embers",bodyPart:"eyes",tags:["fire","heat"]},{phrase:"eyes with deep, earthy hues like rich soil",bodyPart:"eyes",tags:["earth","nature"]},{phrase:"eyes that reflect the molten core of the earth",bodyPart:"eyes",tags:["earth","cosmic"]},{phrase:"skin that glows with inner fire",bodyPart:"skin",tags:["fire","surreal"]},{phrase:"skin with a texture resembling cracked earth",bodyPart:"skin",tags:["earth","desert"]},{phrase:"skin covered in intricate, glowing tribal patterns",bodyPart:"skin",tags:["earth","magic"]},{phrase:"a head crowned with blazing, fiery tendrils",bodyPart:"head",tags:["fire","surreal"]},{phrase:"a head with rugged, stone-like features",bodyPart:"head",tags:["earth","mountain"]},{phrase:"a head adorned with gemstone-encrusted horns",bodyPart:"head",tags:["earth","jewel"]}];function Y(t){return U(X,t.appearanceTags)}class c{name;nameOptions;appearanceTags;personalityTags;descriptionOptions;constructor(e,a,i,s,r){this.name=e,this.nameOptions=a,this.appearanceTags=i,this.personalityTags=s,this.descriptionOptions=r}}const Z=[new c("sky",["The Eternal Heavens","The Heavens Above","Heaven","The Sky","The Heavens","The Celestial Realm","The Empyrean","The Firmament"],["sky","clouds","sun","moon","stars","rainbows","light"],["mercurial","caring","wise","flexible","majestic","powerful","graceful","serene"],["Far above the mortal world, {name} is a realm of light and splendor.","{name} is a realm of light and beauty, where celestial beings roam.","The skies of {name} are awash with vibrant colors and shimmering stars."]),new c("earth",["The Earth","The Mortal Realm","The Material Plane","The Mundane World","The Physical Plane","The Human World"],["earth","mountains","rivers","forests","deserts","oceans","caves","valleys"],["stable","stubborn","physical","grounded","tenacious","reliable","practical"],["{name} is where mortals reside, going about their daily lives.","{name} is the home of all mortal beings, full of bustling cities and quiet countryside."]),new c("forest",["The Forest","The Eternal Forest","The Divine Forest","The Sylvan Realm","The Verdant Wilds","The Green Domain"],["forest","trees","plants","animals","rivers","mountains"],["caring","stable","peaceful","graceful","majestic","wise","mystical"],["Hidden far from the mortal world, {name} is deep and mysterious, full of secrets and ancient magic.","{name} is an infinite forest of beauty and mystery, where the spirits of the wild roam free.","The forests of {name} are alive with the sound of birdsong and rustling leaves."]),new c("underworld",["The Underworld","The Afterlife","The Kingdom of Death","The Great Beyond","The Netherworld","The Land of the Dead"],["death","shadow","bones","ghosts","souls","void"],["angry","brooding","peaceful","wise","merciful","judgmental","powerful"],["{name} is where souls go to rest after death, guided by the spirits of the departed.","{name} is a realm of perpetual darkness where the dead rest forever, watched over by the reapers of the underworld.","The halls of {name} are filled with the whispers of the dead, their spirits forever lingering in the shadows."]),new c("ocean",["The Vast Sea","The Sea","The Endless Ocean","The Divine Sea","The Ever-Changing Tides","The Fathomless Depths","The Coral Kingdom","The Ocean of Storms"],["water","salt","waves","foam","currents","whirlpools","tides","depths"],["mercurial","aloof","cruel","flexible","violent","majestic","mysterious"],["{name} is a realm apart from mortal seas, full of life and infinitely deep.","The deep and restless waters of {name} hide many secrets.","Beneath the surface of {name} lies a kingdom of wonder and terror."]),new c("mountain",["The Great Mountain","The Mountain","The Divine Mountain","The Endless Peak","The Celestial Summit","The Sky-Splitting Colossus","The Stone Sentinel","The Cradle of the Gods"],["earth","rock","stone","ice","snow","summit","peak","valley"],["aloof","wise","physical","stable","majestic","immovable","mysterious"],["{name} is far larger than any mountain of the mortal world.","{name} is covered in lush forests and cascading waterfalls, a towering paradise.","Beneath the peaks and valleys of {name} lies a realm of fire and darkness."]),new c("void",["The Nameless Void","The Endless Void","The Void","The Dark Beyond","The Endless Dark","The Abyss","The Great Emptiness","The Eternal Nothingness"],["alien","darkness","emptiness","silence","cold","nothingness","absence"],["alien","clever","unknowable","silent","watchful","impenetrable"],["{name} is home to things unknowable and alien.","There are mysteries in {name} that no mortal can hope to perceive, let alone understand.","{name} is a realm of eternal darkness and emptiness, where the very fabric of reality is twisted and distorted."]),new c("dream",["The Realm of Dreams","The Dreamlands","The Land of Nod","The Ethereal Plane","The Realm of Imagination","The World of Sleep"],["ethereal","fantastical","dreamlike","otherworldly","surreal","shimmering"],["mysterious","whimsical","fickle","curious","enigmatic","playful"],["{name} is a place where the impossible becomes reality and where the line between dreams and waking life is blurred.","The ethereal beauty of {name} is home to creatures born of pure imagination and fantasy.","In {name}, the landscape constantly shifts and changes, shaped by the whims of the dreamers who call it home.","The dreamscape of {name} is a realm of infinite possibilities, where anything can happen and nothing is truly impossible.","{name} is a place where the innermost thoughts and desires of mortals manifest into reality, for better or for worse.","Those who journey into {name} often find themselves caught in a never-ending cycle of dreams and nightmares."])];function ee(t,e,a,i){let s=new C;return s.name=t,s.description=e,s.personalityTraits=a,s.appearanceTraits=i,s}class ae{config;constructor(e){this.config=e}generate(){const e=[],a=this.config.numberOfRealms;let i=JSON.parse(JSON.stringify(Z));i=w(i);for(let s=0;s<a;s++){const r=i.pop();if(typeof r=="object"){const n=o(r.nameOptions),l=Y(r);if(l.length<1)throw new Error(`No appearance traits found for realm concept ${r.name}.`);let h=o(r.descriptionOptions).replace("{name}",N(n));h=p(h);const m=ee(n,h,[],l);e.push(m)}}return e}}class te{numberOfRealms;requireDualistic;constructor(){this.numberOfRealms=2,this.requireDualistic=!1}}class se{name;description;realms;pantheon;constructor(e){this.name=e,this.description="",this.realms=[],this.pantheon=null}}class ye{config;constructor(e){this.config=e}generate(){let e=new te;const i=new ae(e).generate(),s=o(this.config.categories),r=new se(this.config.nameGenerator.generate(1)[0]);if(r.realms=i,s.hasDeities){let n=new Q;n.realms=i,n.speciesOptions=this.config.deitySpeciesOptions,n.minDeities=s.minDeities,n.maxDeities=s.maxDeities,n.femaleNameGenerator=this.config.femaleNameGenerator,n.maleNameGenerator=this.config.maleNameGenerator;let h=new V(n).generate();if(h.description=s.description,r.pantheon=h,s.hasLeader){r.pantheon.leader=f.int(0,r.pantheon.members.length-1);let m="Queen of the Gods";r.pantheon.members[r.pantheon.leader].deity.gender.name==="male"&&(m="King of the Gods"),r.pantheon.members[r.pantheon.leader].deity.titles.push(m),r.pantheon.description+=` ${r.pantheon.members[r.pantheon.leader].deity.name} is the ${m}.`}}return r.pantheon!==null?r.description=r.pantheon.description+" "+G()+" "+p(v())+".":r.description=s.description+" "+G()+" "+p(v())+".",r}}function v(){let t=o(["{follower} gather in {place} for {service}","{follower} congregate in {place} to be led in {service} by {leader}","{follower} meet in {place} to engage in {service} and hear from {leader}","At {place}, {follower} come together for {service} led by {leader}","Join {follower} at {place} for {service} and fellowship with {leader}","{follower} assemble in {place} to participate in {service} and share with {leader}","{follower} unite at {place} for {service} and to learn from {leader}","At {place}, {follower} come together to seek guidance and wisdom from {leader} through {service}"]);const e=o(["adherents","believers","disciples","devotees","faithful","followers","pilgrims","worshippers","zealots"]),a=o(["temples","churches","mosques","synagogues","chapels","shrines","sanctuaries","meeting halls","community centers","outdoor arenas"]),i=o(["silent meditation","guided meditation","chanting","prayer","sacrament","communion","worship","ritual dance","ritual music","structured recitation","spontaneous sharing","teachings and discussions","ritual sacrifice"]),s=o(["priest","priestess","minister","shaman","spiritual guide","community leader","wise elder","prophet","guru","ascended master","enlightened one","mystic","oracle"]);return t=t.replace("{follower}",e).replace("{place}",a).replace("{service}",i).replace("{leader}",D(s)+" "+s),t}function G(){let t=o(["Regular gatherings happen once a week.","Regular gatherings happen daily.","Regular gatherings happen once a month.","Weekly gatherings take place every {weekday}.","They come together every {weekday} for a time of {service}.","Their community meets {frequency} for {service} at {time}.","Their gatherings occur {frequency}, bringing {follower} together for {service}.","They gather {frequency} at {place} for {service} and {activity}.","Every {weekday} they gather for {service}, followed by {activity}.","Their gatherings happen {frequency} at {place} and feature {service}, {activity}, and food/drink.","People are invited to the {occasion} gathering, where they partake in {service} and {activity}."]);return t=t.replace("{weekday}",o(["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"])).replace("{frequency}",o(["weekly","bi-weekly","monthly","quarterly","annually"])).replace("{follower}",o(["worshipers","devotees","believers","faithful","followers","pilgrims"])).replace("{service}",o(["prayer","worship","meditation","reflection","ritual","sermon","teaching"])).replace("{time}",o(["sunrise","midday","sunset","evening","night"])).replace("{place}",o(["the temple","the church","the mosque","the synagogue","the chapel","the shrine","the sanctuary","the meeting hall"])).replace("{activity}",o(["fellowship","conversation","sharing","food and drink","community service","study"])).replace("{occasion}",o(["special","holiday","festive","solemn"])),t}class k{name;description;hasDeities;hasLeader;minDeities;maxDeities;constructor(){this.name="",this.description="",this.hasDeities=!1,this.hasLeader=!1,this.minDeities=0,this.maxDeities=0}}class re extends k{constructor(){super(),this.name="monotheism",this.description="This religion "+o(["has a single all-powerful god","is monotheistic"])+".",this.hasDeities=!0,this.minDeities=1,this.maxDeities=1}}class ie extends k{constructor(){super(),this.name="polytheism",this.description="This religion "+o(["has several gods","is polytheistic"])+".",this.hasDeities=!0,this.hasLeader=!0,this.minDeities=2,this.maxDeities=16}}class ne extends k{constructor(){super(),this.name="shamanism",this.description="This religion is shamanistic."}}function oe(){return[new re,new ie,new ne]}function ue(t,e){for(let a=0;a<e.length;a++)if(e[a].name===t)return e[a];throw new Error(`No religion category found with name ${t}.`)}class we{categories;deitySpeciesOptions;nameGenerator;femaleNameGenerator;maleNameGenerator;constructor(){this.categories=oe(),this.deitySpeciesOptions=[y];let e=b("human",O());this.nameGenerator=e.family,this.femaleNameGenerator=e.female,this.maleNameGenerator=e.male}}export{we as R,oe as a,ye as b,ue as c};
//# sourceMappingURL=generatorconfig.AkYhXzSj.js.map
