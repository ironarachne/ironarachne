{"version":3,"file":"generator.7d2ac0ba.js","sources":["../../../../../../src/lib/religion/categories/category.ts","../../../../../../src/lib/religion/categories/monotheism.ts","../../../../../../src/lib/religion/categories/polytheism.ts","../../../../../../src/lib/religion/categories/shamanism.ts","../../../../../../src/lib/religion/categories/categories.ts","../../../../../../src/lib/religion/generatorconfig.ts","../../../../../../src/lib/relationships/relationship.ts","../../../../../../src/lib/relationships/generator.ts","../../../../../../src/lib/religion/domains/domainset.ts","../../../../../../src/lib/religion/realms/realm.ts","../../../../../../src/lib/religion/deities/deity.ts","../../../../../../src/lib/religion/deities/generatorconfig.ts","../../../../../../src/lib/religion/deities/generator.ts","../../../../../../src/lib/religion/domains/generatorconfig.ts","../../../../../../src/lib/religion/domains/generator.ts","../../../../../../src/lib/religion/pantheons/generatorconfig.ts","../../../../../../src/lib/religion/pantheons/pantheonmember.ts","../../../../../../src/lib/religion/pantheons/pantheon.ts","../../../../../../src/lib/religion/pantheons/generator.ts","../../../../../../src/lib/appearance.ts","../../../../../../src/lib/religion/realms/realmconcept.ts","../../../../../../src/lib/religion/appearancetraits.ts","../../../../../../src/lib/religion/realms/generatorconfig.ts","../../../../../../src/lib/religion/realms/realmconcepts.ts","../../../../../../src/lib/religion/realms/generator.ts","../../../../../../src/lib/religion/religion.ts","../../../../../../src/lib/religion/generator.ts"],"sourcesContent":["\"use strict\";\n\nexport default class ReligionCategory {\n  name: string;\n  description: string;\n  hasDeities: boolean;\n  hasLeader: boolean;\n  minDeities: number;\n  maxDeities: number;\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.hasDeities = false;\n    this.hasLeader = false;\n    this.minDeities = 0;\n    this.maxDeities = 0;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport ReligionCategory from \"./category.js\";\n\nexport default class Monotheism extends ReligionCategory {\n  constructor() {\n    super();\n    this.name = \"monotheism\";\n    this.description = \"This religion \" + RND.item([\"has a single all-powerful god\", \"is monotheistic\"]) + \".\";\n    this.hasDeities = true;\n    this.minDeities = 1;\n    this.maxDeities = 1;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport ReligionCategory from \"./category.js\";\n\nexport default class Polytheism extends ReligionCategory {\n  constructor() {\n    super();\n    this.name = \"polytheism\";\n    this.description = \"This religion \" + RND.item([\"has several gods\", \"is polytheistic\"]) + \".\";\n    this.hasDeities = true;\n    this.hasLeader = true;\n    this.minDeities = 2;\n    this.maxDeities = 16;\n  }\n}\n","\"use strict\";\n\nimport ReligionCategory from \"./category.js\";\n\nexport default class Shamanism extends ReligionCategory {\n  constructor() {\n    super();\n    this.name = \"shamanism\";\n    this.description = \"This religion is shamanistic.\";\n  }\n}\n","\"use strict\";\n\nimport ReligionCategory from \"./category.js\";\nimport Monotheism from \"./monotheism.js\";\nimport Polytheism from \"./polytheism.js\";\nimport Shamanism from \"./shamanism.js\";\n\nexport function all(): ReligionCategory[] {\n  return [new Monotheism(), new Polytheism(), new Shamanism()];\n}\n","\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport * as Categories from \"./categories/categories.js\";\nimport ReligionCategory from \"./categories/category.js\";\n\nexport default class ReligionGeneratorConfig {\n  categories: ReligionCategory[];\n  nameGenerator: MUN.Generator;\n  femaleNameGenerator: MUN.Generator;\n  maleNameGenerator: MUN.Generator;\n\n  constructor() {\n    this.categories = Categories.all();\n\n    let genSet = new MUN.HumanSet();\n\n    if (genSet.family === null) {\n      throw new Error(\"No family name generator found.\");\n    } else if (genSet.female === null) {\n      throw new Error(\"No female name generator found\");\n    } else if (genSet.male === null) {\n      throw new Error(\"No male name generator found\");\n    }\n\n    this.nameGenerator = genSet.family;\n    this.femaleNameGenerator = genSet.female;\n    this.maleNameGenerator = genSet.male;\n  }\n}\n","\"use strict\";\n\nexport default class Relationship {\n  noun: string;\n  target: number;\n  verb: string;\n  strength: number;\n\n  constructor(noun: string, verb: string, target: number, strength: number) {\n    this.noun = noun;\n    this.verb = verb;\n    this.target = target;\n    this.strength = strength;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport Relationship from \"./relationship.js\";\n\nexport default class RelationshipGenerator {\n  strength: number;\n\n  constructor(strength: number) {\n    this.strength = strength;\n  }\n\n  generate(): Relationship {\n    let verb = \"\";\n    let noun = \"\";\n\n    if (this.strength == -1) {\n      verb = RND.item([\"dislikes\", \"distrusts\", \"mistrusts\", \"is annoyed by\"]);\n      noun = \"enemy\";\n    } else if (this.strength == -2) {\n      verb = RND.item([\"fears\", \"hates\", \"loathes\", \"can't stand\"]);\n      noun = \"enemy\";\n    } else if (this.strength == 0) {\n      verb = RND.item([\n        \"is intrigued by\",\n        \"is ambivalent towards\",\n        \"is neutral towards\",\n        \"is suspicious of\",\n      ]);\n      noun = \"acquaintance\";\n    } else if (this.strength == 1) {\n      verb = RND.item([\"likes\", \"is amused by\", \"enjoys the company of\", \"enjoys\", \"trusts\"]);\n      noun = \"friend\";\n    } else {\n      verb = RND.item([\"loves\", \"deeply trusts\", \"adores\"]);\n      noun = \"friend\";\n    }\n\n    return new Relationship(noun, verb, 0, this.strength);\n  }\n}\n","\"use strict\";\n\nimport Domain from \"./domain.js\";\n\nexport default class DomainSet {\n  primary: Domain;\n  secondaries: Domain[];\n\n  constructor() {\n    this.secondaries = [];\n  }\n}\n","\"use strict\";\n\nexport default class Realm {\n  name: string;\n  description: string;\n  personalityTraits: string[];\n  appearanceTraits: string[];\n\n  constructor(\n    name: string,\n    description: string,\n    personalityTraits: string[],\n    appearanceTraits: any[],\n  ) {\n    this.name = name;\n    this.description = description;\n    this.personalityTraits = personalityTraits;\n    this.appearanceTraits = appearanceTraits;\n  }\n}\n","\"use strict\";\n\nimport * as Words from \"@ironarachne/words\";\nimport AgeCategory from \"../../age/agecategory.js\";\nimport PersonalityTrait from \"../../characters/personality/personalitytrait.js\";\nimport Gender from \"../../gender.js\";\nimport type Species from \"../../species/species.js\";\nimport DomainSet from \"../domains/domainset.js\";\nimport Realm from \"../realms/realm.js\";\n\nexport default class Deity {\n  name: string;\n  species: Species;\n  gender: Gender;\n  ageCategory: AgeCategory;\n  domains: DomainSet;\n  titles: string[];\n  realm: Realm;\n  description: string;\n  personalityTraits: PersonalityTrait[];\n  personality: string;\n  appearance: string;\n  holyItem: string;\n  holySymbol: string;\n  isAlive: boolean;\n\n  constructor(\n    name: string,\n    species: Species,\n    gender: Gender,\n    ageCategory: AgeCategory,\n    realm: Realm,\n    domains: DomainSet,\n  ) {\n    this.name = name;\n    this.species = species;\n    this.gender = gender;\n    this.ageCategory = ageCategory;\n    this.domains = domains;\n    this.titles = [];\n    this.realm = realm;\n    this.description = \"\";\n    this.personality = \"\";\n    this.appearance = \"\";\n    this.holyItem = \"\";\n    this.holySymbol = \"\";\n    this.isAlive = true;\n  }\n\n  describe(): string {\n    const speciesAdj = this.species.adjective;\n    const subjectivePronoun = this.gender.subjectivePronoun;\n    let noun = \"god\";\n    const domainNames = [];\n\n    domainNames.push(this.domains.primary.name);\n\n    for (let i = 0; i < this.domains.secondaries.length; i++) {\n      domainNames.push(this.domains.secondaries[i].name);\n    }\n\n    if (this.gender.name === \"female\") {\n      noun = \"goddess\";\n    }\n\n    let description = `${this.name} appears as ${Words.article(speciesAdj)} ${speciesAdj} ${this.ageCategory.noun}.`;\n    description += ` ${Words.capitalize(subjectivePronoun)} has ${this.appearance}. ${this.personality}.`;\n    description += ` ${this.name} is the ${noun} of ${Words.arrayToPhrase(domainNames)}.`;\n    description += ` ${Words.capitalize(subjectivePronoun)} resides in ${\n      Words.uncapitalize(\n        this.realm.name,\n      )\n    }.`;\n\n    return description;\n  }\n}\n","\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport CharacterGenerator from \"../../characters/generator.js\";\nimport * as PremadeConfigs from \"../../characters/premadeconfigs.js\";\nimport DomainSet from \"../domains/domainset.js\";\nimport Realm from \"../realms/realm.js\";\n\nexport default class DeityGeneratorConfig {\n  domainSet: DomainSet;\n  realms: Realm[];\n  characterGenerator: CharacterGenerator;\n  femaleNameGenerator: MUN.Generator | null;\n  maleNameGenerator: MUN.Generator | null;\n\n  constructor() {\n    let charGenConfig = PremadeConfigs.getFantasy();\n\n    this.realms = [];\n    this.characterGenerator = new CharacterGenerator(charGenConfig);\n\n    let genSet = new MUN.HumanSet();\n\n    this.femaleNameGenerator = genSet.female;\n    this.maleNameGenerator = genSet.male;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport Deity from \"./deity.js\";\nimport DeityGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class DeityGenerator {\n  config: DeityGeneratorConfig;\n\n  constructor(config: DeityGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Deity {\n    let possibleHolyItems: string[] = [];\n    let possibleHolySymbols: string[] = [];\n\n    const characterDetails = this.config.characterGenerator.generate();\n\n    if (this.config.maleNameGenerator === null) {\n      throw new Error(\"male name generator not set\");\n    } else if (this.config.femaleNameGenerator === null) {\n      throw new Error(\"female name generator not set\");\n    }\n    let deityName = this.config.femaleNameGenerator.generate(1)[0];\n    if (characterDetails.gender.name == \"male\") {\n      deityName = this.config.maleNameGenerator.generate(1)[0];\n    }\n\n    let deity = new Deity(\n      deityName,\n      characterDetails.species,\n      characterDetails.gender,\n      characterDetails.ageCategory,\n      RND.item(this.config.realms),\n      this.config.domainSet,\n    );\n\n    possibleHolyItems = this.config.domainSet.primary.holyItems;\n    possibleHolySymbols = this.config.domainSet.primary.holySymbols;\n\n    deity.holyItem = RND.item(possibleHolyItems);\n    deity.holySymbol = RND.item(possibleHolySymbols);\n\n    const chanceOfRealmTrait = random.int(1, 100);\n\n    const physicalTraits = characterDetails.physicalTraits;\n    let appearanceTraits = [];\n\n    for (let i = 0; i < physicalTraits.length; i++) {\n      appearanceTraits.push(physicalTraits[i].description);\n    }\n\n    if (chanceOfRealmTrait > 80) {\n      appearanceTraits.push(RND.item(deity.realm.appearanceTraits).phrase);\n    }\n\n    deity.personalityTraits = characterDetails.personalityTraits;\n    deity.personality = describePersonality(deity);\n    deity.appearance = Words.arrayToPhrase(appearanceTraits);\n    deity.description = deity.describe();\n\n    return deity;\n  }\n}\n\nfunction describePersonality(deity: Deity): string {\n  let traits = [];\n\n  for (let i = 0; i < deity.personalityTraits.length; i++) {\n    traits.push(deity.personalityTraits[i].descriptor);\n  }\n\n  return Words.capitalize(deity.gender.subjectivePronoun) + \" is \" + Words.arrayToPhrase(traits);\n}\n","\"use strict\";\n\nimport Domain from \"./domain.js\";\nimport * as Domains from \"./domains.js\";\n\nexport default class DomainGeneratorConfig {\n  numberOfDomains: number;\n  domains: Domain[];\n\n  constructor() {\n    this.numberOfDomains = 1;\n    this.domains = Domains.all();\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport DomainSet from \"./domainset.js\";\nimport DomainGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class DomainGenerator {\n  config: DomainGeneratorConfig;\n\n  constructor(config: DomainGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): DomainSet {\n    let domainSet = new DomainSet();\n\n    this.config.domains = RND.shuffle(this.config.domains);\n\n    let primary = this.config.domains.pop();\n    if (primary !== undefined) {\n      domainSet.primary = primary;\n    } else {\n      throw new Error(\"No primary domain found.\");\n    }\n\n    for (let i = 0; i < this.config.numberOfDomains; i++) {\n      const d = this.config.domains.pop();\n      if (d === undefined) {\n        throw new Error(\"No secondary domain found.\");\n      }\n\n      domainSet.secondaries.push(d);\n    }\n\n    return domainSet;\n  }\n}\n","\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport Domain from \"../domains/domain.js\";\nimport * as Domains from \"../domains/domains.js\";\nimport Realm from \"../realms/realm.js\";\n\nexport default class PantheonGeneratorConfig {\n  domains: Domain[];\n  realms: Realm[];\n  minDeities: number;\n  maxDeities: number;\n  femaleNameGenerator: MUN.Generator;\n  maleNameGenerator: MUN.Generator;\n\n  constructor() {\n    this.domains = Domains.all();\n    this.realms = [];\n    this.minDeities = 1;\n    this.maxDeities = 16;\n\n    let genSet = new MUN.HumanSet();\n\n    if (genSet.female == null) {\n      throw new Error(\"no female name generator in set\");\n    } else if (genSet.male == null) {\n      throw new Error(\"no male name generator in set\");\n    }\n\n    this.femaleNameGenerator = genSet.female;\n    this.maleNameGenerator = genSet.male;\n  }\n}\n","\"use strict\";\n\nimport Relationship from \"../../relationships/relationship.js\";\nimport Deity from \"../deities/deity.js\";\n\nexport default class PantheonMember {\n  deity: Deity;\n  relationships: Relationship[];\n\n  constructor() {\n    this.relationships = [];\n  }\n}\n","\"use strict\";\n\nimport PantheonMember from \"./pantheonmember.js\";\n\nexport default class Pantheon {\n  name: string;\n  description: string;\n  members: PantheonMember[];\n  leader: number;\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.members = [];\n    this.leader = -1;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport RelationshipGenerator from \"../../relationships/generator.js\";\nimport Relationship from \"../../relationships/relationship.js\";\nimport DeityGenerator from \"../deities/generator.js\";\nimport DeityGeneratorConfig from \"../deities/generatorconfig.js\";\nimport DomainSet from \"../domains/domainset.js\";\nimport DomainGenerator from \"../domains/generator.js\";\nimport DomainGeneratorConfig from \"../domains/generatorconfig.js\";\nimport PantheonGeneratorConfig from \"./generatorconfig.js\";\nimport Pantheon from \"./pantheon.js\";\nimport PantheonMember from \"./pantheonmember.js\";\n\nexport default class PantheonGenerator {\n  config: PantheonGeneratorConfig;\n\n  constructor(config: PantheonGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Pantheon {\n    let pantheon = new Pantheon();\n\n    let deityGenConfig = new DeityGeneratorConfig();\n    deityGenConfig.realms = this.config.realms;\n    deityGenConfig.femaleNameGenerator = this.config.femaleNameGenerator;\n    deityGenConfig.maleNameGenerator = this.config.maleNameGenerator;\n\n    const numberOfDeities = random.int(this.config.minDeities, this.config.maxDeities);\n\n    const domainSets = randomDomainSets(numberOfDeities);\n\n    for (let i = 0; i < domainSets.length; i++) {\n      let member = new PantheonMember();\n      deityGenConfig.domainSet = domainSets[i];\n      let deityGen = new DeityGenerator(deityGenConfig);\n\n      let deity = deityGen.generate();\n      member.deity = deity;\n\n      pantheon.members.push(member);\n    }\n\n    let relationshipGenerator = new RelationshipGenerator(0);\n    let numberOfRelationships = random.int(1, 3);\n\n    for (let j = 0; j < numberOfRelationships; j++) {\n      for (let i = 0; i < pantheon.members.length; i++) {\n        relationshipGenerator.strength = random.int(-2, 2);\n        const target = random.int(0, pantheon.members.length - 1);\n        if (target != i) {\n          let alreadyExists = false;\n          for (let k = 0; k < pantheon.members[i].relationships.length; k++) {\n            if (pantheon.members[i].relationships[k].target == target) {\n              alreadyExists = true;\n            }\n          }\n          if (!alreadyExists) {\n            let outward = relationshipGenerator.generate();\n            outward.target = target;\n            pantheon.members[i].relationships.push(outward);\n\n            let inward = relationshipGenerator.generate();\n            inward.target = i;\n            pantheon.members[target].relationships.push(inward);\n          }\n        }\n      }\n    }\n\n    if (pantheon.members.length > 1) {\n      for (let i = 0; i < pantheon.members.length; i++) {\n        let relationships = [];\n\n        for (let x = 0; x < pantheon.members[i].relationships.length; x++) {\n          relationships.push(\n            getRelationshipPhrase(\n              pantheon.members[i].relationships[x],\n              pantheon.members[pantheon.members[i].relationships[x].target].deity.name,\n            ),\n          );\n        }\n\n        const relationshipDescription = \" \" + pantheon.members[i].deity.name + \" \" + Words.arrayToPhrase(relationships)\n          + \".\";\n\n        pantheon.members[i].deity.description += relationshipDescription;\n      }\n    }\n\n    return pantheon;\n  }\n}\n\nfunction getRelationshipPhrase(relationship: Relationship, targetName: string): string {\n  return RND.item([`${relationship.verb} ${targetName}`]);\n}\n\nfunction randomDomainSets(numberOfSets: number): DomainSet[] {\n  let domainGenConfig = new DomainGeneratorConfig();\n  let domainGen = new DomainGenerator(domainGenConfig);\n\n  let sets = [];\n  let allDomains = RND.shuffle(domainGenConfig.domains);\n\n  for (let i = 0; i < numberOfSets; i++) {\n    let domains = [];\n\n    for (let j = 0; j < domainGen.config.numberOfDomains + 1; j++) {\n      domains.push(allDomains.pop());\n    }\n\n    domainGen.config.domains = domains;\n\n    let domainSet = domainGen.generate();\n\n    sets.push(domainSet);\n  }\n\n  return sets;\n}\n","\"use strict\";\n\nexport class AppearanceTrait {\n  phrase: string;\n  bodyPart: string;\n  tags: string[];\n\n  constructor(phrase: string, bodyPart: string, tags: string[]) {\n    this.phrase = phrase;\n    this.bodyPart = bodyPart;\n    this.tags = tags;\n  }\n}\n\nexport function getAllTraitsWithTag(traits: AppearanceTrait[], tag: string) {\n  const results = [];\n\n  for (let i = 0; i < traits.length; i++) {\n    if (traits[i].tags.includes(tag)) {\n      results.push(traits[i]);\n    }\n  }\n\n  return results;\n}\n","\"use strict\";\n\nexport default class RealmConcept {\n  name: string;\n  nameOptions: string[];\n  appearanceTags: string[];\n  personalityTags: string[];\n  descriptionOptions: string[];\n\n  constructor(\n    name: string,\n    nameOptions: string[],\n    appearanceTags: string[],\n    personalityTags: string[],\n    descriptionOptions: string[],\n  ) {\n    this.name = name;\n    this.nameOptions = nameOptions;\n    this.appearanceTags = appearanceTags;\n    this.personalityTags = personalityTags;\n    this.descriptionOptions = descriptionOptions;\n  }\n}\n","\"use strict\";\n\nimport * as AppearanceTrait from \"../appearance.js\";\nimport RealmConcept from \"./realms/realmconcept.js\";\n\nexport function all() {\n  return [\n    new AppearanceTrait.AppearanceTrait(\"six feathered wings\", \"wings\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"four feathered wings\", \"wings\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"two large feathered wings\", \"wings\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"large leathery wings\", \"wings\", [\"sky\", \"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"a lion's tail'\", \"tail\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"a whip-like tail\", \"tail\", [\"earth\", \"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"two tails\", \"tail\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"the horns of a goat\", \"horns\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the horns of a ram\", \"horns\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the antlers of a stag\", \"horns\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the antlers of a deer\", \"horns\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"short, pointed horns\", \"horns\", [\"earth\", \"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"tall, straight horns\", \"horns\", [\"earth\", \"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"glowing blue eyes\", \"eyes\", [\"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"glowing yellow eyes\", \"eyes\", [\"sky\", \"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"glowing red eyes\", \"eyes\", [\"earth\", \"death\", \"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"glowing orange eyes\", \"eyes\", [\"earth\", \"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"eyes that burn with an inner fire\", \"eyes\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"four eyes\", \"eyes\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"six eyes\", \"eyes\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"eight eyes\", \"eyes\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"no eyes\", \"eyes\", [\"death\", \"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"reptilian eyes\", \"eyes\", [\"forest\", \"earth\"]),\n    new AppearanceTrait.AppearanceTrait(\"scales instead of skin\", \"skin\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"skin that glows faintly\", \"skin\", [\"sky\"]),\n    new AppearanceTrait.AppearanceTrait(\"skin made of living rock\", \"skin\", [\"earth\"]),\n    new AppearanceTrait.AppearanceTrait(\"blue skin\", \"skin\", [\"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"green skin\", \"skin\", [\"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"crystalline skin\", \"skin\", [\"earth\"]),\n    new AppearanceTrait.AppearanceTrait(\"translucent grey skin\", \"skin\", [\"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"dull grey skin\", \"skin\", [\"death\"]),\n    new AppearanceTrait.AppearanceTrait(\"skin covered in leaves\", \"skin\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"skin made of star-lit blackness\", \"skin\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"eight tentacles\", \"tentacles\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"six tentacles\", \"tentacles\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"four tentacles\", \"tentacles\", [\"alien\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a lion\", \"head\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a bear\", \"head\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a dragon\", \"head\", [\"earth\", \"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a swan\", \"head\", [\"sky\", \"water\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a deer\", \"head\", [\"forest\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a cat\", \"head\", [\"earth\", \"desert\"]),\n    new AppearanceTrait.AppearanceTrait(\"the head of a wolf\", \"head\", [\"earth\", \"forest\"]),\n  ];\n}\n\nexport function getAllAppearanceTraitsForRealmConcept(concept: RealmConcept) {\n  const traits = all();\n\n  let result: AppearanceTrait.AppearanceTrait[] = [];\n\n  for (let i = 0; i < concept.appearanceTags.length; i++) {\n    const discovered = AppearanceTrait.getAllTraitsWithTag(traits, concept.appearanceTags[i]);\n\n    result = [...result, ...discovered];\n  }\n\n  return result;\n}\n","\"use strict\";\n\nexport default class RealmGeneratorConfig {\n  numberOfRealms: number;\n  requireDualistic: boolean;\n\n  constructor() {\n    this.numberOfRealms = 2;\n    this.requireDualistic = false;\n  }\n}\n","\"use strict\";\n\nimport RealmConcept from \"./realmconcept.js\";\n\nexport function all(): RealmConcept[] {\n  return [\n    new RealmConcept(\n      \"sky\",\n      [\n        \"The Eternal Heavens\",\n        \"The Heavens Above\",\n        \"Heaven\",\n        \"The Sky\",\n        \"The Heavens\",\n        \"The Celestial Realm\",\n        \"The Empyrean\",\n        \"The Firmament\",\n      ],\n      [\"sky\", \"clouds\", \"sun\", \"moon\", \"stars\", \"rainbows\", \"light\"],\n      [\"mercurial\", \"caring\", \"wise\", \"flexible\", \"majestic\", \"powerful\", \"graceful\", \"serene\"],\n      [\n        \"Far above the mortal world, {name} is a realm of light and splendor.\",\n        \"{name} is a realm of light and beauty, where celestial beings roam.\",\n        \"The skies of {name} are awash with vibrant colors and shimmering stars.\",\n      ],\n    ),\n    new RealmConcept(\n      \"earth\",\n      [\n        \"The Earth\",\n        \"The Mortal Realm\",\n        \"The Material Plane\",\n        \"The Mundane World\",\n        \"The Physical Plane\",\n        \"The Human World\",\n      ],\n      [\"earth\", \"mountains\", \"rivers\", \"forests\", \"deserts\", \"oceans\", \"caves\", \"valleys\"],\n      [\"stable\", \"stubborn\", \"physical\", \"grounded\", \"tenacious\", \"reliable\", \"practical\"],\n      [\n        \"{name} is where mortals reside, going about their daily lives.\",\n        \"{name} is the home of all mortal beings, full of bustling cities and quiet countryside.\",\n      ],\n    ),\n    new RealmConcept(\n      \"forest\",\n      [\n        \"The Forest\",\n        \"The Eternal Forest\",\n        \"The Divine Forest\",\n        \"The Sylvan Realm\",\n        \"The Verdant Wilds\",\n        \"The Green Domain\",\n      ],\n      [\"forest\", \"trees\", \"plants\", \"animals\", \"rivers\", \"mountains\"],\n      [\"caring\", \"stable\", \"peaceful\", \"graceful\", \"majestic\", \"wise\", \"mystical\"],\n      [\n        \"Hidden far from the mortal world, {name} is deep and mysterious, full of secrets and ancient magic.\",\n        \"{name} is an infinite forest of beauty and mystery, where the spirits of the wild roam free.\",\n        \"The forests of {name} are alive with the sound of birdsong and rustling leaves.\",\n      ],\n    ),\n    new RealmConcept(\n      \"underworld\",\n      [\n        \"The Underworld\",\n        \"The Afterlife\",\n        \"The Kingdom of Death\",\n        \"The Great Beyond\",\n        \"The Netherworld\",\n        \"The Land of the Dead\",\n      ],\n      [\"death\", \"shadow\", \"bones\", \"ghosts\", \"souls\", \"void\"],\n      [\"angry\", \"brooding\", \"peaceful\", \"wise\", \"merciful\", \"judgmental\", \"powerful\"],\n      [\n        \"{name} is where souls go to rest after death, guided by the spirits of the departed.\",\n        \"{name} is a realm of perpetual darkness where the dead rest forever, watched over by the reapers of the underworld.\",\n        \"The halls of {name} are filled with the whispers of the dead, their spirits forever lingering in the shadows.\",\n      ],\n    ),\n    new RealmConcept(\n      \"ocean\",\n      [\n        \"The Vast Sea\",\n        \"The Sea\",\n        \"The Endless Ocean\",\n        \"The Divine Sea\",\n        \"The Ever-Changing Tides\",\n        \"The Fathomless Depths\",\n        \"The Coral Kingdom\",\n        \"The Ocean of Storms\",\n      ],\n      [\"water\", \"salt\", \"waves\", \"foam\", \"currents\", \"whirlpools\", \"tides\", \"depths\"],\n      [\"mercurial\", \"aloof\", \"cruel\", \"flexible\", \"violent\", \"majestic\", \"mysterious\"],\n      [\n        \"{name} is a realm apart from mortal seas, full of life and infinitely deep.\",\n        \"The deep and restless waters of {name} hide many secrets.\",\n        \"Beneath the surface of {name} lies a kingdom of wonder and terror.\",\n      ],\n    ),\n    new RealmConcept(\n      \"mountain\",\n      [\n        \"The Great Mountain\",\n        \"The Mountain\",\n        \"The Divine Mountain\",\n        \"The Endless Peak\",\n        \"The Celestial Summit\",\n        \"The Sky-Splitting Colossus\",\n        \"The Stone Sentinel\",\n        \"The Cradle of the Gods\",\n      ],\n      [\"earth\", \"rock\", \"stone\", \"ice\", \"snow\", \"summit\", \"peak\", \"valley\"],\n      [\"aloof\", \"wise\", \"physical\", \"stable\", \"majestic\", \"immovable\", \"mysterious\"],\n      [\n        \"{name} is far larger than any mountain of the mortal world.\",\n        \"{name} is covered in lush forests and cascading waterfalls, a towering paradise.\",\n        \"Beneath the peaks and valleys of {name} lies a realm of fire and darkness.\",\n      ],\n    ),\n    new RealmConcept(\n      \"void\",\n      [\n        \"The Nameless Void\",\n        \"The Endless Void\",\n        \"The Void\",\n        \"The Dark Beyond\",\n        \"The Endless Dark\",\n        \"The Abyss\",\n        \"The Great Emptiness\",\n        \"The Eternal Nothingness\",\n      ],\n      [\"alien\", \"darkness\", \"emptiness\", \"silence\", \"cold\", \"nothingness\", \"absence\"],\n      [\"alien\", \"clever\", \"unknowable\", \"silent\", \"watchful\", \"impenetrable\"],\n      [\n        \"{name} is home to things unknowable and alien.\",\n        \"There are mysteries in {name} that no mortal can hope to perceive, let alone understand.\",\n        \"{name} is a realm of eternal darkness and emptiness, where the very fabric of reality is twisted and distorted.\",\n      ],\n    ),\n    new RealmConcept(\n      \"dream\",\n      [\n        \"The Realm of Dreams\",\n        \"The Dreamlands\",\n        \"The Land of Nod\",\n        \"The Ethereal Plane\",\n        \"The Realm of Imagination\",\n        \"The World of Sleep\",\n      ],\n      [\"ethereal\", \"fantastical\", \"dreamlike\", \"otherworldly\", \"surreal\", \"shimmering\"],\n      [\"mysterious\", \"whimsical\", \"fickle\", \"curious\", \"enigmatic\", \"playful\"],\n      [\n        \"{name} is a place where the impossible becomes reality and where the line between dreams and waking life is blurred.\",\n        \"The ethereal beauty of {name} is home to creatures born of pure imagination and fantasy.\",\n        \"In {name}, the landscape constantly shifts and changes, shaped by the whims of the dreamers who call it home.\",\n        \"The dreamscape of {name} is a realm of infinite possibilities, where anything can happen and nothing is truly impossible.\",\n        \"{name} is a place where the innermost thoughts and desires of mortals manifest into reality, for better or for worse.\",\n        \"Those who journey into {name} often find themselves caught in a never-ending cycle of dreams and nightmares.\",\n      ],\n    ),\n  ];\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport * as AppearanceTraits from \"../appearancetraits.js\";\nimport RealmGeneratorConfig from \"./generatorconfig.js\";\nimport Realm from \"./realm.js\";\nimport * as RealmConcepts from \"./realmconcepts.js\";\n\nexport default class RealmGenerator {\n  config: RealmGeneratorConfig;\n\n  constructor(config: RealmGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Realm[] {\n    const realms = [];\n\n    const numberOfRealms = this.config.numberOfRealms;\n\n    let allConcepts = RealmConcepts.all();\n    allConcepts = RND.shuffle(allConcepts);\n\n    for (let i = 0; i < numberOfRealms; i++) {\n      const concept = allConcepts.pop();\n\n      if (typeof concept == \"object\") {\n        const realmName = RND.item(concept.nameOptions);\n\n        const appearanceTraits = AppearanceTraits.getAllAppearanceTraitsForRealmConcept(concept);\n\n        let description = RND.item(concept.descriptionOptions).replace(\n          \"{name}\",\n          Words.uncapitalize(realmName),\n        );\n        description = Words.capitalize(description);\n\n        const realm = new Realm(realmName, description, [], appearanceTraits);\n\n        realms.push(realm);\n      }\n    }\n\n    return realms;\n  }\n}\n","\"use strict\";\n\nimport Pantheon from \"./pantheons/pantheon.js\";\nimport Realm from \"./realms/realm.js\";\n\nexport default class Religion {\n  name: string;\n  description: string;\n  realms: Realm[];\n  pantheon: Pantheon | null;\n\n  constructor(name: string) {\n    this.name = name;\n    this.description = \"\";\n    this.realms = [];\n    this.pantheon = null;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport * as Words from \"@ironarachne/words\";\nimport random from \"random\";\nimport ReligionGeneratorConfig from \"./generatorconfig.js\";\nimport PantheonGenerator from \"./pantheons/generator.js\";\nimport PantheonGeneratorConfig from \"./pantheons/generatorconfig.js\";\nimport RealmGenerator from \"./realms/generator.js\";\nimport RealmGeneratorConfig from \"./realms/generatorconfig.js\";\nimport Religion from \"./religion.js\";\n\nexport default class ReligionGenerator {\n  config: ReligionGeneratorConfig;\n\n  constructor(config: ReligionGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Religion {\n    let realmGenConfig = new RealmGeneratorConfig();\n    let realmGen = new RealmGenerator(realmGenConfig);\n    const realms = realmGen.generate();\n\n    const category = RND.item(this.config.categories);\n\n    let pantheonGenConfig = new PantheonGeneratorConfig();\n    pantheonGenConfig.realms = realms;\n    pantheonGenConfig.minDeities = category.minDeities;\n    pantheonGenConfig.maxDeities = category.maxDeities;\n    pantheonGenConfig.femaleNameGenerator = this.config.femaleNameGenerator;\n    pantheonGenConfig.maleNameGenerator = this.config.maleNameGenerator;\n    let pantheonGen = new PantheonGenerator(pantheonGenConfig);\n    let pantheon = pantheonGen.generate();\n    pantheon.description = category.description;\n\n    const religion = new Religion(this.config.nameGenerator.generate(1)[0]);\n    religion.realms = realms;\n    religion.pantheon = pantheon;\n\n    if (category.hasLeader) {\n      religion.pantheon.leader = random.int(0, religion.pantheon.members.length - 1);\n\n      let leaderTitle = \"Queen of the Gods\";\n      if (religion.pantheon.members[religion.pantheon.leader].deity.gender.name === \"male\") {\n        leaderTitle = \"King of the Gods\";\n      }\n\n      religion.pantheon.members[religion.pantheon.leader].deity.titles.push(leaderTitle);\n      religion.pantheon.description += ` ${\n        religion.pantheon.members[religion.pantheon.leader].deity.name\n      } is the ${leaderTitle}.`;\n    }\n\n    religion.description = pantheon.description\n      + \" \"\n      + randomGatheringTimes()\n      + \" \"\n      + Words.capitalize(randomGatheringPlace())\n      + \".\";\n\n    return religion;\n  }\n}\n\nfunction randomGatheringPlace(): string {\n  let description = RND.item([\n    \"{follower} gather in {place} for {service}\",\n    \"{follower} congregate in {place} to be led in {service} by {leader}\",\n    \"{follower} meet in {place} to engage in {service} and hear from {leader}\",\n    \"At {place}, {follower} come together for {service} led by {leader}\",\n    \"Join {follower} at {place} for {service} and fellowship with {leader}\",\n    \"{follower} assemble in {place} to participate in {service} and share with {leader}\",\n    \"{follower} unite at {place} for {service} and to learn from {leader}\",\n    \"At {place}, {follower} come together to seek guidance and wisdom from {leader} through {service}\",\n  ]);\n\n  const follower = RND.item([\n    \"adherents\",\n    \"believers\",\n    \"disciples\",\n    \"devotees\",\n    \"faithful\",\n    \"followers\",\n    \"pilgrims\",\n    \"worshippers\",\n    \"zealots\",\n  ]);\n\n  const place = RND.item([\n    \"temples\",\n    \"churches\",\n    \"mosques\",\n    \"synagogues\",\n    \"chapels\",\n    \"shrines\",\n    \"sanctuaries\",\n    \"meeting halls\",\n    \"community centers\",\n    \"outdoor arenas\",\n  ]);\n\n  const service = RND.item([\n    \"silent meditation\",\n    \"guided meditation\",\n    \"chanting\",\n    \"prayer\",\n    \"sacrament\",\n    \"communion\",\n    \"worship\",\n    \"ritual dance\",\n    \"ritual music\",\n    \"structured recitation\",\n    \"spontaneous sharing\",\n    \"teachings and discussions\",\n    \"ritual sacrifice\",\n  ]);\n\n  const leader = RND.item([\n    \"priest\",\n    \"priestess\",\n    \"minister\",\n    \"shaman\",\n    \"spiritual guide\",\n    \"community leader\",\n    \"wise elder\",\n    \"prophet\",\n    \"guru\",\n    \"ascended master\",\n    \"enlightened one\",\n    \"mystic\",\n    \"oracle\",\n  ]);\n\n  description = description\n    .replace(\"{follower}\", follower)\n    .replace(\"{place}\", place)\n    .replace(\"{service}\", service)\n    .replace(\"{leader}\", Words.article(leader) + \" \" + leader);\n\n  return description;\n}\n\nfunction randomGatheringTimes(): string {\n  let description = RND.item([\n    \"Regular gatherings happen once a week.\",\n    \"Regular gatherings happen daily.\",\n    \"Regular gatherings happen once a month.\",\n    \"Weekly gatherings take place every {weekday}.\",\n    \"They come together every {weekday} for a time of {service}.\",\n    \"Their community meets {frequency} for {service} at {time}.\",\n    \"Their gatherings occur {frequency}, bringing {follower} together for {service}.\",\n    \"They gather {frequency} at {place} for {service} and {activity}.\",\n    \"Every {weekday} they gather for {service}, followed by {activity}.\",\n    \"Their gatherings happen {frequency} at {place} and feature {service}, {activity}, and {food/drink}.\",\n    \"People are invited to the {occasion} gathering, where they partake in {service} and {activity}.\",\n  ]);\n\n  description = description\n    .replace(\n      \"{weekday}\",\n      RND.item([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]),\n    )\n    .replace(\"{frequency}\", RND.item([\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"annually\"]))\n    .replace(\n      \"{follower}\",\n      RND.item([\"worshipers\", \"devotees\", \"believers\", \"faithful\", \"followers\", \"pilgrims\"]),\n    )\n    .replace(\n      \"{service}\",\n      RND.item([\"prayer\", \"worship\", \"meditation\", \"reflection\", \"ritual\", \"sermon\", \"teaching\"]),\n    )\n    .replace(\"{time}\", RND.item([\"sunrise\", \"midday\", \"sunset\", \"evening\", \"night\"]))\n    .replace(\n      \"{place}\",\n      RND.item([\n        \"the temple\",\n        \"the church\",\n        \"the mosque\",\n        \"the synagogue\",\n        \"the chapel\",\n        \"the shrine\",\n        \"the sanctuary\",\n        \"the meeting hall\",\n      ]),\n    )\n    .replace(\n      \"{activity}\",\n      RND.item([\n        \"fellowship\",\n        \"conversation\",\n        \"sharing\",\n        \"food and drink\",\n        \"community service\",\n        \"study\",\n      ]),\n    )\n    .replace(\"{occasion}\", RND.item([\"special\", \"holiday\", \"festive\", \"solemn\"]));\n\n  return description;\n}\n"],"names":["ReligionCategory","__publicField","Monotheism","RND.item","Polytheism","Shamanism","all","ReligionGeneratorConfig","Categories.all","genSet","MUN.HumanSet","Relationship","noun","verb","target","strength","RelationshipGenerator","DomainSet","Realm","name","description","personalityTraits","appearanceTraits","Deity","species","gender","ageCategory","realm","domains","speciesAdj","subjectivePronoun","domainNames","i","Words.article","Words.capitalize","Words.arrayToPhrase","Words.uncapitalize","DeityGeneratorConfig","charGenConfig","PremadeConfigs.getFantasy","CharacterGenerator","DeityGenerator","config","possibleHolyItems","possibleHolySymbols","characterDetails","deityName","deity","chanceOfRealmTrait","random","physicalTraits","describePersonality","traits","DomainGeneratorConfig","Domains.all","DomainGenerator","domainSet","RND.shuffle","primary","d","PantheonGeneratorConfig","PantheonMember","Pantheon","PantheonGenerator","pantheon","deityGenConfig","numberOfDeities","domainSets","randomDomainSets","member","relationshipGenerator","numberOfRelationships","j","alreadyExists","k","outward","inward","relationships","x","getRelationshipPhrase","relationshipDescription","relationship","targetName","numberOfSets","domainGenConfig","domainGen","sets","allDomains","AppearanceTrait","phrase","bodyPart","tags","getAllTraitsWithTag","tag","results","RealmConcept","nameOptions","appearanceTags","personalityTags","descriptionOptions","AppearanceTrait.AppearanceTrait","getAllAppearanceTraitsForRealmConcept","concept","result","discovered","AppearanceTrait.getAllTraitsWithTag","RealmGeneratorConfig","RealmGenerator","realms","numberOfRealms","allConcepts","RealmConcepts.all","realmName","AppearanceTraits.getAllAppearanceTraitsForRealmConcept","Religion","ReligionGenerator","realmGenConfig","category","pantheonGenConfig","religion","leaderTitle","randomGatheringTimes","randomGatheringPlace","follower","place","service","leader"],"mappings":"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"}