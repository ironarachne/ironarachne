var S=Object.defineProperty;var R=(s,e,t)=>e in s?S(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var a=(s,e,t)=>(R(s,typeof e!="symbol"?e+"":e,t),t);import{b as G,c as y,a as w,u as D}from"./index.8e2b09a8.js";import{H as b}from"./human.427d1a4a.js";import"./index.776ff577.js";import{i as h,s as T}from"./index.c74e36a8.js";import{r as u}from"./random.5c9619ef.js";import"./lodash.bdb9e94d.js";import{C}from"./fantasy.215bf1b8.js";import{g as E}from"./premadeconfigs.98ffdca2.js";import{a as N}from"./domains.6dee157a.js";class v{constructor(){a(this,"name");a(this,"description");a(this,"hasDeities");a(this,"hasLeader");a(this,"minDeities");a(this,"maxDeities");this.name="",this.description="",this.hasDeities=!1,this.hasLeader=!1,this.minDeities=0,this.maxDeities=0}}class x extends v{constructor(){super(),this.name="monotheism",this.description="This religion "+h(["has a single all-powerful god","is monotheistic"])+".",this.hasDeities=!0,this.minDeities=1,this.maxDeities=1}}class P extends v{constructor(){super(),this.name="polytheism",this.description="This religion "+h(["has several gods","is polytheistic"])+".",this.hasDeities=!0,this.hasLeader=!0,this.minDeities=2,this.maxDeities=16}}class O extends v{constructor(){super(),this.name="shamanism",this.description="This religion is shamanistic."}}function $(){return[new x,new P,new O]}class ge{constructor(){a(this,"categories");a(this,"nameGenerator");a(this,"femaleNameGenerator");a(this,"maleNameGenerator");this.categories=$();let e=new b;if(e.family===null)throw new Error("No family name generator found.");if(e.female===null)throw new Error("No female name generator found");if(e.male===null)throw new Error("No male name generator found");this.nameGenerator=e.family,this.femaleNameGenerator=e.female,this.maleNameGenerator=e.male}}class j{constructor(e,t,n,l){a(this,"noun");a(this,"target");a(this,"verb");a(this,"strength");this.noun=e,this.verb=t,this.target=n,this.strength=l}}class q{constructor(e){a(this,"strength");this.strength=e}generate(){let e="",t="";return this.strength==-1?(e=h(["dislikes","distrusts","mistrusts","is annoyed by"]),t="enemy"):this.strength==-2?(e=h(["fears","hates","loathes","can't stand"]),t="enemy"):this.strength==0?(e=h(["is intrigued by","is ambivalent towards","is neutral towards","is suspicious of"]),t="acquaintance"):this.strength==1?(e=h(["likes","is amused by","enjoys the company of","enjoys","trusts"]),t="friend"):(e=h(["loves","deeply trusts","adores"]),t="friend"),new j(t,e,0,this.strength)}}class A{constructor(){a(this,"primary");a(this,"secondaries");this.secondaries=[]}}class H{constructor(e,t,n,l){a(this,"name");a(this,"description");a(this,"personalityTraits");a(this,"appearanceTraits");this.name=e,this.description=t,this.personalityTraits=n,this.appearanceTraits=l}}class F{constructor(e,t,n,l,r,d){a(this,"name");a(this,"species");a(this,"gender");a(this,"ageCategory");a(this,"domains");a(this,"titles");a(this,"realm");a(this,"description");a(this,"personalityTraits");a(this,"personality");a(this,"appearance");a(this,"holyItem");a(this,"holySymbol");a(this,"isAlive");this.name=e,this.species=t,this.gender=n,this.ageCategory=l,this.domains=d,this.titles=[],this.realm=r,this.description="",this.personality="",this.appearance="",this.holyItem="",this.holySymbol="",this.isAlive=!0}describe(){const e=this.species.adjective,t=this.gender.subjectivePronoun;let n="god";const l=[];l.push(this.domains.primary.name);for(let d=0;d<this.domains.secondaries.length;d++)l.push(this.domains.secondaries[d].name);this.gender.name==="female"&&(n="goddess");let r=`${this.name} appears as ${G(e)} ${e} ${this.ageCategory.noun}.`;return r+=` ${y(t)} has ${this.appearance}. ${this.personality}.`,r+=` ${this.name} is the ${n} of ${w(l)}.`,r+=` ${y(t)} resides in ${D(this.realm.name)}.`,r}}class M{constructor(){a(this,"domainSet");a(this,"realms");a(this,"characterGenerator");a(this,"femaleNameGenerator");a(this,"maleNameGenerator");let e=E();this.realms=[],this.characterGenerator=new C(e);let t=new b;this.femaleNameGenerator=t.female,this.maleNameGenerator=t.male}}class I{constructor(e){a(this,"config");this.config=e}generate(){let e=[],t=[];const n=this.config.characterGenerator.generate();if(this.config.maleNameGenerator===null)throw new Error("male name generator not set");if(this.config.femaleNameGenerator===null)throw new Error("female name generator not set");let l=this.config.femaleNameGenerator.generate(1)[0];n.gender.name=="male"&&(l=this.config.maleNameGenerator.generate(1)[0]);let r=new F(l,n.species,n.gender,n.ageCategory,h(this.config.realms),this.config.domainSet);e=this.config.domainSet.primary.holyItems,t=this.config.domainSet.primary.holySymbols,r.holyItem=h(e),r.holySymbol=h(t);const d=u.int(1,100),m=n.physicalTraits;let o=[];for(let c=0;c<m.length;c++)o.push(m[c].description);return d>80&&o.push(h(r.realm.appearanceTraits).phrase),r.personalityTraits=n.personalityTraits,r.personality=W(r),r.appearance=w(o),r.description=r.describe(),r}}function W(s){let e=[];for(let t=0;t<s.personalityTraits.length;t++)e.push(s.personalityTraits[t].descriptor);return y(s.gender.subjectivePronoun)+" is "+w(e)}class L{constructor(){a(this,"numberOfDomains");a(this,"domains");this.numberOfDomains=1,this.domains=N()}}class V{constructor(e){a(this,"config");this.config=e}generate(){let e=new A;this.config.domains=T(this.config.domains);let t=this.config.domains.pop();if(t!==void 0)e.primary=t;else throw new Error("No primary domain found.");for(let n=0;n<this.config.numberOfDomains;n++){const l=this.config.domains.pop();if(l===void 0)throw new Error("No secondary domain found.");e.secondaries.push(l)}return e}}class B{constructor(){a(this,"domains");a(this,"realms");a(this,"minDeities");a(this,"maxDeities");a(this,"femaleNameGenerator");a(this,"maleNameGenerator");this.domains=N(),this.realms=[],this.minDeities=1,this.maxDeities=16;let e=new b;if(e.female==null)throw new Error("no female name generator in set");if(e.male==null)throw new Error("no male name generator in set");this.femaleNameGenerator=e.female,this.maleNameGenerator=e.male}}class _{constructor(){a(this,"deity");a(this,"relationships");this.relationships=[]}}class z{constructor(){a(this,"name");a(this,"description");a(this,"members");a(this,"leader");this.name="",this.description="",this.members=[],this.leader=-1}}class K{constructor(e){a(this,"config");this.config=e}generate(){let e=new z,t=new M;t.realms=this.config.realms,t.femaleNameGenerator=this.config.femaleNameGenerator,t.maleNameGenerator=this.config.maleNameGenerator;const n=u.int(this.config.minDeities,this.config.maxDeities),l=Q(n);for(let m=0;m<l.length;m++){let o=new _;t.domainSet=l[m];let f=new I(t).generate();o.deity=f,e.members.push(o)}let r=new q(0),d=u.int(1,3);for(let m=0;m<d;m++)for(let o=0;o<e.members.length;o++){r.strength=u.int(-2,2);const c=u.int(0,e.members.length-1);if(c!=o){let f=!1;for(let g=0;g<e.members[o].relationships.length;g++)e.members[o].relationships[g].target==c&&(f=!0);if(!f){let g=r.generate();g.target=c,e.members[o].relationships.push(g);let k=r.generate();k.target=o,e.members[c].relationships.push(k)}}}if(e.members.length>1)for(let m=0;m<e.members.length;m++){let o=[];for(let f=0;f<e.members[m].relationships.length;f++)o.push(J(e.members[m].relationships[f],e.members[e.members[m].relationships[f].target].deity.name));const c=" "+e.members[m].deity.name+" "+w(o)+".";e.members[m].deity.description+=c}return e}}function J(s,e){return h([`${s.verb} ${e}`])}function Q(s){let e=new L,t=new V(e),n=[],l=T(e.domains);for(let r=0;r<s;r++){let d=[];for(let o=0;o<t.config.numberOfDomains+1;o++)d.push(l.pop());t.config.domains=d;let m=t.generate();n.push(m)}return n}class i{constructor(e,t,n){a(this,"phrase");a(this,"bodyPart");a(this,"tags");this.phrase=e,this.bodyPart=t,this.tags=n}}function U(s,e){const t=[];for(let n=0;n<s.length;n++)s[n].tags.includes(e)&&t.push(s[n]);return t}class p{constructor(e,t,n,l,r){a(this,"name");a(this,"nameOptions");a(this,"appearanceTags");a(this,"personalityTags");a(this,"descriptionOptions");this.name=e,this.nameOptions=t,this.appearanceTags=n,this.personalityTags=l,this.descriptionOptions=r}}function X(){return[new i("six feathered wings","wings",["sky"]),new i("four feathered wings","wings",["sky"]),new i("two large feathered wings","wings",["sky"]),new i("large leathery wings","wings",["sky","death"]),new i("a lion's tail'","tail",["earth","forest"]),new i("a whip-like tail","tail",["earth","death"]),new i("two tails","tail",["alien"]),new i("the horns of a goat","horns",["earth","forest"]),new i("the horns of a ram","horns",["earth","forest"]),new i("the antlers of a stag","horns",["forest"]),new i("the antlers of a deer","horns",["forest"]),new i("short, pointed horns","horns",["earth","death"]),new i("tall, straight horns","horns",["earth","death"]),new i("glowing blue eyes","eyes",["water"]),new i("glowing yellow eyes","eyes",["sky","water"]),new i("glowing red eyes","eyes",["earth","death","alien"]),new i("glowing orange eyes","eyes",["earth","sky"]),new i("eyes that burn with an inner fire","eyes",["sky"]),new i("four eyes","eyes",["alien"]),new i("six eyes","eyes",["alien"]),new i("eight eyes","eyes",["alien"]),new i("no eyes","eyes",["death","alien"]),new i("reptilian eyes","eyes",["forest","earth"]),new i("scales instead of skin","skin",["earth","forest"]),new i("skin that glows faintly","skin",["sky"]),new i("skin made of living rock","skin",["earth"]),new i("blue skin","skin",["water"]),new i("green skin","skin",["water"]),new i("crystalline skin","skin",["earth"]),new i("translucent grey skin","skin",["death"]),new i("dull grey skin","skin",["death"]),new i("skin covered in leaves","skin",["forest"]),new i("skin made of star-lit blackness","skin",["alien"]),new i("eight tentacles","tentacles",["alien"]),new i("six tentacles","tentacles",["alien"]),new i("four tentacles","tentacles",["alien"]),new i("the head of a lion","head",["forest"]),new i("the head of a bear","head",["forest"]),new i("the head of a dragon","head",["earth","forest"]),new i("the head of a swan","head",["sky","water"]),new i("the head of a deer","head",["forest"]),new i("the head of a cat","head",["earth","desert"]),new i("the head of a wolf","head",["earth","forest"])]}function Y(s){const e=X();let t=[];for(let n=0;n<s.appearanceTags.length;n++){const l=U(e,s.appearanceTags[n]);t=[...t,...l]}return t}class Z{constructor(){a(this,"numberOfRealms");a(this,"requireDualistic");this.numberOfRealms=2,this.requireDualistic=!1}}function ee(){return[new p("sky",["The Eternal Heavens","The Heavens Above","Heaven","The Sky","The Heavens","The Celestial Realm","The Empyrean","The Firmament"],["sky","clouds","sun","moon","stars","rainbows","light"],["mercurial","caring","wise","flexible","majestic","powerful","graceful","serene"],["Far above the mortal world, {name} is a realm of light and splendor.","{name} is a realm of light and beauty, where celestial beings roam.","The skies of {name} are awash with vibrant colors and shimmering stars."]),new p("earth",["The Earth","The Mortal Realm","The Material Plane","The Mundane World","The Physical Plane","The Human World"],["earth","mountains","rivers","forests","deserts","oceans","caves","valleys"],["stable","stubborn","physical","grounded","tenacious","reliable","practical"],["{name} is where mortals reside, going about their daily lives.","{name} is the home of all mortal beings, full of bustling cities and quiet countryside."]),new p("forest",["The Forest","The Eternal Forest","The Divine Forest","The Sylvan Realm","The Verdant Wilds","The Green Domain"],["forest","trees","plants","animals","rivers","mountains"],["caring","stable","peaceful","graceful","majestic","wise","mystical"],["Hidden far from the mortal world, {name} is deep and mysterious, full of secrets and ancient magic.","{name} is an infinite forest of beauty and mystery, where the spirits of the wild roam free.","The forests of {name} are alive with the sound of birdsong and rustling leaves."]),new p("underworld",["The Underworld","The Afterlife","The Kingdom of Death","The Great Beyond","The Netherworld","The Land of the Dead"],["death","shadow","bones","ghosts","souls","void"],["angry","brooding","peaceful","wise","merciful","judgmental","powerful"],["{name} is where souls go to rest after death, guided by the spirits of the departed.","{name} is a realm of perpetual darkness where the dead rest forever, watched over by the reapers of the underworld.","The halls of {name} are filled with the whispers of the dead, their spirits forever lingering in the shadows."]),new p("ocean",["The Vast Sea","The Sea","The Endless Ocean","The Divine Sea","The Ever-Changing Tides","The Fathomless Depths","The Coral Kingdom","The Ocean of Storms"],["water","salt","waves","foam","currents","whirlpools","tides","depths"],["mercurial","aloof","cruel","flexible","violent","majestic","mysterious"],["{name} is a realm apart from mortal seas, full of life and infinitely deep.","The deep and restless waters of {name} hide many secrets.","Beneath the surface of {name} lies a kingdom of wonder and terror."]),new p("mountain",["The Great Mountain","The Mountain","The Divine Mountain","The Endless Peak","The Celestial Summit","The Sky-Splitting Colossus","The Stone Sentinel","The Cradle of the Gods"],["earth","rock","stone","ice","snow","summit","peak","valley"],["aloof","wise","physical","stable","majestic","immovable","mysterious"],["{name} is far larger than any mountain of the mortal world.","{name} is covered in lush forests and cascading waterfalls, a towering paradise.","Beneath the peaks and valleys of {name} lies a realm of fire and darkness."]),new p("void",["The Nameless Void","The Endless Void","The Void","The Dark Beyond","The Endless Dark","The Abyss","The Great Emptiness","The Eternal Nothingness"],["alien","darkness","emptiness","silence","cold","nothingness","absence"],["alien","clever","unknowable","silent","watchful","impenetrable"],["{name} is home to things unknowable and alien.","There are mysteries in {name} that no mortal can hope to perceive, let alone understand.","{name} is a realm of eternal darkness and emptiness, where the very fabric of reality is twisted and distorted."]),new p("dream",["The Realm of Dreams","The Dreamlands","The Land of Nod","The Ethereal Plane","The Realm of Imagination","The World of Sleep"],["ethereal","fantastical","dreamlike","otherworldly","surreal","shimmering"],["mysterious","whimsical","fickle","curious","enigmatic","playful"],["{name} is a place where the impossible becomes reality and where the line between dreams and waking life is blurred.","The ethereal beauty of {name} is home to creatures born of pure imagination and fantasy.","In {name}, the landscape constantly shifts and changes, shaped by the whims of the dreamers who call it home.","The dreamscape of {name} is a realm of infinite possibilities, where anything can happen and nothing is truly impossible.","{name} is a place where the innermost thoughts and desires of mortals manifest into reality, for better or for worse.","Those who journey into {name} often find themselves caught in a never-ending cycle of dreams and nightmares."])]}class ae{constructor(e){a(this,"config");this.config=e}generate(){const e=[],t=this.config.numberOfRealms;let n=ee();n=T(n);for(let l=0;l<t;l++){const r=n.pop();if(typeof r=="object"){const d=h(r.nameOptions),m=Y(r);let o=h(r.descriptionOptions).replace("{name}",D(d));o=y(o);const c=new H(d,o,[],m);e.push(c)}}return e}}class te{constructor(e){a(this,"name");a(this,"description");a(this,"realms");a(this,"pantheon");this.name=e,this.description="",this.realms=[],this.pantheon=null}}class ue{constructor(e){a(this,"config");this.config=e}generate(){let e=new Z;const n=new ae(e).generate(),l=h(this.config.categories);let r=new B;r.realms=n,r.minDeities=l.minDeities,r.maxDeities=l.maxDeities,r.femaleNameGenerator=this.config.femaleNameGenerator,r.maleNameGenerator=this.config.maleNameGenerator;let m=new K(r).generate();m.description=l.description;const o=new te(this.config.nameGenerator.generate(1)[0]);if(o.realms=n,o.pantheon=m,l.hasLeader){o.pantheon.leader=u.int(0,o.pantheon.members.length-1);let c="Queen of the Gods";o.pantheon.members[o.pantheon.leader].deity.gender.name==="male"&&(c="King of the Gods"),o.pantheon.members[o.pantheon.leader].deity.titles.push(c),o.pantheon.description+=` ${o.pantheon.members[o.pantheon.leader].deity.name} is the ${c}.`}return o.description=m.description+" "+ne()+" "+y(se())+".",o}}function se(){let s=h(["{follower} gather in {place} for {service}","{follower} congregate in {place} to be led in {service} by {leader}","{follower} meet in {place} to engage in {service} and hear from {leader}","At {place}, {follower} come together for {service} led by {leader}","Join {follower} at {place} for {service} and fellowship with {leader}","{follower} assemble in {place} to participate in {service} and share with {leader}","{follower} unite at {place} for {service} and to learn from {leader}","At {place}, {follower} come together to seek guidance and wisdom from {leader} through {service}"]);const e=h(["adherents","believers","disciples","devotees","faithful","followers","pilgrims","worshippers","zealots"]),t=h(["temples","churches","mosques","synagogues","chapels","shrines","sanctuaries","meeting halls","community centers","outdoor arenas"]),n=h(["silent meditation","guided meditation","chanting","prayer","sacrament","communion","worship","ritual dance","ritual music","structured recitation","spontaneous sharing","teachings and discussions","ritual sacrifice"]),l=h(["priest","priestess","minister","shaman","spiritual guide","community leader","wise elder","prophet","guru","ascended master","enlightened one","mystic","oracle"]);return s=s.replace("{follower}",e).replace("{place}",t).replace("{service}",n).replace("{leader}",G(l)+" "+l),s}function ne(){let s=h(["Regular gatherings happen once a week.","Regular gatherings happen daily.","Regular gatherings happen once a month.","Weekly gatherings take place every {weekday}.","They come together every {weekday} for a time of {service}.","Their community meets {frequency} for {service} at {time}.","Their gatherings occur {frequency}, bringing {follower} together for {service}.","They gather {frequency} at {place} for {service} and {activity}.","Every {weekday} they gather for {service}, followed by {activity}.","Their gatherings happen {frequency} at {place} and feature {service}, {activity}, and {food/drink}.","People are invited to the {occasion} gathering, where they partake in {service} and {activity}."]);return s=s.replace("{weekday}",h(["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"])).replace("{frequency}",h(["weekly","bi-weekly","monthly","quarterly","annually"])).replace("{follower}",h(["worshipers","devotees","believers","faithful","followers","pilgrims"])).replace("{service}",h(["prayer","worship","meditation","reflection","ritual","sermon","teaching"])).replace("{time}",h(["sunrise","midday","sunset","evening","night"])).replace("{place}",h(["the temple","the church","the mosque","the synagogue","the chapel","the shrine","the sanctuary","the meeting hall"])).replace("{activity}",h(["fellowship","conversation","sharing","food and drink","community service","study"])).replace("{occasion}",h(["special","holiday","festive","solemn"])),s}export{ge as R,ue as a};
//# sourceMappingURL=generator.7d2ac0ba.js.map
