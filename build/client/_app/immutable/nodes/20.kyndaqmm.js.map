{"version":3,"file":"20.kyndaqmm.js","sources":["../../../../../../src/routes/planet/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import * as RND from '@ironarachne/rng';\n  import * as Classifications from '$lib/planets/classifications';\n  import * as WebGLPlanetRenderer from '$lib/renderers/planets/webgl_planet_renderer';\n  import * as Planets from '$lib/planets/planets';\n  import random from 'random';\n  import seedrandom from 'seedrandom';\n  import PlanetGeneratorConfig from '$lib/planets/planet_generator_config';\n  import type Planet from '$lib/planets/planet';\n\n  import { onMount } from 'svelte';\n\n  let planetTypes = Classifications.getClassificationNames();\n\n  let seed = RND.randomString(13);\n  random.use(seedrandom(seed));\n\n  let planetType = 'random';\n  let planetGenConfig: PlanetGeneratorConfig;\n  let planet: Planet;\n\n  const width = 400;\n  const height = 400;\n\n  function generate() {\n    random.use(seedrandom(seed));\n\n    if (planetType == 'random') {\n      planetGenConfig.possibleClassifications = Classifications.all();\n    } else {\n      let classification = Classifications.getClassificationByName(planetType);\n      if (classification !== undefined) {\n        planetGenConfig.possibleClassifications = [\n        classification,\n      ];\n      }\n    }\n\n    planet = Planets.generate(planetGenConfig);\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n\n  onMount(() => {\n    planetGenConfig = new PlanetGeneratorConfig();\n\t\tplanet = Planets.generate(planetGenConfig);\n\t});\n</script>\n\n<svelte:head>\n  <title>Planet Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"main scifi\">\n  <h1>Planet Generator</h1>\n\n  <p>This lets you generate a planet. It uses WebGL and your graphics card.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"planetType\">Planet Type</label>\n    <select bind:value={planetType} id=\"planetType\">\n      <option>random</option>\n      {#each planetTypes as pType}\n        <option>{pType}</option>\n      {/each}\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  {#if planet}\n    <h2>{planet.name}</h2>\n\n    <img alt=\"{ planet.name } image\" src=\"{ WebGLPlanetRenderer.render(planet, width, height) }\" />\n\n    <p>{planet.description}</p>\n\n    <p><strong>Planet Type:</strong> {planet.classification}</p>\n    <p><strong>Population:</strong> {planet.populationFriendly}</p>\n    <p><strong>Government:</strong> {planet.government}</p>\n    <p><strong>Culture:</strong> {planet.culture}</p>\n    <p>\n      <strong>Distance from Star:</strong>\n      {new Intl.NumberFormat().format(planet.distance_from_sun)} AU\n    </p>\n    <p>\n      <strong>Mass:</strong>\n      {new Intl.NumberFormat().format(planet.mass)} &times; 10<sup>24</sup> kg ({new Intl.NumberFormat().format(\n        Math.floor((planet.mass / 5.9722) * 100),\n      )}% Earth's mass)\n    </p>\n    <p>\n      <strong>Diameter:</strong>\n      {new Intl.NumberFormat().format(Math.floor(planet.diameter))} km ({new Intl.NumberFormat().format(\n        Math.floor((planet.diameter / 12756) * 100),\n      )}% Earth's diameter)\n    </p>\n    <p>\n      <strong>Gravity:</strong>\n      {new Intl.NumberFormat().format(planet.gravity)} m/s<sup>2</sup>\n      ({new Intl.NumberFormat().format(Math.floor((planet.gravity / 9.81) * 100))}% Earth's gravity)\n    </p>\n    <p>\n      <strong>Orbital Period:</strong>\n      {new Intl.NumberFormat().format(Math.floor(planet.orbital_period))} days\n    </p>\n    <p>\n      <strong>Rotation Period (Length of Day):</strong>\n      {new Intl.NumberFormat().format(Math.floor(planet.rotation_period))} hours\n    </p>\n  {/if}\n</section>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/scifi.scss';\n\n  canvas {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n\n  #planet-render {\n    display: block;\n    width: 600px;\n    height: 400px;\n    margin: 1rem auto;\n  }\n</style>\n"],"names":["attr","img","img_alt_value","ctx","src_url_equal","img_src_value","WebGLPlanetRenderer.render","width","height","insert_hydration","target","h2","anchor","p0","p1","append_hydration","strong0","p2","strong1","p3","strong2","p4","strong3","p5","strong4","p6","strong5","sup0","p7","strong6","p8","strong7","sup1","p9","strong8","p10","strong9","dirty","t0_value","set_data","t0","t3_value","t3","t7_value","t7","t11_value","t11","t15_value","t15","t19_value","t19","t23_value","t23","t28_value","t28","t32_value","t32","t37","t37_value","t39_value","t39","t44_value","t44","t48_value","t48","t53","t53_value","t58","t58_value","i","create_if_block","add_render_callback","select","section","h1","p","div0","label0","input","div1","label1","option","button0","button1","planetTypes","Classifications.getClassificationNames","seed","RND.randomString","random","seedrandom","planetType","planetGenConfig","planet","generate","Classifications.all","classification","Classifications.getClassificationByName","Planets.generate","newSeed","onMount","PlanetGeneratorConfig","select_value"],"mappings":"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"}