{"version":3,"file":"12.e2651cf9.js","sources":["../../../../../../src/lib/characters/family/generatorconfig.ts","../../../../../../src/lib/characters/family/familymember.ts","../../../../../../src/lib/characters/family/family.ts","../../../../../../src/lib/characters/family/generator.ts","../../../../../../src/routes/fantasy/family/+page.svelte"],"sourcesContent":["\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport Gender from \"../../gender.js\";\nimport type Species from \"../../species/species.js\";\n\nexport default class FamilyGeneratorConfig {\n  species: Species;\n  iterations: number;\n  rootFamilyNameGenerator: MUN.Generator;\n  rootFemaleNameGenerator: MUN.Generator;\n  rootMaleNameGenerator: MUN.Generator;\n  dominantFamilyNameGender: Gender;\n\n  constructor(\n    species: Species,\n    iterations: number,\n    nameGenFamily: MUN.Generator,\n    nameGenFemale: MUN.Generator,\n    nameGenMale: MUN.Generator,\n    dominantFamilyNameGender: Gender,\n  ) {\n    this.species = species;\n    this.iterations = iterations;\n    this.rootFamilyNameGenerator = nameGenFamily;\n    this.rootFemaleNameGenerator = nameGenFemale;\n    this.rootMaleNameGenerator = nameGenMale;\n    this.dominantFamilyNameGender = dominantFamilyNameGender;\n  }\n}\n","\"use strict\";\n\nimport Character from \"../character.js\";\n\nexport default class FamilyMember {\n  id: number;\n  character: Character;\n  children: number[];\n  parents: number[];\n  mate: number;\n\n  constructor(id: number) {\n    this.id = id;\n    this.children = [];\n    this.parents = [];\n    this.mate = -1;\n  }\n}\n","\"use strict\";\n\nimport * as MUN from \"@ironarachne/made-up-names\";\nimport FamilyMember from \"./familymember.js\";\n\nexport default class Family {\n  name: string;\n  members: FamilyMember[];\n  familyNameGenerator: MUN.Generator;\n  femaleNameGenerator: MUN.Generator;\n  maleNameGenerator: MUN.Generator;\n\n  constructor() {\n    this.name = \"\";\n    this.members = [];\n  }\n\n  getChildren(parent: FamilyMember): FamilyMember[] {\n    let children = [];\n    for (let i = 0; i < parent.children.length; i++) {\n      children.push(this.members[parent.children[i]]);\n    }\n\n    return children;\n  }\n\n  getMate(person: FamilyMember): FamilyMember {\n    return this.members[person.mate];\n  }\n\n  getParents(person: FamilyMember): FamilyMember[] {\n    let parents = [];\n    for (let i = 0; i < person.parents.length; i++) {\n      parents.push(this.members[person.parents[i]]);\n    }\n\n    return parents;\n  }\n}\n","\"use strict\";\n\nimport * as RND from \"@ironarachne/rng\";\nimport random from \"random\";\nimport * as AgeCategories from \"../../age/agecategories.js\";\nimport Gender from \"../../gender.js\";\nimport Character from \"../character.js\";\nimport CharacterGenerator from \"../generator.js\";\nimport CharacterGeneratorConfig from \"../generatorconfig.js\";\nimport Family from \"./family.js\";\nimport FamilyMember from \"./familymember.js\";\nimport FamilyGeneratorConfig from \"./generatorconfig.js\";\n\nexport default class FamilyGenerator {\n  config: FamilyGeneratorConfig;\n\n  constructor(config: FamilyGeneratorConfig) {\n    this.config = config;\n  }\n\n  generate(): Family {\n    let family = new Family();\n    family.familyNameGenerator = this.config.rootFamilyNameGenerator;\n    family.femaleNameGenerator = this.config.rootFemaleNameGenerator;\n    family.maleNameGenerator = this.config.rootMaleNameGenerator;\n\n    let charGenConfig = new CharacterGeneratorConfig();\n    charGenConfig.speciesOptions = [this.config.species];\n    charGenConfig.ageCategories = [\"young adult\"];\n    charGenConfig.familyNameGenerator = family.familyNameGenerator;\n    charGenConfig.femaleNameGenerator = family.femaleNameGenerator;\n    charGenConfig.maleNameGenerator = family.maleNameGenerator;\n\n    let genderNames = [];\n    for (let i = 0; i < this.config.species.genders.length; i++) {\n      genderNames.push(this.config.species.genders[i].name);\n    }\n    charGenConfig.genderNameOptions = genderNames;\n\n    let charGen = new CharacterGenerator(charGenConfig);\n\n    let parent1 = new FamilyMember(0);\n    parent1.character = charGen.generate();\n    parent1.character.age += 5;\n    parent1.character.description = charGen.describe(parent1.character);\n\n    let mateGender = getMateGender(parent1.character.gender, this.config.species.genders);\n    charGen.config.genderNameOptions = [mateGender.name];\n    let parent2 = new FamilyMember(1);\n    parent2.character = charGen.generate();\n    parent2.character.age += 5;\n    parent2.character.description = charGen.describe(parent2.character);\n\n    if (parent1.character.gender.name == this.config.dominantFamilyNameGender.name) {\n      parent2.character.lastName = parent1.character.lastName;\n      family.name = parent1.character.lastName;\n    } else {\n      parent1.character.lastName = parent2.character.lastName;\n      family.name = parent2.character.lastName;\n    }\n\n    parent1.mate = parent2.id;\n    parent2.mate = parent1.id;\n\n    family.members.push(parent1);\n    family.members.push(parent2);\n\n    for (let i = 0; i < this.config.iterations; i++) {\n      family = this.iterate(family);\n    }\n\n    return family;\n  }\n\n  iterate(family: Family): Family {\n    const ageStep = 5;\n    let charGenConfig = new CharacterGeneratorConfig();\n    const charGen = new CharacterGenerator(charGenConfig);\n\n    for (let i = 0; i < family.members.length; i++) {\n      if (family.members[i].character.status == \"alive\") {\n        family.members[i].character.age += ageStep;\n      }\n\n      if (\n        family.members[i].character.age\n          > AgeCategories.getMaxAge(family.members[i].character.gender.ageCategories)\n      ) {\n        family.members[i].character.status = \"dead\";\n      } else {\n        let newAgeCategory = AgeCategories.getCategoryFromAge(\n          family.members[i].character.age,\n          family.members[i].character.gender.ageCategories,\n        );\n        if (newAgeCategory.name != family.members[i].character.ageCategory.name) {\n          family.members[i].character.height = newAgeCategory.randomHeight();\n          family.members[i].character.weight = newAgeCategory.randomWeight();\n        }\n        family.members[i].character.ageCategory = newAgeCategory;\n      }\n\n      family.members[i].character.description = charGen.describe(family.members[i].character);\n\n      if (family.members[i].character.status == \"dead\") {\n        continue;\n      }\n\n      if (RND.simple(100) > 98) {\n        // There's a 2% chance something horrible kills this person\n        family.members[i].character.status = \"dead\";\n        continue;\n      }\n\n      if (needsChildren(family.members[i]) && RND.simple(100) > 30) {\n        let numberOfChildren = random.int(1, 4);\n        for (let j = 0; j < numberOfChildren; j++) {\n          let child = getNewChild(i, family.members[i].mate, family);\n          let newMember = new FamilyMember(family.members.length);\n          newMember.character = child;\n          newMember.parents = [i, family.members[i].mate];\n          family.members[i].children.push(newMember.id);\n          family.members[family.members[i].mate].children.push(newMember.id);\n\n          if (\n            family.members[i].character.gender.name == this.config.dominantFamilyNameGender.name\n          ) {\n            newMember.character.lastName = family.members[i].character.lastName;\n          } else {\n            newMember.character.lastName = family.members[family.members[i].mate].character.lastName;\n          }\n\n          family.members.push(newMember);\n        }\n      }\n\n      if (needsMate(family.members[i]) && RND.simple(100) > 50) {\n        let mate = getNewMate(family.members[i], family);\n        let newMember = new FamilyMember(family.members.length);\n        newMember.character = mate;\n        newMember.mate = i;\n        family.members[i].mate = newMember.id;\n\n        if (family.members[i].character.gender.name == this.config.dominantFamilyNameGender.name) {\n          newMember.character.lastName = family.members[i].character.lastName;\n        } else {\n          family.members[i].character.lastName = newMember.character.lastName;\n        }\n\n        family.members.push(newMember);\n      }\n    }\n\n    return family;\n  }\n}\n\nfunction getNewChild(parent1Index: number, parent2Index: number, family: Family): Character {\n  let parent1 = family.members[parent1Index].character;\n  let parent2 = family.members[parent2Index].character;\n\n  let physicalTraits = parent1.physicalTraits.concat(parent2.physicalTraits);\n  let uniqueNames: string[] = [];\n  let traitOverrides = [];\n  physicalTraits = RND.shuffle(physicalTraits);\n  for (let i = 0; i < physicalTraits.length; i++) {\n    if (!uniqueNames.includes(physicalTraits[i].name)) {\n      traitOverrides.push(physicalTraits[i]);\n      uniqueNames.push(physicalTraits[i].name);\n    }\n  }\n\n  let charConfig = new CharacterGeneratorConfig();\n  charConfig.speciesOptions = [parent1.species, parent2.species];\n  charConfig.ageCategories = [\"infant\", \"toddler\"];\n  charConfig.familyNameGenerator = family.familyNameGenerator;\n  charConfig.femaleNameGenerator = family.femaleNameGenerator;\n  charConfig.maleNameGenerator = family.maleNameGenerator;\n  let genderNames = [];\n  for (let i = 0; i < parent1.species.genders.length; i++) {\n    genderNames.push(parent1.species.genders[i].name);\n  }\n  charConfig.genderNameOptions = genderNames;\n  charConfig.physicalTraitOverrides = traitOverrides;\n\n  let charGen = new CharacterGenerator(charConfig);\n\n  let child = charGen.generate();\n\n  return child;\n}\n\nfunction getNewMate(member: FamilyMember, family: Family): Character {\n  let gender = member.character.gender;\n\n  let charConfig = new CharacterGeneratorConfig();\n  charConfig.speciesOptions = [member.character.species];\n  charConfig.ageCategories = [\"adult\"];\n  charConfig.familyNameGenerator = family.familyNameGenerator;\n  charConfig.femaleNameGenerator = family.femaleNameGenerator;\n  charConfig.maleNameGenerator = family.maleNameGenerator;\n  charConfig.genderNameOptions = [getMateGender(gender, member.character.species.genders).name];\n\n  let charGen = new CharacterGenerator(charConfig);\n\n  let mate = charGen.generate();\n\n  return mate;\n}\n\nfunction getMateGender(gender1: Gender, genders: Gender[]): Gender {\n  for (let i = 0; i < genders.length; i++) {\n    if (genders[i].name != gender1.name) {\n      return genders[i];\n    }\n  }\n\n  return gender1;\n}\n\nfunction needsChildren(member: FamilyMember): boolean {\n  if (\n    member.mate != -1\n    && member.children.length == 0\n    && member.character.ageCategory.name == \"adult\"\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction needsMate(member: FamilyMember): boolean {\n  if (member.character.ageCategory.name == \"adult\" && member.mate == -1) {\n    return true;\n  }\n\n  return false;\n}\n","<script lang=\"ts\">\n  import * as CommonSpecies from '$lib/species/common';\n  import * as FantasySpecies from \"$lib/species/fantasy\";\n  import * as RND from \"@ironarachne/rng\";\n  import random from \"random\";\n  import seedrandom from \"seedrandom\";\n  import FamilyGeneratorConfig from \"$lib/characters/family/generatorconfig\";\n  import FamilyGenerator from \"$lib/characters/family/generator\";\n  import type Gender from \"$lib/gender\";\n  import type Species from \"$lib/species/species\";\n  import type NameGenerator from '@ironarachne/made-up-names/dist/generator';\n\n  let seed = RND.randomString(13);\n  let availableSpecies = FantasySpecies.all();\n  let selectedSpecies = \"any\";\n  let species = CommonSpecies.randomWeighted(availableSpecies);\n  let iterations = 2;\n  if (species.nameGeneratorSet.family === null) {\n    throw new Error(\"Species does not have a family name generator.\")\n  }\n  if (species.nameGeneratorSet.female === null) {\n    throw new Error(\"Species does not have a female name generator.\")\n  }\n  if (species.nameGeneratorSet.male === null) {\n    throw new Error(\"Species does not have a male name generator.\")\n  }\n  let familyNameGen: NameGenerator = species.nameGeneratorSet.family;\n  let femaleNameGen: NameGenerator = species.nameGeneratorSet.female;\n  let maleNameGen: NameGenerator = species.nameGeneratorSet.male;\n  let lastNameTradition = \"male\";\n  let config = new FamilyGeneratorConfig(species, iterations, familyNameGen, femaleNameGen, maleNameGen, getDominantGender());\n  let generator = new FamilyGenerator(config);\n  let family = generator.generate();\n\n  function generate() {\n    random.use(seedrandom(seed));\n    species = getSpecies(selectedSpecies);\n    if (species.nameGeneratorSet.family === null) {\n      throw new Error(\"Species does not have a family name generator.\")\n    }\n    if (species.nameGeneratorSet.female === null) {\n      throw new Error(\"Species does not have a female name generator.\")\n    }\n    if (species.nameGeneratorSet.male === null) {\n      throw new Error(\"Species does not have a male name generator.\")\n    }\n    familyNameGen = species.nameGeneratorSet.family;\n    femaleNameGen = species.nameGeneratorSet.female;\n    maleNameGen = species.nameGeneratorSet.male;\n    config = new FamilyGeneratorConfig(species, iterations, familyNameGen, femaleNameGen, maleNameGen, getDominantGender());\n    generator.config = config;\n    family = generator.generate();\n  }\n\n  function getDominantGender(): Gender {\n    for (let i=0;i<species.genders.length;i++) {\n      if (species.genders[i].name == lastNameTradition) {\n        return species.genders[i];\n      }\n    }\n\n    throw new Error(\"Dominant gender not set\");\n  }\n\n  function getSpecies(name: string): Species {\n    if (name == \"any\") {\n      return CommonSpecies.randomWeighted(availableSpecies);\n    }\n\n    for (let i=0;i<availableSpecies.length;i++) {\n      if (availableSpecies[i].name == name) {\n        return availableSpecies[i];\n      }\n    }\n\n    throw new Error(\"Species not found\");\n  }\n\n  function newSeed() {\n    seed = RND.randomString(13);\n    generate();\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"$lib/styles/reset.scss\";\n  @import \"$lib/styles/main.scss\";\n  @import '$lib/styles/global.scss';\n  @import '$lib/styles/fantasy.scss';\n</style>\n\n<svelte:head>\n  <title>Fantasy Family Generator | Iron Arachne</title>\n</svelte:head>\n\n<section class=\"fantasy main\">\n  <h1>Fantasy Family Generator</h1>\n\n  <p>This generator creates a family. Note that more than 10 iterations can be quite slow. More than 30 may or may not crash your browser.</p>\n\n  <div class=\"input-group\">\n    <label for=\"seed\">Random Seed</label>\n    <input type=\"text\" name=\"seed\" bind:value={seed} id=\"seed\"/>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"iterations\">Iterations</label>\n    <input type=\"number\" name=\"iterations\" bind:value={iterations} id=\"iterations\" min=\"1\" max=\"10\" />\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"species\">Species</label>\n    <select id=\"species\" bind:value={selectedSpecies}>\n      <option>any</option>\n      {#each availableSpecies as option}\n      <option>{option.name}</option>\n      {/each}\n    </select>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"last-name-tradition\">Last name tradition (gender)</label>\n    <select id=\"last-name-tradition\" bind:value={lastNameTradition}>\n      <option>male</option>\n      <option>female</option>\n    </select>\n  </div>\n\n  <button on:click={generate}>Generate From Seed</button>\n  <button on:click={newSeed}>Random Seed (and Generate)</button>\n\n  <h2>The {family.name} Family</h2>\n\n  {#each family.members as member}\n    <h3>{member.character.firstName} {member.character.lastName}</h3>\n    <p>{member.character.age}-year-old {member.character.species.name} {member.character.ageCategory.noun} {#if member.character.status == \"dead\"}(dead){/if}</p>\n    <p>{member.character.description}</p>\n    {#if member.mate != -1}\n      <p><strong>Mate:</strong> {family.getMate(member).character.firstName} {family.getMate(member).character.lastName}</p>\n    {/if}\n    {#if member.children.length > 0}\n      <h4>Children</h4>\n      <ul>\n        {#each family.getChildren(member) as child}\n          <li>{child.character.firstName} {child.character.lastName}</li>\n        {/each}\n      </ul>\n    {/if}\n    {#if member.parents.length > 0}\n      <h4>Parents</h4>\n      <ul>\n        {#each family.getParents(member) as parent}\n          <li>{parent.character.firstName} {parent.character.lastName}</li>\n        {/each}\n      </ul>\n    {/if}\n  {/each}\n</section>\n"],"names":["FamilyGeneratorConfig","species","iterations","nameGenFamily","nameGenFemale","nameGenMale","dominantFamilyNameGender","__publicField","FamilyMember","id","Family","parent","children","i","person","parents","FamilyGenerator","config","family","charGenConfig","CharacterGeneratorConfig","genderNames","charGen","CharacterGenerator","parent1","mateGender","getMateGender","parent2","AgeCategories.getMaxAge","newAgeCategory","AgeCategories.getCategoryFromAge","RND.simple","needsChildren","numberOfChildren","random","j","child","getNewChild","newMember","needsMate","mate","getNewMate","parent1Index","parent2Index","physicalTraits","uniqueNames","traitOverrides","RND.shuffle","charConfig","member","gender","gender1","genders","t_value","ctx","option_1","insert_hydration","target","anchor","t2_value","t4_value","p","append_hydration","strong","dirty","set_data","t2","t4","h4","ul","li","t0","t0_value","t6_value","t8_value","if_block0","create_if_block_3","create_if_block_2","if_block2","create_if_block_1","if_block3","create_if_block","h3","p0","p1","t6","t8","t11","t11_value","t25_value","each_value","ensure_array_like","add_render_callback","select0","select1","section","h1","div0","label0","input0","div1","label1","input1","div2","label2","option0","div3","label3","option1","option2","button0","button1","h2","t25","seed","RND.randomString","availableSpecies","FantasySpecies.all","selectedSpecies","CommonSpecies.randomWeighted","familyNameGen","femaleNameGen","maleNameGen","lastNameTradition","getDominantGender","generator","generate","seedrandom","getSpecies","$$invalidate","name","newSeed","to_number","select_value"],"mappings":"83BAMA,MAAAA,EAAA,CAME,YAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,CANyCC,EAAA,gBACzCA,EAAA,mBACAA,EAAA,gCACAA,EAAA,gCACAA,EAAA,8BACAA,EAAA,iCAWE,KAAA,QAAAN,EACA,KAAA,WAAAC,EACA,KAAA,wBAAAC,EACA,KAAA,wBAAAC,EACA,KAAA,sBAAAC,EACA,KAAA,yBAAAC,CAAgC,CAEpC,CCzBA,MAAAE,EAAA,CAKE,YAAAC,EAAA,CALgCF,EAAA,WAChCA,EAAA,kBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,aAIE,KAAA,GAAAE,EACA,KAAA,SAAA,GACA,KAAA,QAAA,GACA,KAAA,KAAA,EAAY,CAEhB,CCZA,MAAAC,EAAA,CAKE,aAAA,CAL0BH,EAAA,aAC1BA,EAAA,gBACAA,EAAA,4BACAA,EAAA,4BACAA,EAAA,0BAIE,KAAA,KAAA,GACA,KAAA,QAAA,EAAgB,CAClB,YAAAI,EAAA,CAGE,IAAAC,EAAA,CAAA,EACA,QAAAC,EAAA,EAAAA,EAAAF,EAAA,SAAA,OAAAE,IACED,EAAA,KAAA,KAAA,QAAAD,EAAA,SAAAE,CAAA,CAAA,CAAA,EAGF,OAAAD,CAAO,CACT,QAAAE,EAAA,CAGE,OAAA,KAAA,QAAAA,EAAA,IAAA,CAA+B,CACjC,WAAAA,EAAA,CAGE,IAAAC,EAAA,CAAA,EACA,QAAAF,EAAA,EAAAA,EAAAC,EAAA,QAAA,OAAAD,IACEE,EAAA,KAAA,KAAA,QAAAD,EAAA,QAAAD,CAAA,CAAA,CAAA,EAGF,OAAAE,CAAO,CAEX,CCzBA,MAAAC,EAAA,CACE,YAAAC,EAAA,CADmCV,EAAA,eAIjC,KAAA,OAAAU,CAAc,CAChB,UAAA,CAGE,IAAAC,EAAA,IAAAR,GACAQ,EAAA,oBAAA,KAAA,OAAA,wBACAA,EAAA,oBAAA,KAAA,OAAA,wBACAA,EAAA,kBAAA,KAAA,OAAA,sBAEA,IAAAC,EAAA,IAAAC,GACAD,EAAA,eAAA,CAAA,KAAA,OAAA,OAAA,EACAA,EAAA,cAAA,CAAA,aAAA,EACAA,EAAA,oBAAAD,EAAA,oBACAC,EAAA,oBAAAD,EAAA,oBACAC,EAAA,kBAAAD,EAAA,kBAEA,IAAAG,EAAA,CAAA,EACA,QAAAR,EAAA,EAAAA,EAAA,KAAA,OAAA,QAAA,QAAA,OAAAA,IACEQ,EAAA,KAAA,KAAA,OAAA,QAAA,QAAAR,CAAA,EAAA,IAAA,EAEFM,EAAA,kBAAAE,EAEA,IAAAC,EAAA,IAAAC,GAAAJ,CAAA,EAEAK,EAAA,IAAAhB,GAAA,CAAA,EACAgB,EAAA,UAAAF,EAAA,WACAE,EAAA,UAAA,KAAA,EACAA,EAAA,UAAA,YAAAF,EAAA,SAAAE,EAAA,SAAA,EAEA,IAAAC,EAAAC,GAAAF,EAAA,UAAA,OAAA,KAAA,OAAA,QAAA,OAAA,EACAF,EAAA,OAAA,kBAAA,CAAAG,EAAA,IAAA,EACA,IAAAE,EAAA,IAAAnB,GAAA,CAAA,EACAmB,EAAA,UAAAL,EAAA,WACAK,EAAA,UAAA,KAAA,EACAA,EAAA,UAAA,YAAAL,EAAA,SAAAK,EAAA,SAAA,EAEAH,EAAA,UAAA,OAAA,MAAA,KAAA,OAAA,yBAAA,MACEG,EAAA,UAAA,SAAAH,EAAA,UAAA,SACAN,EAAA,KAAAM,EAAA,UAAA,WAEAA,EAAA,UAAA,SAAAG,EAAA,UAAA,SACAT,EAAA,KAAAS,EAAA,UAAA,UAGFH,EAAA,KAAAG,EAAA,GACAA,EAAA,KAAAH,EAAA,GAEAN,EAAA,QAAA,KAAAM,CAAA,EACAN,EAAA,QAAA,KAAAS,CAAA,EAEA,QAAAd,EAAA,EAAAA,EAAA,KAAA,OAAA,WAAAA,IACEK,EAAA,KAAA,QAAAA,CAAA,EAGF,OAAAA,CAAO,CACT,QAAAA,EAAA,CAIE,IAAAC,EAAA,IAAAC,GACA,MAAAE,EAAA,IAAAC,GAAAJ,CAAA,EAEA,QAAAN,EAAA,EAAAA,EAAAK,EAAA,QAAA,OAAAL,IAAA,CAKE,GAJAK,EAAA,QAAAL,CAAA,EAAA,UAAA,QAAA,UACEK,EAAA,QAAAL,CAAA,EAAA,UAAA,KAAA,GAGFK,EAAA,QAAAL,CAAA,EAAA,UAAA,IAAAe,GAAAV,EAAA,QAAAL,CAAA,EAAA,UAAA,OAAA,aAAA,EAIEK,EAAA,QAAAL,CAAA,EAAA,UAAA,OAAA,WAAqC,CAErC,IAAAgB,EAAAC,GAAmCZ,EAAA,QAAAL,CAAA,EAAA,UAAA,IACLK,EAAA,QAAAL,CAAA,EAAA,UAAA,OAAA,aACO,EAErCgB,EAAA,MAAAX,EAAA,QAAAL,CAAA,EAAA,UAAA,YAAA,OACEK,EAAA,QAAAL,CAAA,EAAA,UAAA,OAAAgB,EAAA,eACAX,EAAA,QAAAL,CAAA,EAAA,UAAA,OAAAgB,EAAA,gBAEFX,EAAA,QAAAL,CAAA,EAAA,UAAA,YAAAgB,CAA0C,CAK5C,GAFAX,EAAA,QAAAL,CAAA,EAAA,UAAA,YAAAS,EAAA,SAAAJ,EAAA,QAAAL,CAAA,EAAA,SAAA,EAEAK,EAAA,QAAAL,CAAA,EAAA,UAAA,QAAA,OAIA,IAAAkB,GAAA,GAAA,EAAA,GAAA,CAEEb,EAAA,QAAAL,CAAA,EAAA,UAAA,OAAA,OACA,QAAA,CAGF,GAAAmB,GAAAd,EAAA,QAAAL,CAAA,CAAA,GAAAkB,GAAA,GAAA,EAAA,GAAA,CACE,IAAAE,EAAAC,GAAA,IAAA,EAAA,CAAA,EACA,QAAAC,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACE,IAAAC,EAAAC,GAAAxB,EAAAK,EAAA,QAAAL,CAAA,EAAA,KAAAK,CAAA,EACAoB,EAAA,IAAA9B,GAAAU,EAAA,QAAA,MAAA,EACAoB,EAAA,UAAAF,EACAE,EAAA,QAAA,CAAAzB,EAAAK,EAAA,QAAAL,CAAA,EAAA,IAAA,EACAK,EAAA,QAAAL,CAAA,EAAA,SAAA,KAAAyB,EAAA,EAAA,EACApB,EAAA,QAAAA,EAAA,QAAAL,CAAA,EAAA,IAAA,EAAA,SAAA,KAAAyB,EAAA,EAAA,EAEApB,EAAA,QAAAL,CAAA,EAAA,UAAA,OAAA,MAAA,KAAA,OAAA,yBAAA,KAGEyB,EAAA,UAAA,SAAApB,EAAA,QAAAL,CAAA,EAAA,UAAA,SAEAyB,EAAA,UAAA,SAAApB,EAAA,QAAAA,EAAA,QAAAL,CAAA,EAAA,IAAA,EAAA,UAAA,SAGFK,EAAA,QAAA,KAAAoB,CAAA,CAA6B,CAC/B,CAGF,GAAAC,GAAArB,EAAA,QAAAL,CAAA,CAAA,GAAAkB,GAAA,GAAA,EAAA,GAAA,CACE,IAAAS,EAAAC,GAAAvB,EAAA,QAAAL,CAAA,EAAAK,CAAA,EACAoB,EAAA,IAAA9B,GAAAU,EAAA,QAAA,MAAA,EACAoB,EAAA,UAAAE,EACAF,EAAA,KAAAzB,EACAK,EAAA,QAAAL,CAAA,EAAA,KAAAyB,EAAA,GAEApB,EAAA,QAAAL,CAAA,EAAA,UAAA,OAAA,MAAA,KAAA,OAAA,yBAAA,KACEyB,EAAA,UAAA,SAAApB,EAAA,QAAAL,CAAA,EAAA,UAAA,SAEAK,EAAA,QAAAL,CAAA,EAAA,UAAA,SAAAyB,EAAA,UAAA,SAGFpB,EAAA,QAAA,KAAAoB,CAAA,CAA6B,EAC/B,CAGF,OAAApB,CAAO,CAEX,CAEA,SAAAmB,GAAAK,EAAAC,EAAAzB,EAAA,CACE,IAAAM,EAAAN,EAAA,QAAAwB,CAAA,EAAA,UACAf,EAAAT,EAAA,QAAAyB,CAAA,EAAA,UAEAC,EAAApB,EAAA,eAAA,OAAAG,EAAA,cAAA,EACAkB,EAAA,CAAA,EACAC,EAAA,CAAA,EACAF,EAAAG,GAAAH,CAAA,EACA,QAAA/B,EAAA,EAAAA,EAAA+B,EAAA,OAAA/B,IACEgC,EAAA,SAAAD,EAAA/B,CAAA,EAAA,IAAA,IACEiC,EAAA,KAAAF,EAAA/B,CAAA,CAAA,EACAgC,EAAA,KAAAD,EAAA/B,CAAA,EAAA,IAAA,GAIJ,IAAAmC,EAAA,IAAA5B,GACA4B,EAAA,eAAA,CAAAxB,EAAA,QAAAG,EAAA,OAAA,EACAqB,EAAA,cAAA,CAAA,SAAA,SAAA,EACAA,EAAA,oBAAA9B,EAAA,oBACA8B,EAAA,oBAAA9B,EAAA,oBACA8B,EAAA,kBAAA9B,EAAA,kBACA,IAAAG,EAAA,CAAA,EACA,QAAAR,EAAA,EAAAA,EAAAW,EAAA,QAAA,QAAA,OAAAX,IACEQ,EAAA,KAAAG,EAAA,QAAA,QAAAX,CAAA,EAAA,IAAA,EAEF,OAAAmC,EAAA,kBAAA3B,EACA2B,EAAA,uBAAAF,EAEA,IAAAvB,GAAAyB,CAAA,EAEA,UAGF,CAEA,SAAAP,GAAAQ,EAAA/B,EAAA,CACE,IAAAgC,EAAAD,EAAA,UAAA,OAEAD,EAAA,IAAA5B,GACA,OAAA4B,EAAA,eAAA,CAAAC,EAAA,UAAA,OAAA,EACAD,EAAA,cAAA,CAAA,OAAA,EACAA,EAAA,oBAAA9B,EAAA,oBACA8B,EAAA,oBAAA9B,EAAA,oBACA8B,EAAA,kBAAA9B,EAAA,kBACA8B,EAAA,kBAAA,CAAAtB,GAAAwB,EAAAD,EAAA,UAAA,QAAA,OAAA,EAAA,IAAA,EAEA,IAAA1B,GAAAyB,CAAA,EAEA,UAGF,CAEA,SAAAtB,GAAAyB,EAAAC,EAAA,CACE,QAAAvC,EAAA,EAAAA,EAAAuC,EAAA,OAAAvC,IACE,GAAAuC,EAAAvC,CAAA,EAAA,MAAAsC,EAAA,KACE,OAAAC,EAAAvC,CAAA,EAIJ,OAAAsC,CACF,CAEA,SAAAnB,GAAAiB,EAAA,CACE,OAAAA,EAAA,MAAA,IAAAA,EAAA,SAAA,QAAA,GAAAA,EAAA,UAAA,YAAA,MAAA,OASF,CAEA,SAAAV,GAAAU,EAAA,CACE,OAAAA,EAAA,UAAA,YAAA,MAAA,SAAAA,EAAA,MAAA,EAKF,0PC1HeI,EAAAC,MAAO,KAAI,sHAAXC,EAAA,QAAAD,MAAO,6BAAhBE,EAA6BC,EAAAF,EAAAG,CAAA,kEAoB+G,QAAM,cAAN,QAAM,sEAGvHC,EAAAL,KAAO,QAAQA,EAAQ,EAAA,CAAA,EAAA,UAAU,UAAS,OAAGM,EAAAN,KAAO,QAAQA,EAAQ,EAAA,CAAA,EAAA,UAAU,SAAQ,uVAAjHE,EAAqHC,EAAAI,EAAAH,CAAA,EAAlHI,EAAsBD,EAAAE,CAAA,sCAAEC,EAAA,CAAA,EAAA,IAAAL,KAAAA,EAAAL,KAAO,QAAQA,EAAQ,EAAA,CAAA,EAAA,UAAU,UAAS,KAAAW,EAAAC,EAAAP,CAAA,EAAGK,EAAA,CAAA,EAAA,IAAAJ,KAAAA,EAAAN,KAAO,QAAQA,EAAQ,EAAA,CAAA,EAAA,UAAU,SAAQ,KAAAW,EAAAE,EAAAP,CAAA,6DAKxGN,EAAM,CAAA,EAAC,YAAYA,EAAM,EAAA,CAAA,CAAA,uBAA9B,OAAIzC,GAAA,8XAFR2C,EAAgBC,EAAAW,EAAAV,CAAA,WAChBF,EAIIC,EAAAY,EAAAX,CAAA,4EAHKJ,EAAM,CAAA,EAAC,YAAYA,EAAM,EAAA,CAAA,CAAA,oBAA9B,OAAIzC,GAAA,EAAA,mHAAJ,mEACKyC,EAAK,EAAA,EAAC,UAAU,UAAS,SAAGA,EAAK,EAAA,EAAC,UAAU,SAAQ,wLAAzDE,EAA8DC,EAAAa,EAAAZ,CAAA,+CAAzDJ,EAAK,EAAA,EAAC,UAAU,UAAS,KAAAW,EAAAM,EAAAC,CAAA,kBAAGlB,EAAK,EAAA,EAAC,UAAU,SAAQ,KAAAW,EAAAC,EAAAP,CAAA,8DAOpDL,EAAM,CAAA,EAAC,WAAWA,EAAM,EAAA,CAAA,CAAA,uBAA7B,OAAIzC,GAAA,0YAFR2C,EAAeC,EAAAW,EAAAV,CAAA,WACfF,EAIIC,EAAAY,EAAAX,CAAA,mFAHKJ,EAAM,CAAA,EAAC,WAAWA,EAAM,EAAA,CAAA,CAAA,oBAA7B,OAAIzC,GAAA,EAAA,gHAAJ,mEACKyC,EAAM,EAAA,EAAC,UAAU,UAAS,SAAGA,EAAM,EAAA,EAAC,UAAU,SAAQ,wLAA3DE,EAAgEC,EAAAa,EAAAZ,CAAA,+CAA3DJ,EAAM,EAAA,EAAC,UAAU,UAAS,KAAAW,EAAAM,EAAAC,CAAA,kBAAGlB,EAAM,EAAA,EAAC,UAAU,SAAQ,KAAAW,EAAAC,EAAAP,CAAA,yCAlB5DL,EAAM,EAAA,EAAC,UAAU,UAAS,SAAGA,EAAM,EAAA,EAAC,UAAU,SAAQ,WACvDA,EAAM,EAAA,EAAC,UAAU,IAAG,OAAYmB,EAAAnB,EAAO,EAAA,EAAA,UAAU,QAAQ,KAAI,OAAGoB,EAAApB,EAAO,EAAA,EAAA,UAAU,YAAY,KAAI,cACjGA,EAAM,EAAA,EAAC,UAAU,YAAW,aAD4EqB,EAAArB,EAAO,EAAA,EAAA,UAAU,QAAU,QAAMsB,GAAA,IAExItB,EAAM,EAAA,EAAC,MAAI,IAAMuB,GAAAvB,CAAA,EAGjBwB,EAAAxB,EAAO,EAAA,EAAA,SAAS,OAAS,GAACyB,GAAAzB,CAAA,EAQ1B0B,EAAA1B,EAAO,EAAA,EAAA,QAAQ,OAAS,GAAC2B,GAAA3B,CAAA,qEAbL,YAAU,8PAAV,YAAU,+RADnCE,EAAgEC,EAAAyB,EAAAxB,CAAA,gCAChEF,EAA4JC,EAAA0B,EAAAzB,CAAA,qEAC5JF,EAAoCC,EAAA2B,EAAA1B,CAAA,yGAF/BJ,EAAM,EAAA,EAAC,UAAU,UAAS,KAAAW,EAAAM,EAAAC,CAAA,kBAAGlB,EAAM,EAAA,EAAC,UAAU,SAAQ,KAAAW,EAAAC,EAAAP,CAAA,kBACvDL,EAAM,EAAA,EAAC,UAAU,IAAG,KAAAW,EAAAE,EAAAP,CAAA,EAAYI,EAAA,CAAA,EAAA,IAAAS,KAAAA,EAAAnB,EAAO,EAAA,EAAA,UAAU,QAAQ,KAAI,KAAAW,EAAAoB,EAAAZ,CAAA,EAAGT,EAAA,CAAA,EAAA,IAAAU,KAAAA,EAAApB,EAAO,EAAA,EAAA,UAAU,YAAY,KAAI,KAAAW,EAAAqB,EAAAZ,CAAA,EAAOpB,EAAO,EAAA,EAAA,UAAU,QAAU,wEACnIA,EAAM,EAAA,EAAC,UAAU,YAAW,KAAAW,EAAAsB,EAAAC,CAAA,EAC3BlC,EAAM,EAAA,EAAC,MAAI,qEAGXA,EAAO,EAAA,EAAA,SAAS,OAAS,oEAQzBA,EAAO,EAAA,EAAA,QAAQ,OAAS,glBAjBtBmC,GAAAnC,KAAO,KAAI,wBAjBTA,EAAgB,CAAA,CAAA,wBAArB,OAAIzC,GAAA,sBAmBH,IAAA6E,GAAAC,GAAArC,KAAO,OAAO,wBAAnB,OAAIzC,GAAA,gmBAFF,MAAI,gBAAa,SAAO,4sDAAxB,MAAI,sBAAa,SAAO,8tBAnBOyC,EAAe,CAAA,IAAA,QAAAsC,GAAA,IAAAtC,EAAA,EAAA,EAAA,KAAAuC,CAAA,CAAA,6OAUHvC,EAAiB,CAAA,IAAA,QAAAsC,GAAA,IAAAtC,EAAA,EAAA,EAAA,KAAAwC,CAAA,CAAA,gMA3BlEtC,EA8DSC,EAAAsC,EAAArC,CAAA,EA7DPI,EAAgCiC,EAAAC,CAAA,SAEhClC,EAA2IiC,EAAAlC,CAAA,SAE3IC,EAGKiC,EAAAE,CAAA,EAFHnC,EAAoCmC,EAAAC,CAAA,SACpCpC,EAA2DmC,EAAAE,CAAA,OAAhB7C,EAAI,CAAA,CAAA,SAGjDQ,EAGKiC,EAAAK,CAAA,EAFHtC,EAAyCsC,EAAAC,CAAA,SACzCvC,EAAiGsC,EAAAE,CAAA,OAA9ChD,EAAU,CAAA,CAAA,SAG/DQ,EAQKiC,EAAAQ,CAAA,EAPHzC,EAAmCyC,EAAAC,CAAA,SACnC1C,EAKQyC,EAAAV,CAAA,EAJN/B,EAAmB+B,EAAAY,CAAA,wDADYnD,EAAe,CAAA,EAAA,EAAA,SAQlDQ,EAMKiC,EAAAW,CAAA,EALH5C,EAAoE4C,EAAAC,CAAA,SACpE7C,EAGQ4C,EAAAZ,CAAA,EAFNhC,EAAoBgC,EAAAc,CAAA,EACpB9C,EAAsBgC,EAAAe,EAAA,OAFqBvD,EAAiB,CAAA,EAAA,EAAA,UAMhEQ,EAAsDiC,EAAAe,EAAA,UACtDhD,EAA6DiC,EAAAgB,EAAA,UAE7DjD,EAAgCiC,EAAAiB,EAAA,6LAHd1D,EAAQ,CAAA,CAAA,gBACRA,EAAO,CAAA,CAAA,uCA3BoBA,EAAI,CAAA,QAAJA,EAAI,CAAA,CAAA,wBAKIA,EAAU,CAAA,QAAVA,EAAU,CAAA,CAAA,iBAOpDA,EAAgB,CAAA,CAAA,qBAArB,OAAIzC,GAAA,EAAA,qHAAJ,wBAF6ByC,EAAe,CAAA,CAAA,eAUHA,EAAiB,CAAA,CAAA,EASvDU,EAAA,CAAA,EAAA,IAAAyB,MAAAA,GAAAnC,KAAO,KAAI,KAAAW,EAAAgD,GAAAxB,EAAA,WAEbC,GAAAC,GAAArC,KAAO,OAAO,qBAAnB,OAAIzC,GAAA,EAAA,qHAAJ,6FAzHEqG,EAAOC,GAAiB,EAAE,EAC1BC,EAAmBC,KACnBC,EAAkB,MAClBrH,EAAUsH,GAA6BH,CAAgB,EACvDlH,EAAa,EACb,GAAAD,EAAQ,iBAAiB,SAAW,KAC5B,MAAA,IAAA,MAAM,gDAAgD,EAE9D,GAAAA,EAAQ,iBAAiB,SAAW,KAC5B,MAAA,IAAA,MAAM,gDAAgD,EAE9D,GAAAA,EAAQ,iBAAiB,OAAS,KAC1B,MAAA,IAAA,MAAM,8CAA8C,EAE5D,IAAAuH,EAA+BvH,EAAQ,iBAAiB,OACxDwH,EAA+BxH,EAAQ,iBAAiB,OACxDyH,EAA6BzH,EAAQ,iBAAiB,KACtD0H,EAAoB,OACpB1G,EAAA,IAAajB,GAAsBC,EAASC,EAAYsH,EAAeC,EAAeC,EAAaE,EAAA,CAAA,EACnGC,EAAA,IAAgB7G,GAAgBC,CAAM,EACtCC,EAAS2G,EAAU,WAEd,SAAAC,GAAA,CAGH,GAFJ5F,GAAO,IAAI6F,GAAWb,CAAI,CAAA,EAC1BjH,EAAU+H,GAAWV,CAAe,EAChCrH,EAAQ,iBAAiB,SAAW,KAC5B,MAAA,IAAA,MAAM,gDAAgD,EAE9D,GAAAA,EAAQ,iBAAiB,SAAW,KAC5B,MAAA,IAAA,MAAM,gDAAgD,EAE9D,GAAAA,EAAQ,iBAAiB,OAAS,KAC1B,MAAA,IAAA,MAAM,8CAA8C,EAEhEuH,EAAgBvH,EAAQ,iBAAiB,OACzCwH,EAAgBxH,EAAQ,iBAAiB,OACzCyH,EAAczH,EAAQ,iBAAiB,KACvCgB,EAAA,IAAajB,GAAsBC,EAASC,EAAYsH,EAAeC,EAAeC,EAAaE,EAAA,CAAA,EACnGC,EAAU,OAAS5G,EACnBgH,EAAA,EAAA/G,EAAS2G,EAAU,SAAA,CAAA,EAGZ,SAAAD,GAAA,CACE,QAAA/G,EAAE,EAAEA,EAAEZ,EAAQ,QAAQ,OAAOY,OAChCZ,EAAQ,QAAQY,CAAC,EAAE,MAAQ8G,EACtB,OAAA1H,EAAQ,QAAQY,CAAC,EAIlB,MAAA,IAAA,MAAM,yBAAyB,WAGlCmH,GAAWE,EAAA,IACdA,GAAQ,MACH,OAAAX,GAA6BH,CAAgB,UAG7CvG,EAAE,EAAEA,EAAEuG,EAAiB,OAAOvG,OACjCuG,EAAiBvG,CAAC,EAAE,MAAQqH,EACvB,OAAAd,EAAiBvG,CAAC,EAInB,MAAA,IAAA,MAAM,mBAAmB,EAG5B,SAAAsH,GAAA,KACPjB,EAAOC,GAAiB,EAAE,CAAA,EAC1BW,iBAsB2CZ,EAAI,KAAA,0BAKIhH,EAAUkI,GAAA,KAAA,KAAA,sBAK5Bd,EAAee,GAAA,IAAA,6BAUHV,EAAiBU,GAAA,IAAA"}